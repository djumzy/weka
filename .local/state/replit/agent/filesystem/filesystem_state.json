{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# VSLA Management System\n\n## Overview\n\nThis is a comprehensive Village Savings and Loan Association (VSLA) management system built as a full-stack web application. The system enables administrators to manage multiple VSLA groups, track member savings and loans, process financial transactions, and organize community meetings. It provides a complete digital solution for traditional community banking operations with features for member management, financial tracking, loan processing, and reporting.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety and modern development practices\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Shadcn/ui components with Radix UI primitives for consistent, accessible interface components\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Layout Pattern**: Dashboard layout with sidebar navigation and main content area\n\n### Backend Architecture\n- **Runtime**: Node.js with TypeScript and ES modules\n- **Framework**: Express.js for RESTful API endpoints\n- **Database ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Authentication**: Replit Auth integration with OpenID Connect for user authentication\n- **Session Management**: Express sessions with PostgreSQL session storage\n- **API Design**: RESTful endpoints organized by resource types (groups, members, transactions, loans, meetings)\n\n### Database Design\n- **Database**: PostgreSQL with connection pooling via Neon serverless\n- **Schema Management**: Drizzle migrations for version-controlled database changes\n- **Core Entities**:\n  - Users: Authentication and profile information\n  - Groups: VSLA group management with meeting frequency and member limits\n  - Members: Individual participants within groups with savings balances\n  - Transactions: Financial activities (deposits, withdrawals, loan payments)\n  - Loans: Loan applications and repayment tracking\n  - Meetings: Scheduled group meetings with attendance tracking\n- **Relationships**: Hierarchical structure with groups containing members, and transactions/loans linked to both groups and members\n\n### Authentication & Authorization\n- **Provider**: Replit Auth with OpenID Connect flow\n- **Session Storage**: PostgreSQL-backed sessions with automatic expiration\n- **Security**: HTTP-only cookies, HTTPS enforcement, and session-based authentication\n- **User Flow**: Landing page for unauthenticated users, automatic redirect to dashboard after authentication\n\n### Data Management Patterns\n- **Validation**: Zod schemas shared between client and server for consistent data validation\n- **Error Handling**: Centralized error handling with proper HTTP status codes and user-friendly messages\n- **Caching**: Client-side caching via React Query with optimistic updates\n- **Real-time Updates**: Query invalidation for immediate UI updates after mutations\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL serverless database with connection pooling\n- **Authentication**: Replit Auth service for user authentication and session management\n- **Build & Development**: Vite with React plugin and TypeScript support\n\n### UI & Styling\n- **Component Library**: Radix UI primitives for accessible, unstyled components\n- **Design System**: Shadcn/ui for pre-built component implementations\n- **Styling**: Tailwind CSS with PostCSS for utility-first styling\n- **Icons**: Lucide React for consistent iconography\n- **Fonts**: Google Fonts integration (Inter, DM Sans, Fira Code, Geist Mono)\n\n### Development Tools\n- **Type Checking**: TypeScript with strict configuration\n- **Form Handling**: React Hook Form with Zod validation resolvers\n- **Date Handling**: date-fns for date formatting and manipulation\n- **Utilities**: clsx and tailwind-merge for conditional CSS classes\n- **Development**: ESBuild for server bundling, TSX for development server\n\n### Runtime Dependencies\n- **Session Storage**: connect-pg-simple for PostgreSQL session storage\n- **WebSocket**: WebSocket polyfill for Neon database connections\n- **Memory Management**: Memoizee for caching expensive operations\n- **ID Generation**: Nanoid for unique identifier generation","size_bytes":4508},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/analysis_options_1756286140333.yaml":{"content":"include: package:flutter_lints/flutter.yaml\n\nlinter:\n  rules:","size_bytes":61},"server/auth.ts":{"content":"import { Express, Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User, loginSchema } from \"@shared/schema\";\nimport connectPg from \"connect-pg-simple\";\n\ndeclare global {\n  namespace Express {\n    interface User {\n      id: string;\n      userId: string;\n      firstName: string;\n      lastName: string;\n      role: string;\n    }\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\n// Hash PIN for secure storage\nasync function hashPin(pin: string): Promise<string> {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(pin, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\n// Compare provided PIN with stored hash\nexport async function comparePin(supplied: string, stored: string): Promise<boolean> {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\n// Generate unique User ID in TDXXXXXX format\nexport function generateUserId(): string {\n  const randomPart = Math.floor(100000 + Math.random() * 900000).toString();\n  return `TD${randomPart}`;\n}\n\n// Setup authentication middleware\nexport function setupAuth(app: Express) {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"weka-secret-key-development-only\",\n    resave: false,\n    saveUninitialized: false,\n    store: sessionStore,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n\n  // Login endpoint\n  app.post(\"/api/login\", async (req: Request, res: Response) => {\n    try {\n      const { phoneOrUserId, pin } = loginSchema.parse(req.body);\n\n      // Find user by phone or userId\n      const user = await storage.getUserByPhoneOrUserId(phoneOrUserId);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Check if user is active\n      if (!user.isActive) {\n        return res.status(401).json({ message: \"Account is deactivated\" });\n      }\n\n      // Verify PIN\n      const isValidPin = await comparePin(pin, user.pin);\n      if (!isValidPin) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Update last login\n      await storage.updateUser(user.id, { lastLogin: new Date() });\n\n      // Set session\n      (req.session as any).userId = user.id;\n      (req.session as any).userRole = user.role;\n\n      // Return user data (without PIN)\n      const { pin: _, ...userWithoutPin } = user;\n      res.json(userWithoutPin);\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(400).json({ message: \"Invalid login data\" });\n    }\n  });\n\n  // Barcode login endpoint\n  app.post(\"/api/login/barcode\", async (req: Request, res: Response) => {\n    try {\n      const { barcodeData } = req.body;\n      \n      if (!barcodeData || typeof barcodeData !== 'string') {\n        return res.status(400).json({ message: \"Invalid barcode data\" });\n      }\n\n      // Find user by barcode data (assuming barcode contains userId)\n      // You can modify this logic based on your barcode format\n      const user = await storage.getUserByBarcodeData(barcodeData);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid barcode or user not found\" });\n      }\n\n      // Check if user is active\n      if (!user.isActive) {\n        return res.status(401).json({ message: \"Account is deactivated\" });\n      }\n\n      // Update last login\n      await storage.updateUser(user.id, { lastLogin: new Date() });\n\n      // Set session\n      (req.session as any).userId = user.id;\n      (req.session as any).userRole = user.role;\n\n      // Return user data (without PIN)\n      const { pin: _, ...userWithoutPin } = user;\n      res.json(userWithoutPin);\n    } catch (error) {\n      console.error(\"Barcode login error:\", error);\n      res.status(400).json({ message: \"Barcode login failed\" });\n    }\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req: Request, res: Response) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Get current user endpoint - handles both staff and member sessions\n  app.get(\"/api/auth/user\", async (req: Request, res: Response) => {\n    const session = req.session as any;\n    \n    console.log('Auth check - session:', { \n      sessionId: req.sessionID,\n      userId: session.userId, \n      memberId: session.memberId,\n      userRole: session.userRole,\n      sessionKeys: Object.keys(session || {})\n    });\n    \n    try {\n      // Handle staff authentication\n      if (session.userId) {\n        const user = await storage.getUser(session.userId);\n        if (!user || !user.isActive) {\n          return res.status(401).json({ message: \"Unauthorized\" });\n        }\n        // Return staff user data (without PIN)\n        const { pin: _, ...userWithoutPin } = user;\n        res.json({ userType: 'staff', user: userWithoutPin });\n        return;\n      }\n      \n      // Handle member authentication - but only if no userId is present (corrupted session check)\n      if (session.memberId && session.userRole === 'member' && !session.userId) {\n        const member = await storage.getMember(session.memberId);\n        if (!member || !member.isActive) {\n          return res.status(401).json({ message: \"Unauthorized\" });\n        }\n        // Return member data (without PIN)\n        const { pin: _, ...memberWithoutPin } = member;\n        res.json({ userType: 'member', member: memberWithoutPin });\n        return;\n      }\n      \n      // Handle corrupted sessions - clear them\n      if (session.memberId && session.userId && session.userRole === 'member') {\n        console.log('Clearing corrupted member session with both userId and memberId');\n        req.session.destroy((err) => {\n          if (err) console.error('Session destroy error:', err);\n        });\n        return res.status(401).json({ message: \"Session corrupted - cleared\" });\n      }\n      \n      console.log('No valid session found - unauthorized');\n      return res.status(401).json({ message: \"Unauthorized\" });\n      \n    } catch (error) {\n      console.error(\"Auth user error:\", error);\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n}\n\n// Authentication middleware - handles both staff and member authentication\nexport function isAuthenticated(req: Request, res: Response, next: NextFunction) {\n  const session = req.session as any;\n  \n  // Check for staff authentication (userId-based)\n  if (session.userId) {\n    (req as any).userId = session.userId;\n    (req as any).userRole = session.userRole;\n    return next();\n  }\n  \n  // Check for member authentication (memberId-based)\n  if (session.memberId && session.userRole === 'member') {\n    (req as any).memberId = session.memberId;\n    (req as any).userRole = session.userRole;\n    return next();\n  }\n\n  return res.status(401).json({ message: \"Unauthorized\" });\n}\n\n// Role-based authorization middleware\nexport function requireRole(allowedRoles: string[]) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const userRole = (req as any).userRole;\n    \n    if (!allowedRoles.includes(userRole)) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n    \n    next();\n  };\n}\n\n// Middleware to check if member's group is still active\nexport function requireActiveGroup(storage: any) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    const userRole = (req as any).userRole;\n    const memberId = (req as any).memberId;\n    \n    // Only apply this check to members, not staff\n    if (userRole === 'member' && memberId) {\n      try {\n        const member = await storage.getMember(memberId);\n        if (!member) {\n          return res.status(401).json({ message: \"Member not found\" });\n        }\n        \n        const group = await storage.getGroup(member.groupId);\n        if (!group || !group.isActive) {\n          // Clear the session for deactivated group members\n          req.session.destroy((err) => {\n            if (err) console.error('Session destroy error:', err);\n          });\n          return res.status(403).json({ \n            message: \"Access denied. Your group has been deactivated. Please contact your administrator.\" \n          });\n        }\n      } catch (error) {\n        console.error(\"Error checking group status:\", error);\n        return res.status(500).json({ message: \"Error validating group access\" });\n      }\n    }\n    \n    next();\n  };\n}\n\n// Hash PIN utility for user creation\nexport { hashPin };","size_bytes":9291},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n\n  // Add endpoint to clear sessions - for handling session conflicts\n  app.post(\"/api/clear-session\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error(\"Session destruction error:\", err);\n        return res.status(500).json({ message: \"Failed to clear session\" });\n      }\n      res.clearCookie('connect.sid'); // Clear the session cookie\n      res.clearCookie('session'); // Clear any other session cookies\n      res.json({ message: \"Session cleared\" });\n    });\n  });\n\n  // Add endpoint to force clear all sessions\n  app.get(\"/api/clear-all-sessions\", (req, res) => {\n    req.session.destroy((err) => {\n      res.clearCookie('connect.sid');\n      res.clearCookie('session');\n      res.redirect('/');\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4978},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, requireRole } from \"./auth\";\nimport { \n  insertGroupSchema, \n  insertMemberSchema, \n  insertTransactionSchema, \n  insertLoanSchema,\n  insertMeetingSchema,\n  insertUserSchema,\n  insertCashboxSchema,\n  type InsertUser\n} from \"@shared/schema\";\nimport { generateUserId, hashPin, comparePin } from \"./auth\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware - using only internal auth system\n  setupAuth(app);\n\n  // Initialize system with demo admin user\n  app.post('/api/initialize', async (req, res) => {\n    try {\n      // Check if any admin users exist\n      const users = await storage.getUsers();\n      const hasAdmin = users.some(user => user.role === 'admin');\n      \n      if (hasAdmin) {\n        return res.status(400).json({ message: 'System already initialized' });\n      }\n      \n      // Create demo admin user\n      const adminUser: InsertUser = {\n        userId: generateUserId(),\n        firstName: 'System',\n        lastName: 'Administrator',\n        phone: '+1234567890',\n        email: 'admin@weka.com',\n        pin: await hashPin('123456'),\n        role: 'admin',\n        isActive: true,\n        location: 'Main Office',\n      };\n      \n      const user = await storage.createUser(adminUser);\n      const { pin, ...safeUser } = user;\n      \n      res.json({ \n        message: 'System initialized successfully',\n        adminUser: safeUser,\n        credentials: {\n          userId: user.userId,\n          phone: user.phone,\n          pin: '123456' // Only show during initialization\n        }\n      });\n    } catch (error) {\n      console.error('Initialization error:', error);\n      res.status(500).json({ message: 'Failed to initialize system' });\n    }\n  });\n\n  // User management routes (Admin only)\n  app.get('/api/users', isAuthenticated, requireRole(['admin']), async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      // Remove PIN from response for security\n      const safeUsers = users.map((user) => {\n        const { pin, ...safeUser } = user;\n        return safeUser;\n      });\n      res.json(safeUsers);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post('/api/users', isAuthenticated, requireRole(['admin']), async (req: any, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Generate User ID if not provided\n      if (!userData.userId) {\n        userData.userId = generateUserId();\n      }\n      \n      // Hash the PIN\n      userData.pin = await hashPin(userData.pin);\n      \n      // Set assigned by\n      (userData as any).assignedBy = req.userId;\n      \n      const user = await storage.createUser(userData);\n      \n      // Remove PIN from response\n      const { pin, ...safeUser } = user;\n      res.json(safeUser);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid user data\", errors: error.errors });\n      } else {\n        console.error(\"Error creating user:\", error);\n        res.status(500).json({ message: \"Failed to create user\" });\n      }\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/dashboard/stats', isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Search endpoint with role-based filtering by group name, member name, location, and user ID\n  app.get('/api/search', isAuthenticated, async (req: any, res) => {\n    try {\n      const { q, type = 'members' } = req.query as { q: string; type: string };\n      const userRole = req.userRole;\n      const userId = req.userId;\n      \n      if (!q || q.trim().length < 2) {\n        return res.json([]);\n      }\n      \n      let results = [];\n      \n      if (type === 'members') {\n        let allMembers = [];\n        \n        if (userRole === 'admin') {\n          // Admin can search ALL members\n          allMembers = await storage.getMembers();\n        } else if (userRole === 'field_monitor') {\n          // Field monitor can search members from assigned groups only\n          const user = await storage.getUser(userId);\n          const assignedGroupIds = user?.assignedGroups || [];\n          if (assignedGroupIds.length > 0) {\n            allMembers = await storage.getMembersByGroupIds(assignedGroupIds);\n          }\n        } else if (userRole === 'field_attendant') {\n          // Field attendant can search members from groups they enrolled\n          const enrolledGroups = await storage.getGroupsByCreator(userId);\n          const groupIds = enrolledGroups.map(g => g.id);\n          if (groupIds.length > 0) {\n            allMembers = await storage.getMembersByGroupIds(groupIds);\n          }\n        } else {\n          // Members can only search within their own group\n          const memberSession = req.session.memberSession;\n          if (memberSession?.member) {\n            allMembers = await storage.getMembers(memberSession.member.groupId);\n          }\n        }\n        \n        // Filter by member name, user ID, phone\n        results = allMembers.filter(member =>\n          member.firstName.toLowerCase().includes(q.toLowerCase()) ||\n          member.lastName.toLowerCase().includes(q.toLowerCase()) ||\n          member.phone?.includes(q) ||\n          member.email?.toLowerCase().includes(q.toLowerCase()) ||\n          member.id.toLowerCase().includes(q.toLowerCase())\n        );\n      } else if (type === 'groups') {\n        let allGroups = [];\n        \n        if (userRole === 'admin') {\n          // Admin can search ALL groups\n          allGroups = await storage.getGroups();\n        } else if (userRole === 'field_monitor') {\n          // Field monitor can search assigned groups only\n          const user = await storage.getUser(userId);\n          const assignedGroupIds = user?.assignedGroups || [];\n          allGroups = await storage.getGroupsByIds(assignedGroupIds);\n        } else if (userRole === 'field_attendant') {\n          // Field attendant can search groups they enrolled\n          allGroups = await storage.getGroupsByCreator(userId);\n        } else {\n          // Members cannot search groups directly\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n        \n        // Filter by group name, location, user ID\n        results = allGroups.filter(group =>\n          group.name.toLowerCase().includes(q.toLowerCase()) ||\n          group.location?.toLowerCase().includes(q.toLowerCase()) ||\n          group.id.toLowerCase().includes(q.toLowerCase()) ||\n          group.createdBy?.toLowerCase().includes(q.toLowerCase())\n        );\n      }\n      \n      res.json(results);\n    } catch (error) {\n      console.error(\"Error searching:\", error);\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  // Group-specific statistics for members\n  app.get('/api/groups/:id/stats', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const stats = await storage.getGroupStats(id);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching group stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch group stats\" });\n    }\n  });\n\n  // Update member shares\n  app.patch('/api/members/:id/shares', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { shares } = req.body;\n      \n      if (typeof shares !== 'number' || shares < 0) {\n        return res.status(400).json({ message: \"Invalid shares value\" });\n      }\n      \n      await storage.updateMemberShares(id, shares);\n      const updatedMember = await storage.getMember(id);\n      res.json(updatedMember);\n    } catch (error) {\n      console.error(\"Error updating member shares:\", error);\n      res.status(500).json({ message: \"Failed to update member shares\" });\n    }\n  });\n\n  // Unified authentication endpoints\n  app.post('/api/auth/member-login', async (req, res) => {\n    try {\n      const { phone, pin } = req.body;\n      \n      if (!phone || !pin) {\n        return res.status(400).json({ message: \"Phone and PIN are required\" });\n      }\n      \n      const member = await storage.getMemberByPhone(phone);\n      if (!member) {\n        return res.status(401).json({ message: \"Invalid phone number or PIN\" });\n      }\n      \n      // Simple PIN verification (in production, use proper hashing)\n      if (member.pin !== pin) {\n        return res.status(401).json({ message: \"Invalid phone number or PIN\" });\n      }\n      \n      // Members do NOT need user records - they exist only in members table\n      // Set session for member authentication using member data directly\n      (req.session as any).memberId = member.id;\n      // Do NOT set userId for members - this confuses staff/member authentication\n      (req.session as any).userRole = 'member';\n      \n      console.log('Member session created:', {\n        memberId: member.id,\n        userRole: 'member'\n      });\n      \n      // Get group info and check if group is active\n      const group = await storage.getGroup(member.groupId);\n      \n      // Prevent access to deactivated groups\n      if (!group || !group.isActive) {\n        return res.status(403).json({ \n          message: \"Access denied. Your group has been deactivated. Please contact your administrator.\" \n        });\n      }\n      \n      // Get group stats for the member\n      const groupStats = await storage.getGroupStats(member.groupId);\n      \n      res.json({\n        userType: 'member',\n        member: {\n          id: member.id,\n          firstName: member.firstName,\n          lastName: member.lastName,\n          groupRole: member.groupRole,\n          groupId: member.groupId,\n          groupName: group?.name || 'Unknown Group', // Include group name\n          totalShares: member.totalShares,\n          savingsBalance: member.savingsBalance,\n          welfareBalance: member.welfareBalance,\n          currentLoan: member.currentLoan\n        },\n        groupStats\n      });\n    } catch (error) {\n      console.error(\"Error during member login:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Member session endpoint to get current logged-in member info\n  app.get('/api/member-session', async (req: any, res) => {\n    try {\n      const memberId = (req.session as any)?.memberId;\n      if (!memberId) {\n        return res.status(401).json({ message: \"No member session found\" });\n      }\n\n      const member = await storage.getMember(memberId);\n      if (!member) {\n        return res.status(404).json({ message: \"Member not found\" });\n      }\n\n      // Get group info and check if group is still active\n      const group = await storage.getGroup(member.groupId);\n      \n      // Prevent access to deactivated groups\n      if (!group || !group.isActive) {\n        // Clear the session for deactivated group members\n        req.session.destroy((err) => {\n          if (err) console.error('Session destroy error:', err);\n        });\n        return res.status(403).json({ \n          message: \"Access denied. Your group has been deactivated. Please contact your administrator.\" \n        });\n      }\n\n      // Get group stats for the member\n      const groupStats = await storage.getGroupStats(member.groupId);\n\n\n      res.json({\n        userType: 'member',\n        member: {\n          id: member.id,\n          firstName: member.firstName,\n          lastName: member.lastName,\n          groupRole: member.groupRole,\n          groupId: member.groupId,\n          groupName: group?.name || 'Unknown Group', // Include group name\n          totalShares: member.totalShares,\n          savingsBalance: member.savingsBalance,\n          welfareBalance: member.welfareBalance,\n          currentLoan: member.currentLoan\n        },\n        groupStats\n      });\n    } catch (error) {\n      console.error(\"Error fetching member session:\", error);\n      res.status(500).json({ message: \"Failed to fetch member session\" });\n    }\n  });\n\n  // Staff login endpoint\n  app.post('/api/auth/staff-login', async (req, res) => {\n    try {\n      const { userId, phone, pin, barcode } = req.body;\n      \n      console.log('Staff login attempt:', { userId, phone, pin: pin ? '[PROVIDED]' : '[MISSING]' });\n      \n      // Check if at least one identifier is provided along with PIN\n      if ((!userId && !phone) || !pin) {\n        console.log('Missing required fields');\n        return res.status(400).json({ message: \"Either User ID or phone number is required, along with PIN\" });\n      }\n      \n      let user;\n      \n      // Try to find user by userId or phone separately\n      if (userId) {\n        console.log('Looking up user by userId:', userId);\n        user = await storage.getUserByPhoneOrUserId(userId);\n      } else if (phone) {\n        console.log('Looking up user by phone:', phone);\n        user = await storage.getUserByPhoneOrUserId(phone);\n      }\n      \n      if (!user) {\n        console.log('User not found');\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      console.log('User found:', { \n        id: user.id, \n        userId: user.userId, \n        phone: user.phone, \n        role: user.role,\n        isActive: user.isActive \n      });\n      \n      // Check if user is active\n      if (!user.isActive) {\n        console.log('User account is deactivated');\n        return res.status(401).json({ message: \"Account is deactivated\" });\n      }\n      \n      // Verify PIN using proper hashing verification\n      console.log('Verifying PIN...');\n      const isValidPin = await comparePin(pin, user.pin);\n      console.log('PIN verification result:', isValidPin);\n      \n      if (!isValidPin) {\n        console.log('PIN verification failed');\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      // Update last login\n      await storage.updateUser(user.id, { lastLogin: new Date() });\n      \n      // Set session for authentication (same as original /api/login)\n      (req.session as any).userId = user.id;\n      (req.session as any).userRole = user.role;\n      \n      console.log('Session set:', { userId: user.id, userRole: user.role });\n      \n      // Save session explicitly\n      await new Promise<void>((resolve, reject) => {\n        req.session.save((err) => {\n          if (err) {\n            console.error('Session save error:', err);\n            reject(err);\n          } else {\n            console.log('Session saved successfully');\n            resolve();\n          }\n        });\n      });\n      \n      res.json({\n        userType: 'staff',\n        user: {\n          id: user.id,\n          userId: user.userId,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          location: user.location,\n          phone: user.phone,\n          email: user.email\n        }\n      });\n    } catch (error) {\n      console.error(\"Error during staff login:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Get member dashboard info\n  app.get('/api/members/:id/dashboard', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const member = await storage.getMember(id);\n      \n      if (!member) {\n        return res.status(404).json({ message: \"Member not found\" });\n      }\n      \n      const groupStats = await storage.getGroupStats(member.groupId);\n      const group = await storage.getGroup(member.groupId);\n      \n      res.json({\n        member,\n        group,\n        groupStats\n      });\n    } catch (error) {\n      console.error(\"Error fetching member dashboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch member dashboard\" });\n    }\n  });\n\n  // Group routes with role-based filtering\n  app.get('/api/groups', isAuthenticated, async (req: any, res) => {\n    try {\n      const userRole = req.userRole;\n      const userId = req.userId;\n      \n      if (userRole === 'admin') {\n        // Admin sees ALL groups\n        const groups = await storage.getGroups();\n        res.json(groups);\n      } else if (userRole === 'field_monitor') {\n        // Field monitor sees only assigned groups by admin\n        const user = await storage.getUser(userId);\n        const assignedGroupIds = user?.assignedGroups || [];\n        const groups = await storage.getGroupsByIds(assignedGroupIds);\n        res.json(groups);\n      } else if (userRole === 'field_attendant') {\n        // Field attendant sees only groups they enrolled (created)\n        const groups = await storage.getGroupsByCreator(userId);\n        res.json(groups);\n      } else {\n        // Members/other roles - no direct group access via this endpoint\n        res.status(403).json({ message: \"Access denied\" });\n      }\n    } catch (error) {\n      console.error(\"Error fetching groups:\", error);\n      res.status(500).json({ message: \"Failed to fetch groups\" });\n    }\n  });\n\n  app.post('/api/groups', isAuthenticated, async (req: any, res) => {\n    try {\n      const groupData = insertGroupSchema.parse({\n        ...req.body,\n        createdBy: req.userId\n      });\n      const group = await storage.createGroup(groupData);\n      res.json(group);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid group data\", errors: error.errors });\n      } else {\n        console.error(\"Error creating group:\", error);\n        res.status(500).json({ message: \"Failed to create group\" });\n      }\n    }\n  });\n\n  app.get('/api/groups/:id', isAuthenticated, async (req, res) => {\n    try {\n      const group = await storage.getGroup(req.params.id);\n      if (!group) {\n        return res.status(404).json({ message: \"Group not found\" });\n      }\n      res.json(group);\n    } catch (error) {\n      console.error(\"Error fetching group:\", error);\n      res.status(500).json({ message: \"Failed to fetch group\" });\n    }\n  });\n\n  app.put('/api/groups/:id', isAuthenticated, async (req, res) => {\n    try {\n      const updates = insertGroupSchema.partial().parse(req.body);\n      const group = await storage.updateGroup(req.params.id, updates);\n      if (!group) {\n        return res.status(404).json({ message: \"Group not found\" });\n      }\n      res.json(group);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid group data\", errors: error.errors });\n      } else {\n        console.error(\"Error updating group:\", error);\n        res.status(500).json({ message: \"Failed to update group\" });\n      }\n    }\n  });\n\n  app.delete('/api/groups/:id', isAuthenticated, requireRole(['admin']), async (req, res) => {\n    try {\n      const success = await storage.deleteGroup(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Group not found\" });\n      }\n      res.json({ message: \"Group deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting group:\", error);\n      res.status(500).json({ message: \"Failed to delete group\" });\n    }\n  });\n\n  // Member routes with role-based filtering\n  app.get('/api/members', isAuthenticated, async (req: any, res) => {\n    try {\n      const userRole = req.userRole;\n      const userId = req.userId;\n      const groupId = req.query.groupId as string;\n      \n      if (userRole === 'admin') {\n        // Admin sees all members\n        const members = await storage.getMembers(groupId);\n        res.json(members);\n      } else if (userRole === 'field_monitor') {\n        // Field monitor sees members from assigned groups only\n        const user = await storage.getUser(userId);\n        const assignedGroupIds = user?.assignedGroups || [];\n        if (groupId && !assignedGroupIds.includes(groupId)) {\n          return res.status(403).json({ message: \"Access denied to this group\" });\n        }\n        const members = await storage.getMembers(groupId);\n        res.json(members);\n      } else if (userRole === 'field_attendant') {\n        // Field attendant sees members from groups they enrolled only\n        if (groupId) {\n          const group = await storage.getGroup(groupId);\n          if (!group || group.createdBy !== userId) {\n            return res.status(403).json({ message: \"Access denied to this group\" });\n          }\n        }\n        const members = await storage.getMembers(groupId);\n        res.json(members);\n      } else {\n        // Member authentication - can only see their own group members\n        const memberSession = req.session.memberSession;\n        if (!memberSession?.member) {\n          return res.status(403).json({ message: \"Member session required\" });\n        }\n        const allowedGroupId = memberSession.member.groupId;\n        if (groupId && groupId !== allowedGroupId) {\n          return res.status(403).json({ message: \"Access denied to this group\" });\n        }\n        const members = await storage.getMembers(allowedGroupId);\n        res.json(members);\n      }\n    } catch (error) {\n      console.error(\"Error fetching members:\", error);\n      res.status(500).json({ message: \"Failed to fetch members\" });\n    }\n  });\n\n  app.post('/api/members', isAuthenticated, async (req: any, res) => {\n    try {\n      const userRole = req.userRole;\n      \n      // Check permissions - only admin, field staff, or group leaders can create members\n      if (userRole === 'admin' || userRole === 'field_monitor' || userRole === 'field_attendant') {\n        // Field staff can create members\n      } else {\n        // For members, only chairman, secretary, finance can create members\n        const memberSession = req.session.memberSession;\n        if (!memberSession?.member || !['chairman', 'secretary', 'finance'].includes(memberSession.member.groupRole)) {\n          return res.status(403).json({ message: \"Only group leaders can add new members\" });\n        }\n      }\n      \n      const memberData = insertMemberSchema.parse(req.body);\n      const member = await storage.createMember(memberData);\n      res.json(member);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid member data\", errors: error.errors });\n      } else {\n        console.error(\"Error creating member:\", error);\n        res.status(500).json({ message: \"Failed to create member\" });\n      }\n    }\n  });\n\n  app.get('/api/members/:id', isAuthenticated, async (req, res) => {\n    try {\n      const member = await storage.getMember(req.params.id);\n      if (!member) {\n        return res.status(404).json({ message: \"Member not found\" });\n      }\n      res.json(member);\n    } catch (error) {\n      console.error(\"Error fetching member:\", error);\n      res.status(500).json({ message: \"Failed to fetch member\" });\n    }\n  });\n\n  app.put('/api/members/:id', isAuthenticated, async (req, res) => {\n    try {\n      const updates = insertMemberSchema.partial().parse(req.body);\n      const member = await storage.updateMember(req.params.id, updates);\n      if (!member) {\n        return res.status(404).json({ message: \"Member not found\" });\n      }\n      res.json(member);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid member data\", errors: error.errors });\n      } else {\n        console.error(\"Error updating member:\", error);\n        res.status(500).json({ message: \"Failed to update member\" });\n      }\n    }\n  });\n\n  // Transaction routes with role-based filtering\n  app.get('/api/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userRole = req.userRole;\n      const userId = req.userId;\n      const groupId = req.query.groupId as string;\n      const memberId = req.query.memberId as string;\n      \n      if (userRole === 'admin') {\n        // Admin sees ALL transactions\n        const transactions = await storage.getTransactions(groupId, memberId);\n        res.json(transactions);\n      } else if (userRole === 'field_monitor') {\n        // Field monitor sees transactions from assigned groups only\n        const user = await storage.getUser(userId);\n        const assignedGroupIds = user?.assignedGroups || [];\n        if (groupId && !assignedGroupIds.includes(groupId)) {\n          return res.status(403).json({ message: \"Access denied to this group's transactions\" });\n        }\n        const transactions = await storage.getTransactions(groupId, memberId);\n        res.json(transactions);\n      } else if (userRole === 'field_attendant') {\n        // Field attendant sees transactions from groups they enrolled only\n        if (groupId) {\n          const group = await storage.getGroup(groupId);\n          if (!group || group.createdBy !== userId) {\n            return res.status(403).json({ message: \"Access denied to this group's transactions\" });\n          }\n        }\n        const transactions = await storage.getTransactions(groupId, memberId);\n        res.json(transactions);\n      } else {\n        // Member authentication - can only see their own group's transactions\n        const memberSession = req.session.memberSession;\n        if (!memberSession?.member) {\n          return res.status(403).json({ message: \"Member session required\" });\n        }\n        const allowedGroupId = memberSession.member.groupId;\n        if (groupId && groupId !== allowedGroupId) {\n          return res.status(403).json({ message: \"Access denied to this group's transactions\" });\n        }\n        const transactions = await storage.getTransactions(allowedGroupId, memberId);\n        res.json(transactions);\n      }\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post('/api/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userRole = req.userRole;\n      const userId = req.userId;\n      \n      // Check permissions - only admin, field staff, or group leaders can submit transactions\n      if (userRole === 'admin' || userRole === 'field_monitor' || userRole === 'field_attendant') {\n        // Field staff can submit\n      } else {\n        // For members, only chairman, secretary, finance can submit\n        const memberSession = req.session.memberSession;\n        if (!memberSession?.member || !['chairman', 'secretary', 'finance'].includes(memberSession.member.groupRole)) {\n          return res.status(403).json({ message: \"Only group leaders can submit transactions\" });\n        }\n      }\n      \n      const transactionData = insertTransactionSchema.parse({\n        ...req.body,\n        createdBy: req.userId\n      });\n      const transaction = await storage.createTransaction(transactionData);\n      res.json(transaction);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid transaction data\", errors: error.errors });\n      } else {\n        console.error(\"Error creating transaction:\", error);\n        res.status(500).json({ message: \"Failed to create transaction\" });\n      }\n    }\n  });\n\n  // Loan routes with role-based filtering\n  app.get('/api/loans', isAuthenticated, async (req: any, res) => {\n    try {\n      const userRole = req.userRole;\n      const userId = req.userId;\n      const groupId = req.query.groupId as string;\n      const memberId = req.query.memberId as string;\n      \n      if (userRole === 'admin') {\n        // Admin sees ALL loans\n        const loans = await storage.getLoans(groupId, memberId);\n        res.json(loans);\n      } else if (userRole === 'field_monitor') {\n        // Field monitor sees loans from assigned groups only\n        const user = await storage.getUser(userId);\n        const assignedGroupIds = user?.assignedGroups || [];\n        if (groupId && !assignedGroupIds.includes(groupId)) {\n          return res.status(403).json({ message: \"Access denied to this group's loans\" });\n        }\n        const loans = await storage.getLoans(groupId, memberId);\n        res.json(loans);\n      } else if (userRole === 'field_attendant') {\n        // Field attendant sees loans from groups they enrolled only\n        if (groupId) {\n          const group = await storage.getGroup(groupId);\n          if (!group || group.createdBy !== userId) {\n            return res.status(403).json({ message: \"Access denied to this group's loans\" });\n          }\n        }\n        const loans = await storage.getLoans(groupId, memberId);\n        res.json(loans);\n      } else {\n        // Member authentication - can only see their own group's loans\n        const memberSession = req.session.memberSession;\n        if (!memberSession?.member) {\n          return res.status(403).json({ message: \"Member session required\" });\n        }\n        const allowedGroupId = memberSession.member.groupId;\n        if (groupId && groupId !== allowedGroupId) {\n          return res.status(403).json({ message: \"Access denied to this group's loans\" });\n        }\n        const loans = await storage.getLoans(allowedGroupId, memberId);\n        res.json(loans);\n      }\n    } catch (error) {\n      console.error(\"Error fetching loans:\", error);\n      res.status(500).json({ message: \"Failed to fetch loans\" });\n    }\n  });\n\n  app.post('/api/loans', isAuthenticated, async (req: any, res) => {\n    try {\n      const userRole = req.userRole;\n      \n      // Check permissions - only admin, field staff, or group leaders can submit loans\n      if (userRole === 'admin' || userRole === 'field_monitor' || userRole === 'field_attendant') {\n        // Field staff can submit\n      } else {\n        // For members, only chairman, secretary, finance can submit\n        const memberSession = req.session.memberSession;\n        if (!memberSession?.member || !['chairman', 'secretary', 'finance'].includes(memberSession.member.groupRole)) {\n          return res.status(403).json({ message: \"Only group leaders can submit loans\" });\n        }\n      }\n      \n      // Debug: Log the received request body\n      console.log('=== LOAN SUBMISSION DEBUG ===');\n      console.log('Received loan data:', JSON.stringify(req.body, null, 2));\n      \n      try {\n        const loanData = insertLoanSchema.parse(req.body);\n        console.log('Parsed loan data successfully:', loanData);\n      } catch (validationError) {\n        console.error('Validation failed:', validationError);\n        return res.status(400).json({ \n          message: \"Invalid loan data\", \n          errors: validationError.errors \n        });\n      }\n      \n      const loanData = insertLoanSchema.parse(req.body);\n      \n      // Get group info to calculate interest\n      const group = await storage.getGroup(loanData.groupId);\n      if (!group) {\n        return res.status(404).json({ message: \"Group not found\" });\n      }\n      \n      // Calculate interest amount and total repayment\n      const principal = parseFloat(loanData.amount);\n      const monthlyInterestRate = parseFloat(group.interestRate || '0') / 100; // Convert percentage\n      const months = loanData.termMonths;\n      \n      // Calculate total interest for the loan period\n      const totalInterest = principal * monthlyInterestRate * months;\n      const totalRepayment = principal + totalInterest;\n      const monthlyPayment = totalRepayment / months;\n      \n      // Create loan with valid schema fields only\n      const loanWithCalculations = {\n        ...loanData,\n        status: 'approved' as const // Auto-approve loans submitted by leadership\n      };\n      \n      const loan = await storage.createLoan(loanWithCalculations);\n      \n      // Update member's current loan amount when loan is approved\n      // Set the full amount due (principal + interest) from day 1\n      const member = await storage.getMember(loan.memberId);\n      if (member) {\n        const currentLoan = parseFloat(member.currentLoan) + totalRepayment; // Full amount due immediately\n        await storage.updateMember(loan.memberId, {\n          currentLoan: currentLoan.toString()\n        });\n      }\n      \n      // Create loan transaction record\n      await storage.createTransaction({\n        groupId: loanData.groupId,\n        memberId: loanData.memberId,\n        type: 'loan_disbursement',\n        amount: loanData.amount, // Only principal amount is disbursed from cash box\n        description: `Loan disbursement - ${loanData.purpose} (Total due: ${totalRepayment.toFixed(2)})`,\n        createdBy: '78d710c9-48fb-4e3b-8caa-d9f14fc7a57e' // Use system admin user ID\n      });\n      \n      // Update cash in box (loan disbursement reduces cash)\n      await storage.createCashboxEntry({\n        groupId: loanData.groupId,\n        amount: loanData.amount,\n        transactionType: 'withdrawal',\n        description: `Loan disbursement to member`,\n        recordedBy: '78d710c9-48fb-4e3b-8caa-d9f14fc7a57e'\n      });\n      \n      res.json(loan);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid loan data\", errors: error.errors });\n      } else {\n        console.error(\"Error creating loan:\", error);\n        res.status(500).json({ message: \"Failed to create loan\" });\n      }\n    }\n  });\n\n  app.put('/api/loans/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const updates = {\n        ...req.body,\n        approvedBy: req.userId\n      };\n      const loan = await storage.updateLoan(req.params.id, updates);\n      if (!loan) {\n        return res.status(404).json({ message: \"Loan not found\" });\n      }\n      res.json(loan);\n    } catch (error) {\n      console.error(\"Error updating loan:\", error);\n      res.status(500).json({ message: \"Failed to update loan\" });\n    }\n  });\n\n  // Meeting routes\n  app.get('/api/meetings', isAuthenticated, async (req, res) => {\n    try {\n      const groupId = req.query.groupId as string;\n      const meetings = await storage.getMeetings(groupId);\n      res.json(meetings);\n    } catch (error) {\n      console.error(\"Error fetching meetings:\", error);\n      res.status(500).json({ message: \"Failed to fetch meetings\" });\n    }\n  });\n\n  app.post('/api/meetings', isAuthenticated, async (req: any, res) => {\n    try {\n      const meetingData = insertMeetingSchema.parse({\n        ...req.body,\n        date: new Date(req.body.date), // Convert ISO string back to Date object\n        createdBy: req.userId\n      });\n      const meeting = await storage.createMeeting(meetingData);\n      res.json(meeting);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid meeting data\", errors: error.errors });\n      } else {\n        console.error(\"Error creating meeting:\", error);\n        res.status(500).json({ message: \"Failed to create meeting\" });\n      }\n    }\n  });\n\n  app.put('/api/meetings/:id', isAuthenticated, async (req, res) => {\n    try {\n      const updates = insertMeetingSchema.partial().parse(req.body);\n      const meeting = await storage.updateMeeting(req.params.id, updates);\n      if (!meeting) {\n        return res.status(404).json({ message: \"Meeting not found\" });\n      }\n      res.json(meeting);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid meeting data\", errors: error.errors });\n      } else {\n        console.error(\"Error updating meeting:\", error);\n        res.status(500).json({ message: \"Failed to update meeting\" });\n      }\n    }\n  });\n\n  // Reporting endpoints\n  app.get(\"/api/reports/:type\", isAuthenticated, async (req, res) => {\n    try {\n      const { type } = req.params;\n      const { groupId, location, gender, dateFrom, dateTo } = req.query;\n      \n      let reportData = [];\n      \n      switch (type) {\n        case 'groups':\n          reportData = await storage.getGroupReport(\n            groupId !== 'all' ? groupId as string : undefined,\n            location as string || undefined,\n            dateFrom ? new Date(dateFrom as string) : undefined,\n            dateTo ? new Date(dateTo as string) : undefined\n          );\n          break;\n        case 'members':\n          reportData = await storage.getMemberReport(\n            groupId !== 'all' ? groupId as string : undefined,\n            gender !== 'all' ? gender as string : undefined,\n            dateFrom ? new Date(dateFrom as string) : undefined,\n            dateTo ? new Date(dateTo as string) : undefined\n          );\n          break;\n        case 'financial':\n          reportData = await storage.getFinancialReport(\n            groupId !== 'all' ? groupId as string : undefined,\n            dateFrom ? new Date(dateFrom as string) : undefined,\n            dateTo ? new Date(dateTo as string) : undefined\n          );\n          break;\n        default:\n          return res.status(400).json({ error: \"Invalid report type\" });\n      }\n      \n      res.json(reportData);\n    } catch (error) {\n      console.error(\"Error fetching report data:\", error);\n      res.status(500).json({ error: \"Failed to fetch report data\" });\n    }\n  });\n\n  // Cashbox endpoints\n  app.post(\"/api/cashbox\", isAuthenticated, async (req: any, res) => {\n    try {\n      const validatedData = insertCashboxSchema.parse({\n        ...req.body,\n        recordedBy: req.userId\n      });\n      const entry = await storage.createCashboxEntry(validatedData);\n      res.status(201).json(entry);\n    } catch (error) {\n      console.error(\"Error creating cashbox entry:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create cashbox entry\" });\n      }\n    }\n  });\n\n  app.get(\"/api/cashbox/:groupId\", isAuthenticated, async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      const entries = await storage.getCashboxEntries(groupId);\n      res.json(entries);\n    } catch (error) {\n      console.error(\"Error fetching cashbox entries:\", error);\n      res.status(500).json({ error: \"Failed to fetch cashbox entries\" });\n    }\n  });\n\n  app.get(\"/api/cashbox/:groupId/balance\", isAuthenticated, async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      const balance = await storage.getCashboxBalance(groupId);\n      res.json({ balance });\n    } catch (error) {\n      console.error(\"Error fetching cashbox balance:\", error);\n      res.status(500).json({ error: \"Failed to fetch cashbox balance\" });\n    }\n  });\n\n  // Enhanced Transaction Endpoints for Member Dashboard\n  \n  // Submit savings and welfare by leadership roles\n  app.post('/api/transactions/submit-savings', isAuthenticated, async (req: any, res) => {\n    try {\n      const { groupId, memberId, savingsAmount, welfareAmount, submittedBy } = req.body;\n      \n      if (!groupId || !memberId || savingsAmount < 0 || welfareAmount < 0) {\n        return res.status(400).json({ message: \"Invalid submission data\" });\n      }\n\n      // Create savings transaction\n      if (savingsAmount > 0) {\n        await storage.createTransaction({\n          groupId,\n          memberId,\n          type: 'deposit',\n          amount: savingsAmount.toString(),\n          description: `Savings deposit submitted by ${submittedBy}`,\n          createdBy: '78d710c9-48fb-4e3b-8caa-d9f14fc7a57e' // Use system admin user ID for member transactions\n        });\n        \n        // Update member's savings balance\n        const member = await storage.getMember(memberId);\n        if (member) {\n          await storage.updateMember(memberId, {\n            savingsBalance: (parseFloat(member.savingsBalance) + savingsAmount).toString(),\n            totalShares: member.totalShares + Math.floor(savingsAmount / 1000) // Assuming 1000 UGX per share\n          });\n        }\n      }\n\n      // Create welfare transaction\n      if (welfareAmount > 0) {\n        await storage.createTransaction({\n          groupId,\n          memberId,\n          type: 'welfare_payment',\n          amount: welfareAmount.toString(),\n          description: `Welfare payment submitted by ${submittedBy}`,\n          createdBy: '78d710c9-48fb-4e3b-8caa-d9f14fc7a57e' // Use system admin user ID for member transactions\n        });\n\n        // Update member's welfare balance\n        const member = await storage.getMember(memberId);\n        if (member) {\n          await storage.updateMember(memberId, {\n            welfareBalance: (parseFloat(member.welfareBalance) + welfareAmount).toString()\n          });\n        }\n      }\n\n      // Update cash in box\n      if (savingsAmount > 0 || welfareAmount > 0) {\n        await storage.createCashboxEntry({\n          groupId,\n          amount: (savingsAmount + welfareAmount).toString(),\n          transactionType: 'deposit',\n          description: `Savings and welfare deposits submitted by ${submittedBy}`,\n          recordedBy: '78d710c9-48fb-4e3b-8caa-d9f14fc7a57e' // Use system admin user ID\n        });\n      }\n\n      res.json({ message: \"Savings and welfare submitted successfully\" });\n    } catch (error) {\n      console.error(\"Error submitting savings:\", error);\n      res.status(500).json({ message: \"Failed to submit savings and welfare\" });\n    }\n  });\n\n  // Process loan payment by leadership roles\n  app.post('/api/transactions/loan-payment', isAuthenticated, async (req: any, res) => {\n    try {\n      const { groupId, memberId, amount, processedBy } = req.body;\n      \n      if (!groupId || !memberId || amount <= 0) {\n        return res.status(400).json({ message: \"Invalid payment data\" });\n      }\n\n      const member = await storage.getMember(memberId);\n      if (!member) {\n        return res.status(404).json({ message: \"Member not found\" });\n      }\n\n      const currentLoan = parseFloat(member.currentLoan);\n      if (currentLoan <= 0) {\n        return res.status(400).json({ message: \"Member has no outstanding loan\" });\n      }\n\n      const paymentAmount = Math.min(amount, currentLoan);\n      const newLoanBalance = currentLoan - paymentAmount;\n\n      // Create loan payment transaction with proper audit trail\n      const processingUserId = req.userId || (req.session as any)?.userId;\n      console.log('Processing loan payment with userId:', processingUserId, 'req.userId:', req.userId, 'session.userId:', (req.session as any)?.userId);\n      \n      if (!processingUserId) {\n        return res.status(401).json({ message: \"No user ID available for audit trail\" });\n      }\n      \n      await storage.createTransaction({\n        groupId,\n        memberId,\n        type: 'loan_payment',\n        amount: paymentAmount.toString(),\n        description: `Loan payment processed by ${processedBy}`,\n        createdBy: processingUserId\n      });\n\n      // Update member's loan balance\n      await storage.updateMember(memberId, {\n        currentLoan: newLoanBalance.toString()\n      });\n\n      // Add to cash in box\n      await storage.createCashboxEntry({\n        groupId,\n        amount: paymentAmount.toString(),\n        transactionType: 'deposit',\n        description: `Loan payment from ${member.firstName} ${member.lastName}`,\n        recordedBy: processingUserId\n      });\n\n      // Fetch updated member data to return fresh information\n      const updatedMember = await storage.getMember(memberId);\n      const updatedGroupStats = await storage.getGroupStats(groupId);\n      \n      res.json({ \n        message: \"Loan payment processed successfully\",\n        remainingBalance: newLoanBalance,\n        paymentAmount: paymentAmount,\n        updatedMember,\n        updatedGroupStats\n      });\n    } catch (error) {\n      console.error(\"Error processing loan payment:\", error);\n      res.status(500).json({ message: \"Failed to process loan payment\" });\n    }\n  });\n\n  // Get all members for a group (with optional role filtering)\n  app.get('/api/groups/:id/members', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { role } = req.query;\n      \n      \n      let members = await storage.getGroupMembers(id);\n      \n      \n      // Filter by role if specified\n      if (role && typeof role === 'string') {\n        members = members.filter(member => member.groupRole === role);\n      }\n      \n      res.json(members);\n    } catch (error) {\n      console.error(\"Error fetching group members:\", error);\n      res.status(500).json({ message: \"Failed to fetch group members\" });\n    }\n  });\n\n  // Get members with active loans for a group\n  app.get('/api/groups/:id/members-with-loans', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const members = await storage.getGroupMembers(id);\n      const membersWithLoans = members.filter(member => parseFloat(member.currentLoan) > 0);\n      res.json(membersWithLoans);\n    } catch (error) {\n      console.error(\"Error fetching members with loans:\", error);\n      res.status(500).json({ message: \"Failed to fetch members with loans\" });\n    }\n  });\n\n  // Get transaction history for a group (leadership view)\n  app.get('/api/groups/:id/transaction-history', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const transactions = await storage.getGroupTransactions(id);\n      \n      // Enrich with member names\n      const enrichedTransactions = await Promise.all(\n        transactions.map(async (transaction) => {\n          const member = await storage.getMember(transaction.memberId);\n          return {\n            ...transaction,\n            memberName: member ? `${member.firstName} ${member.lastName}` : 'Unknown Member'\n          };\n        })\n      );\n\n      res.json(enrichedTransactions);\n    } catch (error) {\n      console.error(\"Error fetching group transaction history:\", error);\n      res.status(500).json({ message: \"Failed to fetch transaction history\" });\n    }\n  });\n\n  // Get transaction history for a specific member\n  app.get('/api/members/:id/transaction-history', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const transactions = await storage.getMemberTransactions(id);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching member transaction history:\", error);\n      res.status(500).json({ message: \"Failed to fetch member transaction history\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":46514},"server/storage.ts":{"content":"import {\n  users,\n  groups,\n  members,\n  transactions,\n  loans,\n  meetings,\n  cashbox,\n  type User,\n  type UpsertUser,\n  type InsertUser,\n  type Group,\n  type InsertGroup,\n  type Member,\n  type InsertMember,\n  type Transaction,\n  type InsertTransaction,\n  type Loan,\n  type InsertLoan,\n  type Meeting,\n  type InsertMeeting,\n  type Cashbox,\n  type InsertCashbox,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, count, sum, gte, lte, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUsers(): Promise<User[]>;\n  getUserByPhoneOrUserId(phoneOrUserId: string): Promise<User | undefined>;\n  getUserByUserIdAndPhone(userId: string, phone: string): Promise<User | undefined>;\n  getUserByBarcodeData(barcodeData: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Group operations\n  createGroup(group: InsertGroup): Promise<Group>;\n  getGroups(): Promise<Group[]>;\n  getGroup(id: string): Promise<Group | undefined>;\n  getGroupsByIds(ids: string[]): Promise<Group[]>;\n  getGroupsByCreator(creatorId: string): Promise<Group[]>;\n  updateGroup(id: string, updates: Partial<Group>): Promise<Group | undefined>;\n  deleteGroup(id: string): Promise<boolean>;\n\n  // Member operations\n  createMember(member: InsertMember): Promise<Member>;\n  getMembers(groupId?: string): Promise<Member[]>;\n  getMember(id: string): Promise<Member | undefined>;\n  getMembersByGroupIds(groupIds: string[]): Promise<Member[]>;\n  updateMember(id: string, updates: Partial<Member>): Promise<Member | undefined>;\n  deleteMember(id: string): Promise<boolean>;\n\n  // Transaction operations\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getTransactions(groupId?: string, memberId?: string): Promise<Transaction[]>;\n  getTransaction(id: string): Promise<Transaction | undefined>;\n\n  // Loan operations\n  createLoan(loan: InsertLoan): Promise<Loan>;\n  getLoans(groupId?: string, memberId?: string): Promise<Loan[]>;\n  getLoan(id: string): Promise<Loan | undefined>;\n  updateLoan(id: string, updates: Partial<Loan>): Promise<Loan | undefined>;\n\n  // Meeting operations\n  createMeeting(meeting: InsertMeeting): Promise<Meeting>;\n  getMeetings(groupId?: string): Promise<Meeting[]>;\n  getMeeting(id: string): Promise<Meeting | undefined>;\n  updateMeeting(id: string, updates: Partial<Meeting>): Promise<Meeting | undefined>;\n\n  // Cashbox operations\n  createCashboxEntry(entry: InsertCashbox): Promise<Cashbox>;\n  getCashboxBalance(groupId: string): Promise<number>;\n  getCashboxEntries(groupId: string): Promise<Cashbox[]>;\n\n  // Additional member operations\n  getMemberByPhone(phone: string): Promise<Member | undefined>;\n  getGroupMembers(groupId: string): Promise<Member[]>;\n  updateMemberShares(id: string, shares: number): Promise<void>;\n\n  // Enhanced transaction operations\n  getGroupTransactions(groupId: string): Promise<Transaction[]>;\n  getMemberTransactions(memberId: string): Promise<Transaction[]>;\n  getGroupStats(groupId: string): Promise<any>;\n\n  // Dashboard statistics\n  getDashboardStats(): Promise<{\n    totalGroups: number;\n    totalMembers: number;\n    maleMembers: number;\n    femaleMembers: number;\n    totalSavings: number;\n    totalCashInBox: number;\n    activeLoans: number;\n    totalLoansGiven: number;\n    totalInterest: number;\n  }>;\n\n  // Reporting\n  getGroupReport(groupId?: string, location?: string, dateFrom?: Date, dateTo?: Date): Promise<any[]>;\n  getMemberReport(groupId?: string, gender?: string, dateFrom?: Date, dateTo?: Date): Promise<any[]>;\n  getFinancialReport(groupId?: string, dateFrom?: Date, dateTo?: Date): Promise<any[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUserIdAndPhone(userId: string, phone: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users)\n      .where(and(eq(users.userId, userId), eq(users.phone, phone)));\n    return user;\n  }\n\n  async getUserByPhoneOrUserId(phoneOrUserId: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(\n        phoneOrUserId.startsWith('TD') \n          ? eq(users.userId, phoneOrUserId)\n          : eq(users.phone, phoneOrUserId)\n      );\n    return user;\n  }\n\n  async getUserByBarcodeData(barcodeData: string): Promise<User | undefined> {\n    // Assuming barcode contains userId - you can modify this logic based on your barcode format\n    // The barcode could contain userId, phone, or other identifier\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(\n        barcodeData.startsWith('TD') \n          ? eq(users.userId, barcodeData)\n          : eq(users.phone, barcodeData)\n      );\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Group operations\n  async createGroup(group: InsertGroup): Promise<Group> {\n    const [newGroup] = await db.insert(groups).values(group).returning();\n    return newGroup;\n  }\n\n  async getGroups(): Promise<Group[]> {\n    return await db.select().from(groups).orderBy(desc(groups.createdAt));\n  }\n\n  async getGroupsByIds(ids: string[]): Promise<Group[]> {\n    if (ids.length === 0) return [];\n    return await db.select().from(groups).where(sql`${groups.id} = ANY(${ids})`).orderBy(desc(groups.createdAt));\n  }\n\n  async getGroupsByCreator(creatorId: string): Promise<Group[]> {\n    return await db.select().from(groups).where(eq(groups.createdBy, creatorId)).orderBy(desc(groups.createdAt));\n  }\n\n  async getGroup(id: string): Promise<Group | undefined> {\n    const [group] = await db.select().from(groups).where(eq(groups.id, id));\n    return group;\n  }\n\n  async updateGroup(id: string, updates: Partial<Group>): Promise<Group | undefined> {\n    const [updatedGroup] = await db\n      .update(groups)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(groups.id, id))\n      .returning();\n    return updatedGroup;\n  }\n\n  async deleteGroup(id: string): Promise<boolean> {\n    try {\n      // First, delete all members in this group\n      await db.delete(members).where(eq(members.groupId, id));\n      \n      // Delete all transactions for this group\n      await db.delete(transactions).where(eq(transactions.groupId, id));\n      \n      // Delete all loans for this group\n      await db.delete(loans).where(eq(loans.groupId, id));\n      \n      // Delete all meetings for this group\n      await db.delete(meetings).where(eq(meetings.groupId, id));\n      \n      // Delete all cashbox entries for this group\n      await db.delete(cashbox).where(eq(cashbox.groupId, id));\n      \n      // Finally, delete the group itself\n      const result = await db.delete(groups).where(eq(groups.id, id));\n      return (result.rowCount ?? 0) > 0;\n    } catch (error) {\n      console.error('Error deleting group:', error);\n      throw error;\n    }\n  }\n\n  // Member operations\n  async createMember(member: InsertMember): Promise<Member> {\n    const [newMember] = await db.insert(members).values(member).returning();\n    return newMember;\n  }\n\n  async getMembers(groupId?: string): Promise<Member[]> {\n    if (groupId) {\n      return await db\n        .select()\n        .from(members)\n        .where(eq(members.groupId, groupId))\n        .orderBy(desc(members.createdAt));\n    }\n    return await db.select().from(members).orderBy(desc(members.createdAt));\n  }\n\n  async getMember(id: string): Promise<Member | undefined> {\n    const [member] = await db.select().from(members).where(eq(members.id, id));\n    return member;\n  }\n\n  async getMemberByPhone(phone: string): Promise<Member | undefined> {\n    const [member] = await db.select().from(members).where(eq(members.phone, phone));\n    return member;\n  }\n\n  async getMembersByGroupIds(groupIds: string[]): Promise<Member[]> {\n    if (groupIds.length === 0) return [];\n    return await db.select().from(members).where(sql`${members.groupId} = ANY(${groupIds})`).orderBy(desc(members.createdAt));\n  }\n\n  async updateMember(id: string, updates: Partial<Member>): Promise<Member | undefined> {\n    const [updatedMember] = await db\n      .update(members)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(members.id, id))\n      .returning();\n    return updatedMember;\n  }\n\n  async deleteMember(id: string): Promise<boolean> {\n    const result = await db.delete(members).where(eq(members.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Transaction operations\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const [newTransaction] = await db.insert(transactions).values(transaction).returning();\n    \n    // Update member's savings balance and shares\n    const member = await this.getMember(transaction.memberId);\n    if (member) {\n      const group = await this.getGroup(member.groupId);\n      let newBalance = parseFloat(member.savingsBalance);\n      let newShares = member.totalShares;\n      \n      if (transaction.type === 'deposit') {\n        newBalance += parseFloat(transaction.amount);\n        // Calculate shares based on group's saving per share value\n        if (group && group.savingPerShare) {\n          const shareValue = parseFloat(group.savingPerShare);\n          newShares = Math.floor(newBalance / shareValue);\n        }\n      } else if (transaction.type === 'withdrawal') {\n        newBalance -= parseFloat(transaction.amount);\n        // Recalculate shares after withdrawal\n        if (group && group.savingPerShare) {\n          const shareValue = parseFloat(group.savingPerShare);\n          newShares = Math.floor(newBalance / shareValue);\n        }\n      }\n      \n      await this.updateMember(transaction.memberId, { \n        savingsBalance: newBalance.toFixed(2),\n        totalShares: newShares\n      });\n    }\n\n    return newTransaction;\n  }\n\n  async getTransactions(groupId?: string, memberId?: string): Promise<Transaction[]> {\n    if (groupId && memberId) {\n      return await db\n        .select()\n        .from(transactions)\n        .where(and(eq(transactions.groupId, groupId), eq(transactions.memberId, memberId)))\n        .orderBy(desc(transactions.transactionDate));\n    } else if (groupId) {\n      return await db\n        .select()\n        .from(transactions)\n        .where(eq(transactions.groupId, groupId))\n        .orderBy(desc(transactions.transactionDate));\n    } else if (memberId) {\n      return await db\n        .select()\n        .from(transactions)\n        .where(eq(transactions.memberId, memberId))\n        .orderBy(desc(transactions.transactionDate));\n    }\n    \n    return await db.select().from(transactions).orderBy(desc(transactions.transactionDate));\n  }\n\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    const [transaction] = await db.select().from(transactions).where(eq(transactions.id, id));\n    return transaction;\n  }\n\n  // Loan operations\n  async createLoan(loan: InsertLoan): Promise<Loan> {\n    const [newLoan] = await db.insert(loans).values({\n      ...loan,\n      remainingBalance: loan.amount,\n    }).returning();\n    \n    // If the loan is approved, update the member's currentLoan field\n    if (newLoan.status === 'approved') {\n      const currentMember = await this.getMember(newLoan.memberId);\n      if (currentMember) {\n        const currentLoanAmount = parseFloat(currentMember.currentLoan);\n        const newLoanAmount = parseFloat(newLoan.amount);\n        const updatedLoanAmount = currentLoanAmount + newLoanAmount;\n        \n        await this.updateMember(newLoan.memberId, {\n          currentLoan: updatedLoanAmount.toFixed(2)\n        });\n      }\n    }\n    \n    return newLoan;\n  }\n\n  async getLoans(groupId?: string, memberId?: string): Promise<Loan[]> {\n    if (groupId && memberId) {\n      return await db\n        .select()\n        .from(loans)\n        .where(and(eq(loans.groupId, groupId), eq(loans.memberId, memberId)))\n        .orderBy(desc(loans.applicationDate));\n    } else if (groupId) {\n      return await db\n        .select()\n        .from(loans)\n        .where(eq(loans.groupId, groupId))\n        .orderBy(desc(loans.applicationDate));\n    } else if (memberId) {\n      return await db\n        .select()\n        .from(loans)\n        .where(eq(loans.memberId, memberId))\n        .orderBy(desc(loans.applicationDate));\n    }\n    \n    return await db.select().from(loans).orderBy(desc(loans.applicationDate));\n  }\n\n  async getLoan(id: string): Promise<Loan | undefined> {\n    const [loan] = await db.select().from(loans).where(eq(loans.id, id));\n    return loan;\n  }\n\n  async updateLoan(id: string, updates: Partial<Loan>): Promise<Loan | undefined> {\n    const [updatedLoan] = await db\n      .update(loans)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(loans.id, id))\n      .returning();\n    return updatedLoan;\n  }\n\n  // Meeting operations\n  async createMeeting(meeting: InsertMeeting): Promise<Meeting> {\n    const [newMeeting] = await db.insert(meetings).values(meeting).returning();\n    return newMeeting;\n  }\n\n  async getMeetings(groupId?: string): Promise<Meeting[]> {\n    if (groupId) {\n      return await db\n        .select()\n        .from(meetings)\n        .where(eq(meetings.groupId, groupId))\n        .orderBy(desc(meetings.date));\n    }\n    return await db.select().from(meetings).orderBy(desc(meetings.date));\n  }\n\n  async getMeeting(id: string): Promise<Meeting | undefined> {\n    const [meeting] = await db.select().from(meetings).where(eq(meetings.id, id));\n    return meeting;\n  }\n\n  async updateMeeting(id: string, updates: Partial<Meeting>): Promise<Meeting | undefined> {\n    const [updatedMeeting] = await db\n      .update(meetings)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(meetings.id, id))\n      .returning();\n    return updatedMeeting;\n  }\n\n  // Cashbox operations\n  async createCashboxEntry(entry: InsertCashbox): Promise<Cashbox> {\n    const [newEntry] = await db.insert(cashbox).values(entry).returning();\n    \n    // Note: availableCash will be calculated dynamically, no need to update here\n    return newEntry;\n  }\n\n  async getCashboxBalance(groupId: string): Promise<number> {\n    const entries = await db.select().from(cashbox).where(eq(cashbox.groupId, groupId));\n    return entries.reduce((balance, entry) => {\n      const amount = parseFloat(entry.amount);\n      return entry.transactionType === 'deposit' ? balance + amount : balance - amount;\n    }, 0);\n  }\n\n  async getCashboxEntries(groupId: string): Promise<Cashbox[]> {\n    return await db.select().from(cashbox)\n      .where(eq(cashbox.groupId, groupId))\n      .orderBy(desc(cashbox.recordedAt));\n  }\n\n  // Group-specific statistics for members\n  async getGroupStats(groupId: string): Promise<{\n    totalMembers: number;\n    totalSavings: number;\n    totalWelfare: number;\n    totalShares: number;\n    shareValue: number;\n    totalCashInBox: number;\n    totalLoansOutstanding: number;\n    groupWelfareAmount: number;\n    interestRate: number;\n    totalInterest: number;\n    totalOriginalLoans: number;\n  }> {\n    const group = await this.getGroup(groupId);\n    if (!group) throw new Error('Group not found');\n    \n\n    const [memberCount] = await db.select({ count: count() }).from(members)\n      .where(and(eq(members.groupId, groupId), eq(members.isActive, true)));\n    \n    const [savingsSum] = await db.select({ sum: sum(members.savingsBalance) }).from(members)\n      .where(and(eq(members.groupId, groupId), eq(members.isActive, true)));\n    \n    const [welfareSum] = await db.select({ sum: sum(members.welfareBalance) }).from(members)\n      .where(and(eq(members.groupId, groupId), eq(members.isActive, true)));\n    \n    const [sharesSum] = await db.select({ sum: sum(members.totalShares) }).from(members)\n      .where(and(eq(members.groupId, groupId), eq(members.isActive, true)));\n    \n    const [loansSum] = await db.select({ sum: sum(members.currentLoan) }).from(members)\n      .where(and(eq(members.groupId, groupId), eq(members.isActive, true)));\n\n    const totalSavings = parseFloat(savingsSum.sum || '0');\n    const totalLoansOutstanding = parseFloat(loansSum.sum || '0');\n    const shareValue = parseFloat(group.savingPerShare || '0');\n    const interestRate = parseFloat(group.interestRate || '0');\n    \n    \n    // Calculate total original loans and total interest for this group\n    // Since currentLoan = originalLoan + interest, we need to separate them\n    // For now, we'll calculate based on the interest rate\n    const totalOriginalLoans = totalLoansOutstanding / (1 + (interestRate / 100));\n    const totalInterest = totalLoansOutstanding - totalOriginalLoans;\n    \n    return {\n      totalMembers: memberCount.count,\n      totalSavings,\n      totalWelfare: parseFloat(welfareSum.sum || '0'),\n      totalShares: parseInt(sharesSum.sum || '0'),\n      shareValue,\n      totalCashInBox: totalSavings - totalOriginalLoans, // Use original loan amount for cash calculation\n      totalLoansOutstanding,\n      groupWelfareAmount: parseFloat(group.welfareAmount || '0'),\n      interestRate,\n      totalInterest,\n      totalOriginalLoans,\n    };\n  }\n\n  // Update member shares and recalculate savings\n  async updateMemberShares(memberId: string, newShares: number): Promise<void> {\n    const member = await this.getMember(memberId);\n    if (!member) throw new Error('Member not found');\n    \n    const group = await this.getGroup(member.groupId);\n    if (!group) throw new Error('Group not found');\n    \n    const shareValue = parseFloat(group.savingPerShare || '0');\n    const newSavingsBalance = (newShares * shareValue).toString();\n    \n    await db.update(members)\n      .set({ \n        totalShares: newShares,\n        savingsBalance: newSavingsBalance,\n        updatedAt: new Date()\n      })\n      .where(eq(members.id, memberId));\n  }\n\n  // Enhanced member and transaction methods for dashboard\n  async getGroupMembers(groupId: string): Promise<Member[]> {\n    return await db.select().from(members).where(eq(members.groupId, groupId));\n  }\n\n  async getGroupTransactions(groupId: string): Promise<Transaction[]> {\n    return await this.getTransactions(groupId);\n  }\n\n  async getMemberTransactions(memberId: string): Promise<Transaction[]> {\n    return await this.getTransactions(undefined, memberId);\n  }\n\n\n  // Dashboard statistics\n  async getDashboardStats(): Promise<{\n    totalGroups: number;\n    totalMembers: number;\n    maleMembers: number;\n    femaleMembers: number;\n    totalSavings: number;\n    totalWelfare: number;\n    totalCashInBox: number;\n    activeLoans: number;\n    totalLoansGiven: number;\n    totalInterest: number;\n  }> {\n    try {\n      // Simple approach to avoid aggregate function issues\n      const allGroups = await db.select().from(groups).where(eq(groups.isActive, true));\n      const allMembers = await db.select().from(members).where(eq(members.isActive, true));\n      const allLoans = await db.select().from(loans);\n      \n      const totalGroups = allGroups.length;\n      const totalMembers = allMembers.length;\n      const maleMembers = allMembers.filter(m => m.gender === 'M').length;\n      const femaleMembers = allMembers.filter(m => m.gender === 'F').length;\n      \n      const totalSavings = allMembers.reduce((total, member) => {\n        return total + parseFloat(member.savingsBalance || '0');\n      }, 0);\n      \n      const totalWelfare = allMembers.reduce((total, member) => {\n        return total + parseFloat(member.welfareBalance || '0');\n      }, 0);\n      \n      const totalCurrentLoans = allMembers.reduce((total, member) => {\n        const loanAmount = parseFloat(member.currentLoan || '0');\n        return total + loanAmount;\n      }, 0);\n      \n      const totalCashInBox = totalSavings - totalCurrentLoans;\n      \n      const activeLoans = allLoans.filter(loan => loan.status === 'active' || loan.status === 'approved').length;\n      const totalLoansGiven = totalCurrentLoans;\n      \n      // Calculate actual interest earned from loan payments\n      // Get all loan-related transactions\n      const allTransactions = await db.select().from(transactions);\n      const loanPayments = allTransactions.filter(t => t.type === 'loan_payment');\n      const loanDisbursements = allTransactions.filter(t => t.type === 'loan_disbursement');\n      \n      const totalPayments = loanPayments.reduce((sum, t) => sum + parseFloat(t.amount), 0);\n      const totalDisbursed = loanDisbursements.reduce((sum, t) => sum + parseFloat(t.amount), 0);\n      \n      // Interest is the difference between what was paid back and what was disbursed\n      const totalInterest = totalPayments - totalDisbursed;\n\n      return {\n        totalGroups,\n        totalMembers,\n        maleMembers,\n        femaleMembers,\n        totalSavings,\n        totalWelfare,\n        totalCashInBox,\n        activeLoans,\n        totalLoansGiven,\n        totalInterest,\n      };\n    } catch (error) {\n      console.error(\"Error in getDashboardStats:\", error);\n      // Return default values if there's an error\n      return {\n        totalGroups: 0,\n        totalMembers: 0,\n        maleMembers: 0,\n        femaleMembers: 0,\n        totalSavings: 0,\n        totalWelfare: 0,\n        totalCashInBox: 0,\n        activeLoans: 0,\n        totalLoansGiven: 0,\n        totalInterest: 0,\n      };\n    }\n  }\n\n  // Reporting methods\n  async getGroupReport(groupId?: string, location?: string, dateFrom?: Date, dateTo?: Date): Promise<any[]> {\n    let query = db.select({\n      id: groups.id,\n      name: groups.name,\n      location: groups.location,\n      registrationNumber: groups.registrationNumber,\n      memberCount: count(members.id),\n      totalSavings: sum(members.savingsBalance),\n      availableCash: groups.availableCash,\n      cycleMonths: groups.cycleMonths,\n      interestRate: groups.interestRate,\n      registrationDate: groups.registrationDate,\n    }).from(groups)\n      .leftJoin(members, eq(groups.id, members.groupId))\n      .where(eq(groups.isActive, true))\n      .groupBy(groups.id);\n\n    // Apply filters\n    let conditions = [eq(groups.isActive, true)];\n    if (groupId) conditions.push(eq(groups.id, groupId));\n    if (location) conditions.push(eq(groups.location, location));\n    if (dateFrom) conditions.push(gte(groups.registrationDate, dateFrom.toISOString().split('T')[0]));\n    if (dateTo) conditions.push(lte(groups.registrationDate, dateTo.toISOString().split('T')[0]));\n    \n    query = db.select({\n      id: groups.id,\n      name: groups.name,\n      location: groups.location,\n      registrationNumber: groups.registrationNumber,\n      memberCount: count(members.id),\n      totalSavings: sum(members.savingsBalance),\n      availableCash: groups.availableCash,\n      cycleMonths: groups.cycleMonths,\n      interestRate: groups.interestRate,\n      registrationDate: groups.registrationDate,\n    }).from(groups)\n      .leftJoin(members, eq(groups.id, members.groupId))\n      .where(and(...conditions))\n      .groupBy(groups.id);\n\n    return await query;\n  }\n\n  async getMemberReport(groupId?: string, gender?: string, dateFrom?: Date, dateTo?: Date): Promise<any[]> {\n    let query = db.select({\n      id: members.id,\n      firstName: members.firstName,\n      lastName: members.lastName,\n      gender: members.gender,\n      phone: members.phone,\n      groupName: groups.name,\n      groupLocation: groups.location,\n      savingsBalance: members.savingsBalance,\n      joinDate: members.joinDate,\n      isActive: members.isActive,\n    }).from(members)\n      .leftJoin(groups, eq(members.groupId, groups.id))\n      .where(eq(members.isActive, true));\n\n    // Apply filters\n    let memberConditions = [eq(members.isActive, true)];\n    if (groupId) memberConditions.push(eq(members.groupId, groupId));\n    if (gender) memberConditions.push(eq(members.gender, gender));\n    if (dateFrom) memberConditions.push(gte(members.joinDate, dateFrom.toISOString().split('T')[0]));\n    if (dateTo) memberConditions.push(lte(members.joinDate, dateTo.toISOString().split('T')[0]));\n    \n    query = db.select({\n      id: members.id,\n      firstName: members.firstName,\n      lastName: members.lastName,\n      gender: members.gender,\n      phone: members.phone,\n      groupName: groups.name,\n      groupLocation: groups.location,\n      savingsBalance: members.savingsBalance,\n      joinDate: members.joinDate,\n      isActive: members.isActive,\n    }).from(members)\n      .leftJoin(groups, eq(members.groupId, groups.id))\n      .where(and(...memberConditions));\n\n    return await query;\n  }\n\n  async getFinancialReport(groupId?: string, dateFrom?: Date, dateTo?: Date): Promise<any[]> {\n    let query = db.select({\n      groupId: transactions.groupId,\n      groupName: groups.name,\n      transactionType: transactions.type,\n      totalAmount: sum(transactions.amount),\n      transactionCount: count(transactions.id),\n    }).from(transactions)\n      .leftJoin(groups, eq(transactions.groupId, groups.id))\n      .groupBy(transactions.groupId, groups.name, transactions.type);\n\n    // Apply filters\n    let transactionConditions = [];\n    if (groupId) transactionConditions.push(eq(transactions.groupId, groupId));\n    if (dateFrom) transactionConditions.push(gte(transactions.transactionDate, dateFrom));\n    if (dateTo) transactionConditions.push(lte(transactions.transactionDate, dateTo));\n    \n    if (transactionConditions.length > 0) {\n      query = db.select({\n        groupId: transactions.groupId,\n        groupName: groups.name,\n        transactionType: transactions.type,\n        totalAmount: sum(transactions.amount),\n        transactionCount: count(transactions.id),\n      }).from(transactions)\n        .leftJoin(groups, eq(transactions.groupId, groups.id))\n        .where(and(...transactionConditions))\n        .groupBy(transactions.groupId, groups.name, transactions.type);\n    }\n\n    return await query;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":26871},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  integer,\n  boolean,\n  date,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from 'drizzle-orm';\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for WEKA authentication system\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\", { length: 8 }).unique().notNull(), // TDXXXXXX format\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  phone: varchar(\"phone\", { length: 20 }).unique().notNull(),\n  email: varchar(\"email\"),\n  pin: varchar(\"pin\", { length: 255 }).notNull(), // Hashed PIN\n  role: varchar(\"role\", { length: 20 }).notNull().default('field_attendant'), // admin, field_monitor, field_attendant\n  isActive: boolean(\"is_active\").notNull().default(true),\n  location: varchar(\"location\"),\n  assignedBy: varchar(\"assigned_by\").references(() => users.id), // Who created this user\n  assignedGroups: text(\"assigned_groups\").array(), // For field_monitor - groups they can access\n  profileImageUrl: varchar(\"profile_image_url\"),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// WEKA Groups with enhanced features\nexport const groups = pgTable(\"groups\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  location: varchar(\"location\", { length: 255 }).notNull(),\n  registrationNumber: varchar(\"registration_number\", { length: 100 }),\n  meetingFrequency: varchar(\"meeting_frequency\", { length: 20 }).notNull().default('monthly'),\n  maxMembers: integer(\"max_members\").notNull().default(30),\n  savingPerShare: decimal(\"saving_per_share\", { precision: 12, scale: 2 }).notNull().default('0.00'),\n  cycleMonths: integer(\"cycle_months\").notNull().default(12), // Number of months per cycle\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }).notNull().default('2.00'), // Group's loan interest rate\n  welfareAmount: decimal(\"welfare_amount\", { precision: 12, scale: 2 }).notNull().default('0.00'), // Agreed welfare amount per member\n  mainActivity: text(\"main_activity\"),\n  otherActivities: text(\"other_activities\"),\n  registrationDate: date(\"registration_date\").notNull(),\n  hasRunningBusiness: boolean(\"has_running_business\").notNull().default(false),\n  businessName: varchar(\"business_name\", { length: 255 }),\n  businessLocation: varchar(\"business_location\", { length: 255 }),\n  currentInput: text(\"current_input\"), // Funds, manpower, services etc\n  availableCash: decimal(\"available_cash\", { precision: 12, scale: 2 }).notNull().default('0.00'),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Group Members with gender tracking and group roles\nexport const members = pgTable(\"members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  groupId: varchar(\"group_id\").notNull().references(() => groups.id),\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  gender: varchar(\"gender\", { length: 10 }).notNull(), // M or F\n  groupRole: varchar(\"group_role\", { length: 20 }).notNull().default('member'), // ONLY: member, secretary, finance, chairman\n  email: varchar(\"email\", { length: 255 }),\n  phone: varchar(\"phone\", { length: 20 }),\n  address: text(\"address\"),\n  joinDate: date(\"join_date\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  totalShares: integer(\"total_shares\").notNull().default(0), // Number of shares owned\n  savingsBalance: decimal(\"savings_balance\", { precision: 12, scale: 2 }).notNull().default('0.00'), // Calculated from shares × share value\n  welfareBalance: decimal(\"welfare_balance\", { precision: 12, scale: 2 }).notNull().default('0.00'),\n  nextOfKin: varchar(\"next_of_kin\", { length: 255 }),\n  pin: varchar(\"pin\", { length: 4 }).notNull(),\n  currentLoan: decimal(\"current_loan\", { precision: 12, scale: 2 }).notNull().default('0.00'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Transactions\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  groupId: varchar(\"group_id\").notNull().references(() => groups.id),\n  memberId: varchar(\"member_id\").notNull().references(() => members.id),\n  type: varchar(\"type\", { length: 20 }).notNull(), // deposit, withdrawal, loan_payment, loan_disbursement, welfare_payment\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  transactionDate: timestamp(\"transaction_date\").notNull().defaultNow(),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id), // Tracks who processed this transaction\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Loans with compound interest tracking\nexport const loans = pgTable(\"loans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  groupId: varchar(\"group_id\").notNull().references(() => groups.id),\n  memberId: varchar(\"member_id\").notNull().references(() => members.id),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(), // Original borrowed amount\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }).notNull(), // percentage per month\n  termMonths: integer(\"term_months\").notNull(),\n  status: varchar(\"status\", { length: 20 }).notNull().default('pending'), // pending, approved, active, completed, defaulted\n  applicationDate: timestamp(\"application_date\").notNull().defaultNow(),\n  approvalDate: timestamp(\"approval_date\"),\n  disbursementDate: timestamp(\"disbursement_date\"),\n  dueDate: timestamp(\"due_date\"),\n  remainingBalance: decimal(\"remaining_balance\", { precision: 12, scale: 2 }), // Current balance with compound interest\n  totalAmountDue: decimal(\"total_amount_due\", { precision: 12, scale: 2 }), // Total amount with all compound interest\n  monthsOverdue: integer(\"months_overdue\").notNull().default(0), // Track months past due\n  lastInterestUpdate: timestamp(\"last_interest_update\"), // When interest was last compounded\n  purpose: text(\"purpose\"),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Meetings\nexport const meetings = pgTable(\"meetings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  groupId: varchar(\"group_id\").notNull().references(() => groups.id),\n  date: timestamp(\"date\").notNull(),\n  location: varchar(\"location\", { length: 255 }),\n  agenda: text(\"agenda\"),\n  minutes: text(\"minutes\"),\n  attendees: text(\"attendees\").array(), // Array of member IDs who attended\n  status: varchar(\"status\", { length: 20 }).notNull().default('scheduled'), // scheduled, completed, cancelled\n  notificationSent24h: boolean(\"notification_sent_24h\").notNull().default(false), // 24 hour reminder sent\n  notificationSentNow: boolean(\"notification_sent_now\").notNull().default(false), // Meeting time notification sent\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Meeting Attendance with payments\nexport const meetingAttendance = pgTable(\"meeting_attendance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  meetingId: varchar(\"meeting_id\").notNull().references(() => meetings.id),\n  memberId: varchar(\"member_id\").notNull().references(() => members.id),\n  isPresent: boolean(\"is_present\").notNull().default(false),\n  sharesPurchased: integer(\"shares_purchased\").notNull().default(0), // Shares bought this meeting\n  welfarePayment: decimal(\"welfare_payment\", { precision: 12, scale: 2 }).notNull().default('0.00'),\n  loanPayment: decimal(\"loan_payment\", { precision: 12, scale: 2 }).notNull().default('0.00'),\n  notes: text(\"notes\"),\n  recordedAt: timestamp(\"recorded_at\").notNull().defaultNow(),\n});\n\n// Cash box tracking\nexport const cashbox = pgTable(\"cashbox\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  groupId: varchar(\"group_id\").notNull().references(() => groups.id),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  transactionType: varchar(\"transaction_type\", { length: 20 }).notNull(), // deposit, withdrawal\n  description: text(\"description\"),\n  recordedBy: varchar(\"recorded_by\").notNull().references(() => users.id), // Tracks who recorded this entry\n  recordedAt: timestamp(\"recorded_at\").notNull().defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  assignedBy: one(users, {\n    fields: [users.assignedBy],\n    references: [users.id],\n  }),\n  assignedUsers: many(users),\n  createdGroups: many(groups),\n  createdTransactions: many(transactions),\n  approvedLoans: many(loans),\n  createdMeetings: many(meetings),\n}));\n\nexport const groupsRelations = relations(groups, ({ one, many }) => ({\n  creator: one(users, {\n    fields: [groups.createdBy],\n    references: [users.id],\n  }),\n  members: many(members),\n  transactions: many(transactions),\n  loans: many(loans),\n  meetings: many(meetings),\n  cashboxEntries: many(cashbox),\n}));\n\nexport const cashboxRelations = relations(cashbox, ({ one }) => ({\n  group: one(groups, {\n    fields: [cashbox.groupId],\n    references: [groups.id],\n  }),\n  recordedBy: one(users, {\n    fields: [cashbox.recordedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const membersRelations = relations(members, ({ one, many }) => ({\n  group: one(groups, {\n    fields: [members.groupId],\n    references: [groups.id],\n  }),\n  transactions: many(transactions),\n  loans: many(loans),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one }) => ({\n  group: one(groups, {\n    fields: [transactions.groupId],\n    references: [groups.id],\n  }),\n  member: one(members, {\n    fields: [transactions.memberId],\n    references: [members.id],\n  }),\n  createdBy: one(users, {\n    fields: [transactions.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const loansRelations = relations(loans, ({ one }) => ({\n  group: one(groups, {\n    fields: [loans.groupId],\n    references: [groups.id],\n  }),\n  member: one(members, {\n    fields: [loans.memberId],\n    references: [members.id],\n  }),\n  approvedBy: one(users, {\n    fields: [loans.approvedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const meetingsRelations = relations(meetings, ({ one }) => ({\n  group: one(groups, {\n    fields: [meetings.groupId],\n    references: [groups.id],\n  }),\n  createdBy: one(users, {\n    fields: [meetings.createdBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertGroupSchema = createInsertSchema(groups).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  availableCash: true,\n});\n\nexport const insertCashboxSchema = createInsertSchema(cashbox).omit({\n  id: true,\n  recordedAt: true,\n});\n\nexport const insertMemberSchema = createInsertSchema(members).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  phone: z.string().optional(),\n  email: z.string().optional(),\n  address: z.string().optional(),\n  nextOfKin: z.string().optional(),\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLoanSchema = createInsertSchema(loans).omit({\n  id: true,\n  applicationDate: true, // Has default value\n  approvalDate: true,\n  disbursementDate: true,\n  dueDate: true,\n  remainingBalance: true,\n  totalAmountDue: true,\n  monthsOverdue: true,\n  lastInterestUpdate: true,\n  approvedBy: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMeetingSchema = createInsertSchema(meetings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Insert schemas for new user system\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastLogin: true,\n});\n\n// Login schema\nexport const loginSchema = z.object({\n  phoneOrUserId: z.string().min(1, \"Phone number or User ID is required\"),\n  pin: z.string().length(6, \"PIN must be 6 digits\"),\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginCredentials = z.infer<typeof loginSchema>;\nexport type Group = typeof groups.$inferSelect;\nexport type InsertGroup = z.infer<typeof insertGroupSchema>;\nexport type Member = typeof members.$inferSelect;\nexport type InsertMember = z.infer<typeof insertMemberSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Loan = typeof loans.$inferSelect;\nexport type InsertLoan = z.infer<typeof insertLoanSchema>;\nexport type Meeting = typeof meetings.$inferSelect;\nexport type InsertMeeting = z.infer<typeof insertMeetingSchema>;\nexport type Cashbox = typeof cashbox.$inferSelect;\nexport type InsertCashbox = z.infer<typeof insertCashboxSchema>;\n","size_bytes":13828},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/hooks/useTheme\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useState, useEffect } from \"react\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/Login\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Groups from \"@/pages/Groups\";\nimport GroupDetails from \"@/pages/GroupDetails\";\nimport Members from \"@/pages/Members\";\nimport MemberDashboard from \"@/pages/MemberDashboard\";\nimport FieldDashboard from \"@/pages/FieldDashboard\";\nimport Transactions from \"@/pages/Transactions\";\nimport Loans from \"@/pages/Loans\";\nimport LoanCalculator from \"@/pages/LoanCalculator\";\nimport SubmitSavingsPage from \"@/pages/SubmitSavingsPage\";\nimport LoanPaymentsPage from \"@/pages/LoanPaymentsPage\";\nimport LoanSubmissionPage from \"@/pages/LoanSubmissionPage\";\nimport Meetings from \"@/pages/Meetings\";\nimport UserManagement from \"@/pages/UserManagement\";\nimport Reports from \"@/pages/Reports\";\nimport Reset from \"@/pages/Reset\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  // If still loading authentication, show loading\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n\n  // Determine user type based on authenticated user data\n  const userRole = user?.role || user?.groupRole;\n  \n  // If no authentication at all, show login\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/reset\" component={Reset} />\n        <Route path=\"/login\" component={Login} />\n        <Route component={Login} />\n      </Switch>\n    );\n  }\n\n  // Determine role based on authenticated user\n  const isAdmin = isAuthenticated && userRole === 'admin';\n  const isFieldMonitor = isAuthenticated && userRole === 'field_monitor';\n  const isFieldAttendant = isAuthenticated && userRole === 'field_attendant';\n  const isMember = isAuthenticated && ['chairman', 'secretary', 'finance', 'member'].includes(userRole);\n  \n  // Member permission levels\n  const isGroupLeader = isMember && ['chairman', 'secretary', 'finance'].includes(userRole);\n  const isRegularMember = isMember && userRole === 'member';\n  \n  return (\n    <Switch>\n      {/* Public routes always available */}\n      <Route path=\"/reset\" component={Reset} />\n      <Route path=\"/login\" component={Login} />\n      \n      {/* MEMBER ROUTES - Highest Priority - Members can only see their group's data */}\n      {isMember && (\n        <>\n          <Route path=\"/member-dashboard/:memberId\" component={MemberDashboard} />\n          <Route path=\"/member-dashboard\" component={MemberDashboard} />\n          {/* ONLY chairman, secretary, finance can submit data - regular members VIEW ONLY */}\n          {isGroupLeader && (\n            <>\n              <Route path=\"/members\" component={Members} />\n              <Route path=\"/submit-savings\" component={SubmitSavingsPage} />\n              <Route path=\"/loan-payments\" component={LoanPaymentsPage} />\n              <Route path=\"/loan-submission\" component={LoanSubmissionPage} />\n            </>\n          )}\n          {/* Regular members can only view - no editing access */}\n          {isRegularMember && (\n            <>\n              <Route path=\"/members\" component={() => <Members readOnly={true} />} />\n            </>\n          )}\n          {/* Default route for members */}\n          <Route path=\"/\" component={MemberDashboard} />\n        </>\n      )}\n      \n      {/* FIELD MONITOR ROUTES - See only assigned groups by admin */}\n      {isFieldMonitor && (\n        <>\n          <Route path=\"/field-dashboard\" component={FieldDashboard} />\n          <Route path=\"/members\" component={Members} />\n          <Route path=\"/submit-savings\" component={SubmitSavingsPage} />\n          <Route path=\"/loan-payments\" component={LoanPaymentsPage} />\n          <Route path=\"/loan-submission\" component={LoanSubmissionPage} />\n          <Route path=\"/groups\" component={Groups} />\n          <Route path=\"/groups/:groupId\" component={GroupDetails} />\n          <Route path=\"/\" component={FieldDashboard} />\n        </>\n      )}\n      \n      {/* FIELD ATTENDANT ROUTES - See only groups they enrolled */}\n      {isFieldAttendant && (\n        <>\n          <Route path=\"/field-dashboard\" component={FieldDashboard} />\n          <Route path=\"/members\" component={Members} />\n          <Route path=\"/submit-savings\" component={SubmitSavingsPage} />\n          <Route path=\"/loan-payments\" component={LoanPaymentsPage} />\n          <Route path=\"/loan-submission\" component={LoanSubmissionPage} />\n          <Route path=\"/groups\" component={Groups} />\n          <Route path=\"/groups/:groupId\" component={GroupDetails} />\n          <Route path=\"/\" component={FieldDashboard} />\n        </>\n      )}\n      \n      {/* ADMIN ROUTES - See all groups and data */}\n      {isAdmin && (\n        <>\n          <Route path=\"/groups\" component={Groups} />\n          <Route path=\"/groups/:groupId\" component={GroupDetails} />\n          <Route path=\"/transactions\" component={Transactions} />\n          <Route path=\"/loans\" component={Loans} />\n          <Route path=\"/loan-calculator\" component={LoanCalculator} />\n          <Route path=\"/meetings\" component={Meetings} />\n          <Route path=\"/user-management\" component={UserManagement} />\n          <Route path=\"/reports\" component={Reports} />\n          <Route path=\"/members\" component={Members} />\n          <Route path=\"/submit-savings\" component={SubmitSavingsPage} />\n          <Route path=\"/loan-payments\" component={LoanPaymentsPage} />\n          <Route path=\"/loan-submission\" component={LoanSubmissionPage} />\n          <Route path=\"/\" component={Dashboard} />\n        </>\n      )}\n      \n      {/* Fallback for unauthenticated */}\n      <Route path=\"/\" component={Login} />\n      \n      {/* 404 Not Found */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"weka-ui-theme\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":6435},"client/src/index.css":{"content":"@import \"tailwindcss/base\";\n@import \"tailwindcss/components\";\n@import \"tailwindcss/utilities\";\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(217.2, 91.2%, 59.8%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.blue {\n  --background: hsl(210, 100%, 97%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(221.2, 83.2%, 86%);\n  --input: hsl(221.2, 83.2%, 93%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(221.2, 83.2%, 86%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":4974},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdminSidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport {\n  Home,\n  Users,\n  User,\n  DollarSign,\n  FileText,\n  Calendar,\n  BarChart3,\n  LogOut,\n  Calculator,\n  UserPlus,\n  PlusCircle,\n  MinusCircle,\n  Menu,\n  X,\n} from \"lucide-react\";\nimport wekaLogo from \"@assets/WEKA_1756289094166.png\";\nimport dreamersLogo from \"@assets/updated logo the dreamers_1756291084041.png\";\n\n// Navigation items with role-based access control\nconst navigationItems = [\n  // Dashboard - available to all authenticated users\n  { href: \"/\", icon: Home, label: \"Dashboard\", roles: ['admin', 'field_monitor', 'field_attendant', 'chairman', 'secretary', 'finance', 'member'] },\n  \n  // Group Members - viewable by all, editable only by leaders and field staff\n  { href: \"/members\", icon: User, label: \"Group Members\", roles: ['admin', 'field_monitor', 'field_attendant', 'chairman', 'secretary', 'finance', 'member'] },\n  \n  // VSLA Data Submission - ONLY chairman, secretary, finance can submit data\n  { href: \"/submit-savings\", icon: PlusCircle, label: \"Submit Savings\", roles: ['admin', 'field_monitor', 'field_attendant', 'chairman', 'secretary', 'finance'] },\n  { href: \"/loan-submission\", icon: FileText, label: \"Loan Submission\", roles: ['admin', 'field_monitor', 'field_attendant', 'chairman', 'secretary', 'finance'] },\n  { href: \"/loan-payments\", icon: MinusCircle, label: \"Loan Payments\", roles: ['admin', 'field_monitor', 'field_attendant', 'chairman', 'secretary', 'finance'] },\n  \n  // Group Management - field staff and admins\n  { href: \"/groups\", icon: Users, label: \"Groups\", roles: ['admin', 'field_monitor', 'field_attendant'] },\n  \n  // Admin-only system functions\n  { href: \"/transactions\", icon: DollarSign, label: \"All Transactions\", roles: ['admin'] },\n  { href: \"/loans\", icon: FileText, label: \"All Loans\", roles: ['admin'] },\n  { href: \"/loan-calculator\", icon: Calculator, label: \"Loan Calculator\", roles: ['admin'] },\n  { href: \"/meetings\", icon: Calendar, label: \"All Meetings\", roles: ['admin'] },\n  { href: \"/user-management\", icon: UserPlus, label: \"User Management\", roles: ['admin'] },\n  { href: \"/reports\", icon: BarChart3, label: \"System Reports\", roles: ['admin'] },\n];\n\ninterface AdminSidebarProps {\n  userRole?: string;\n}\n\nexport function AdminSidebar({ userRole }: AdminSidebarProps) {\n  const [location] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  \n  // Determine the actual user role:\n  // 1. If userRole prop is provided (for group leaders/members), use it\n  // 2. If user is authenticated via API and has a role, use that role (admin/field)\n  // 3. Otherwise default to 'member'\n  const actualUserRole = userRole || (isAuthenticated && user?.role ? user.role : 'member');\n  \n  // Filter navigation items based on actual user role\n  const allowedItems = navigationItems.filter(item => \n    item.roles.includes(actualUserRole)\n  );\n\n  const handleLogout = async () => {\n    try {\n      // Check if this is a member session (stored in localStorage)\n      const memberSession = localStorage.getItem('memberSession');\n      \n      if (memberSession) {\n        // Member logout - clear localStorage and redirect\n        localStorage.removeItem('memberSession');\n        window.location.href = '/login';\n        return;\n      }\n      \n      // Staff logout - clear server session\n      await fetch('/api/logout', {\n        method: 'POST',\n        credentials: 'include'\n      });\n      \n      window.location.href = '/login';\n    } catch (error) {\n      console.log('Logout error:', error);\n      // Force redirect even on error\n      window.location.href = '/login';\n    }\n  };\n\n  const sidebarContent = (\n    <aside className=\"w-64 bg-card border-r border-border flex flex-col\" data-testid=\"admin-sidebar\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\" data-testid=\"sidebar-header\">\n          <div className=\"flex items-center space-x-3\">\n            <img \n              src={wekaLogo} \n              alt=\"WEKA Logo\" \n              className=\"w-10 h-10 object-contain\"\n            />\n            <div>\n              <h1 className=\"text-lg font-semibold text-foreground\">WEKA Admin</h1>\n              <p className=\"text-sm text-muted-foreground\">Save For Future</p>\n            </div>\n          </div>\n          <img \n            src={dreamersLogo} \n            alt=\"The Dreamers Logo\" \n            className=\"w-8 h-8 object-contain\"\n          />\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\" data-testid=\"sidebar-navigation\">\n        {allowedItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href;\n          \n          return (\n            <Link key={item.href} href={item.href}>\n              <div\n                className={`flex items-center space-x-3 px-3 py-2 rounded-md font-medium transition-colors cursor-pointer ${\n                  isActive\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                }`}\n                data-testid={`nav-${item.label.toLowerCase()}`}\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                <Icon className=\"w-5 h-5\" />\n                <span>{item.label}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border space-y-3\" data-testid=\"sidebar-footer\">\n        {/* Theme Toggle */}\n        <div className=\"flex justify-center\">\n          <ThemeToggle />\n        </div>\n        \n        {/* User Info */}\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n            <span className=\"text-xs font-medium text-secondary-foreground\">\n              {(user as any)?.firstName?.[0] || (user as any)?.email?.[0] || \"U\"}\n            </span>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-foreground truncate\">\n              {(user as any)?.firstName && (user as any)?.lastName \n                ? `${(user as any).firstName} ${(user as any).lastName}` \n                : (user as any)?.email || \"User\"\n              }\n            </p>\n            <p className=\"text-xs text-muted-foreground\">Administrator</p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => {\n              handleLogout();\n              setIsMobileMenuOpen(false);\n            }}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </aside>\n  );\n\n  return (\n    <>\n      {/* Mobile Menu Button - Hamburger Menu */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"fixed top-3 left-3 z-50 lg:hidden bg-background/80 backdrop-blur-sm border shadow-sm\"\n        onClick={() => setIsMobileMenuOpen(true)}\n        data-testid=\"mobile-menu-button\"\n      >\n        <Menu className=\"h-4 w-4\" />\n      </Button>\n\n      {/* Desktop Sidebar - Hidden on mobile */}\n      <div className=\"hidden lg:block\">\n        {sidebarContent}\n      </div>\n\n      {/* Mobile Sidebar Overlay */}\n      {isMobileMenuOpen && (\n        <div className=\"fixed inset-0 z-40 lg:hidden\">\n          {/* Backdrop */}\n          <div \n            className=\"absolute inset-0 bg-background/80 backdrop-blur-sm\" \n            onClick={() => setIsMobileMenuOpen(false)}\n          />\n          {/* Mobile Sidebar with Close Button */}\n          <div className=\"relative\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute top-3 right-3 z-50 bg-background border shadow-sm\"\n              onClick={() => setIsMobileMenuOpen(false)}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n            {sidebarContent}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":8362},"client/src/components/GroupCard.tsx":{"content":"import { Group } from \"@shared/schema\";\nimport { format } from \"date-fns\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Eye, Edit, Trash2 } from \"lucide-react\";\n\ninterface GroupCardProps {\n  group: Group;\n  memberCount: number;\n  totalSavings: number;\n  nextMeeting?: Date;\n  onViewClick?: (group: Group) => void;\n  onEditClick?: (group: Group) => void;\n  onDeleteClick?: (group: Group) => void;\n  showDeleteButton?: boolean;\n}\n\nexport function GroupCard({ group, memberCount, totalSavings, nextMeeting, onViewClick, onEditClick, onDeleteClick, showDeleteButton }: GroupCardProps) {\n  const initials = group.name\n    .split(' ')\n    .map(word => word[0])\n    .join('')\n    .toUpperCase()\n    .slice(0, 2);\n\n  return (\n    <div \n      className=\"flex items-center justify-between p-4 rounded-lg border border-border hover:bg-muted/25 transition-colors\"\n      data-testid={`group-card-${group.id}`}\n    >\n      <Link href={`/groups/${group.id}`} className=\"flex-1\">\n        <div className=\"flex items-center space-x-3 cursor-pointer\">\n          <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n            <span className=\"text-sm font-semibold text-primary\" data-testid={`group-initials-${group.id}`}>\n              {initials}\n            </span>\n          </div>\n          <div>\n            <p className=\"font-medium text-foreground\" data-testid={`group-name-${group.id}`}>\n              {group.name}\n            </p>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`group-stats-${group.id}`}>\n              {memberCount} members • ${totalSavings.toFixed(2)} total savings\n            </p>\n          </div>\n        </div>\n      </Link>\n      \n      <div className=\"flex items-center gap-3\">\n        <div className=\"text-right\">\n          <p className={`text-sm font-medium ${group.isActive ? 'text-green-600' : 'text-gray-600'}`}>\n            {group.isActive ? 'Active' : 'Inactive'}\n          </p>\n          {nextMeeting && (\n            <p className=\"text-xs text-muted-foreground\" data-testid={`next-meeting-${group.id}`}>\n              Next meeting: {format(nextMeeting, \"MMM dd\")}\n            </p>\n          )}\n        </div>\n        \n        <div className=\"flex gap-2\">\n          {onEditClick && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                onEditClick(group);\n              }}\n              className=\"flex items-center gap-1\"\n              data-testid={`edit-group-${group.id}`}\n            >\n              <Edit className=\"h-4 w-4\" />\n              Edit\n            </Button>\n          )}\n          {showDeleteButton && onDeleteClick && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                onDeleteClick(group);\n              }}\n              className=\"flex items-center gap-1 text-red-600 hover:text-red-700 hover:bg-red-50\"\n              data-testid={`delete-group-${group.id}`}\n            >\n              <Trash2 className=\"h-4 w-4\" />\n              Delete\n            </Button>\n          )}\n          {onViewClick && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                onViewClick(group);\n              }}\n              className=\"flex items-center gap-1\"\n              data-testid={`view-group-${group.id}`}\n            >\n              <Eye className=\"h-4 w-4\" />\n              View\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3833},"client/src/components/PendingActionCard.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\n\ninterface PendingActionCardProps {\n  type: \"loan\" | \"member\" | \"meeting\";\n  title: string;\n  description: string;\n  details: string;\n  icon: LucideIcon;\n  onReview: () => void;\n}\n\nconst typeStyles = {\n  loan: \"border-amber-200 bg-amber-50\",\n  member: \"border-blue-200 bg-blue-50\",\n  meeting: \"border-green-200 bg-green-50\",\n};\n\nconst iconStyles = {\n  loan: \"bg-amber-100 text-amber-600\",\n  member: \"bg-blue-100 text-blue-600\",\n  meeting: \"bg-green-100 text-green-600\",\n};\n\nexport function PendingActionCard({ \n  type, \n  title, \n  description, \n  details, \n  icon: Icon, \n  onReview \n}: PendingActionCardProps) {\n  const cardStyle = typeStyles[type];\n  const iconStyle = iconStyles[type];\n\n  return (\n    <div className={`p-4 rounded-lg border ${cardStyle}`} data-testid={`pending-action-${type}`}>\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-start space-x-3\">\n          <div className={`w-8 h-8 rounded-lg flex items-center justify-center mt-0.5 ${iconStyle}`}>\n            <Icon className=\"w-4 h-4\" />\n          </div>\n          <div>\n            <p className=\"font-medium text-foreground\" data-testid={`action-title-${type}`}>\n              {title}\n            </p>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`action-description-${type}`}>\n              {description}\n            </p>\n            <p className=\"text-xs text-muted-foreground mt-1\" data-testid={`action-details-${type}`}>\n              {details}\n            </p>\n          </div>\n        </div>\n        <button \n          className=\"text-sm text-primary font-medium hover:underline\"\n          onClick={onReview}\n          data-testid={`button-review-${type}`}\n        >\n          Review\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1823},"client/src/components/QuickActionButton.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\n\ninterface QuickActionButtonProps {\n  title: string;\n  description: string;\n  icon: LucideIcon;\n  iconColor: string;\n  iconBgColor: string;\n  onClick: () => void;\n  testId: string;\n}\n\nexport function QuickActionButton({\n  title,\n  description,\n  icon: Icon,\n  iconColor,\n  iconBgColor,\n  onClick,\n  testId,\n}: QuickActionButtonProps) {\n  return (\n    <button\n      className=\"w-full flex items-center space-x-3 p-3 rounded-lg border border-border hover:bg-accent hover:text-accent-foreground transition-colors\"\n      onClick={onClick}\n      data-testid={testId}\n    >\n      <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${iconBgColor}`}>\n        <Icon className={`w-4 h-4 ${iconColor}`} />\n      </div>\n      <div className=\"text-left\">\n        <p className=\"font-medium text-foreground\">{title}</p>\n        <p className=\"text-sm text-muted-foreground\">{description}</p>\n      </div>\n    </button>\n  );\n}\n","size_bytes":971},"client/src/components/StatsCard.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  iconColor: string;\n  iconBgColor: string;\n  trend?: {\n    value: string;\n    label: string;\n    isPositive?: boolean;\n  };\n}\n\nexport function StatsCard({ \n  title, \n  value, \n  icon: Icon, \n  iconColor, \n  iconBgColor, \n  trend \n}: StatsCardProps) {\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6\" data-testid=\"stats-card\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-muted-foreground text-sm font-medium\">{title}</p>\n          <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid={`stat-value-${title.toLowerCase().replace(' ', '-')}`}>\n            {value}\n          </p>\n        </div>\n        <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${iconBgColor}`}>\n          <Icon className={`w-6 h-6 ${iconColor}`} />\n        </div>\n      </div>\n      {trend && (\n        <div className=\"flex items-center mt-4 text-sm\">\n          <span className={`font-medium ${trend.isPositive !== false ? 'text-green-600' : 'text-red-600'}`}>\n            {trend.value}\n          </span>\n          <span className=\"text-muted-foreground ml-1\">{trend.label}</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":1348},"client/src/components/TransactionRow.tsx":{"content":"import { Transaction } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\ninterface TransactionRowProps {\n  transaction: Transaction;\n  memberName: string;\n  groupName: string;\n}\n\nconst transactionTypeStyles = {\n  deposit: \"bg-green-100 text-green-800\",\n  withdrawal: \"bg-red-100 text-red-800\",\n  loan_payment: \"bg-blue-100 text-blue-800\",\n  loan_disbursement: \"bg-amber-100 text-amber-800\",\n};\n\nconst transactionTypeLabels = {\n  deposit: \"Deposit\",\n  withdrawal: \"Withdrawal\",\n  loan_payment: \"Loan Payment\",\n  loan_disbursement: \"Loan Disbursed\",\n};\n\nexport function TransactionRow({ transaction, memberName, groupName }: TransactionRowProps) {\n  const typeStyle = transactionTypeStyles[transaction.type as keyof typeof transactionTypeStyles] || \"bg-gray-100 text-gray-800\";\n  const typeLabel = transactionTypeLabels[transaction.type as keyof typeof transactionTypeLabels] || transaction.type;\n\n  return (\n    <tr \n      className=\"border-b border-border hover:bg-muted/25\" \n      data-testid={`transaction-row-${transaction.id}`}\n    >\n      <td className=\"p-4 text-sm text-foreground\">\n        {format(new Date(transaction.transactionDate), \"MMM dd, yyyy\")}\n      </td>\n      <td className=\"p-4 text-sm text-foreground\" data-testid={`member-name-${transaction.id}`}>\n        {memberName}\n      </td>\n      <td className=\"p-4\">\n        <span \n          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${typeStyle}`}\n          data-testid={`transaction-type-${transaction.id}`}\n        >\n          {typeLabel}\n        </span>\n      </td>\n      <td className=\"p-4 text-sm font-medium text-foreground\" data-testid={`amount-${transaction.id}`}>\n        ${parseFloat(transaction.amount).toFixed(2)}\n      </td>\n      <td className=\"p-4 text-sm text-muted-foreground\" data-testid={`group-name-${transaction.id}`}>\n        {groupName}\n      </td>\n    </tr>\n  );\n}\n","size_bytes":1904},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\n\nexport function useAuth() {\n  // Use a single endpoint that handles both staff and member authentication\n  const { data: authData, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchInterval: false,\n    staleTime: Infinity,\n  });\n\n  // If there's an error (like 401), user is not authenticated\n  if (error) {\n    return {\n      user: null,\n      isLoading: false,\n      isAuthenticated: false,\n    };\n  }\n\n  // If still loading, show loading state\n  if (isLoading) {\n    return {\n      user: null,\n      isLoading: true,\n      isAuthenticated: false,\n    };\n  }\n\n  // If we have auth data, user is authenticated\n  if (authData) {\n    const user = (authData as any).userType === 'staff' ? (authData as any).user : (authData as any).member;\n    return {\n      user,\n      isLoading: false,\n      isAuthenticated: true,\n    };\n  }\n\n  // No auth data means not authenticated\n  return {\n    user: null,\n    isLoading: false,\n    isAuthenticated: false,\n  };\n}\n","size_bytes":1159},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrency(amount: number): string {\n  return new Intl.NumberFormat('en-UG', {\n    style: 'currency',\n    currency: 'UGX',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n}\n","size_bytes":393},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { AdminSidebar } from \"@/components/AdminSidebar\";\nimport { StatsCard } from \"@/components/StatsCard\";\nimport { TransactionRow } from \"@/components/TransactionRow\";\nimport { GroupCard } from \"@/components/GroupCard\";\nimport { PendingActionCard } from \"@/components/PendingActionCard\";\nimport { QuickActionButton } from \"@/components/QuickActionButton\";\nimport { NewGroupModal } from \"@/components/modals/NewGroupModal\";\nimport { GroupDetailsModal } from \"@/components/GroupDetailsModal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { formatCurrency } from \"@/utils/currency\";\nimport { Users, User, DollarSign, FileText, Calendar, Plus, Wallet, UserCheck, UserX } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Dashboard() {\n  const [selectedGroupId, setSelectedGroupId] = useState<string>(\"all\");\n  const [isNewGroupModalOpen, setIsNewGroupModalOpen] = useState(false);\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [isGroupDetailsOpen, setIsGroupDetailsOpen] = useState(false);\n\n  // Fetch dashboard stats\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  // Fetch groups\n  const { data: groups = [], isLoading: groupsLoading } = useQuery({\n    queryKey: [\"/api/groups\"],\n  });\n\n  // Fetch recent transactions\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  // Fetch members to get names for transactions and calculate interest\n  const { data: members = [] } = useQuery({\n    queryKey: [\"/api/members\"],\n  });\n\n\n  const getMemberName = (memberId: string) => {\n    const member = members.find((m: any) => m.id === memberId);\n    return member ? `${member.firstName} ${member.lastName}` : \"Unknown Member\";\n  };\n\n  const getGroupName = (groupId: string) => {\n    const group = groups.find((g: any) => g.id === groupId);\n    return group ? group.name : \"Unknown Group\";\n  };\n\n  const recentTransactions = transactions.slice(0, 5);\n\n  if (statsLoading || groupsLoading || transactionsLoading) {\n    return (\n      <div className=\"min-h-screen flex\">\n        <AdminSidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\" data-testid=\"dashboard-page\">\n      <AdminSidebar />\n\n      <main className=\"flex-1 overflow-hidden\">\n        {/* Top Bar */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"page-title\">Dashboard</h2>\n              <p className=\"text-muted-foreground\">Welcome back! Here's an overview of your WEKA groups.</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Select value={selectedGroupId} onValueChange={setSelectedGroupId}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-group-filter\">\n                  <SelectValue placeholder=\"Select group\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Groups</SelectItem>\n                  {groups.map((group: any) => (\n                    <SelectItem key={group.id} value={group.id}>\n                      {group.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Link href=\"/login\">\n                <Button variant=\"outline\">\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Unified Login\n                </Button>\n              </Link>\n\n              <Button \n                onClick={() => setIsNewGroupModalOpen(true)}\n                data-testid=\"button-new-group\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Group\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <div className=\"p-6 overflow-y-auto max-h-[calc(100vh-88px)]\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n            <StatsCard\n              title=\"Total Groups\"\n              value={stats?.totalGroups || 0}\n              icon={Users}\n              iconColor=\"text-primary\"\n              iconBgColor=\"bg-primary/10\"\n              trend={{ value: \"+2\", label: \"this month\", isPositive: true }}\n            />\n            <StatsCard\n              title=\"Total Members\"\n              value={stats?.totalMembers || 0}\n              icon={User}\n              iconColor=\"text-green-600\"\n              iconBgColor=\"bg-green-100\"\n              trend={{ \n                value: `M: ${stats?.maleMembers || 0} | F: ${stats?.femaleMembers || 0}`, \n                label: \"gender breakdown\", \n                isPositive: true \n              }}\n            />\n            <StatsCard\n              title=\"Total Savings\"\n              value={formatCurrency(stats?.totalSavings || 0)}\n              icon={DollarSign}\n              iconColor=\"text-blue-600\"\n              iconBgColor=\"bg-blue-100\"\n              trend={{ value: \"+12.5%\", label: \"vs last month\", isPositive: true }}\n            />\n            <StatsCard\n              title=\"Total Welfare\"\n              value={formatCurrency(stats?.totalWelfare || 0)}\n              icon={UserCheck}\n              iconColor=\"text-purple-600\"\n              iconBgColor=\"bg-purple-100\"\n              trend={{ value: formatCurrency(stats?.totalWelfare || 0), label: \"welfare fund\" }}\n            />\n            <StatsCard\n              title=\"Available Cash in Box\"\n              value={formatCurrency(stats?.totalCashInBox || 0)}\n              icon={Wallet}\n              iconColor=\"text-emerald-600\"\n              iconBgColor=\"bg-emerald-100\"\n              trend={{ value: formatCurrency(stats?.totalCashInBox || 0), label: \"total available\" }}\n            />\n            <StatsCard\n              title=\"Total Loans Given\"\n              value={formatCurrency(stats?.totalLoansGiven || 0)}\n              icon={FileText}\n              iconColor=\"text-orange-600\"\n              iconBgColor=\"bg-orange-100\"\n              trend={{ value: `${stats?.activeLoans || 0} active`, label: \"active loans\", isPositive: true }}\n            />\n            <StatsCard\n              title=\"Total Interest\"\n              value={formatCurrency(stats?.totalInterest || 0)}\n              icon={FileText}\n              iconColor=\"text-indigo-600\"\n              iconBgColor=\"bg-indigo-100\"\n              trend={{ value: formatCurrency(stats?.totalInterest || 0), label: \"interest earned\" }}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n            {/* Recent Transactions */}\n            <div className=\"lg:col-span-2 bg-card rounded-lg border border-border\">\n              <div className=\"p-6 border-b border-border\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">Recent Transactions</h3>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-transactions\">\n                    View All\n                  </Button>\n                </div>\n              </div>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted/50\">\n                    <tr>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Date</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Member</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Type</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Amount</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Group</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {recentTransactions.length === 0 ? (\n                      <tr>\n                        <td colSpan={5} className=\"p-8 text-center text-muted-foreground\">\n                          No transactions found\n                        </td>\n                      </tr>\n                    ) : (\n                      recentTransactions.map((transaction: any) => (\n                        <TransactionRow\n                          key={transaction.id}\n                          transaction={transaction}\n                          memberName={getMemberName(transaction.memberId)}\n                          groupName={getGroupName(transaction.groupId)}\n                        />\n                      ))\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"bg-card rounded-lg border border-border p-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Quick Actions</h3>\n              <div className=\"space-y-3\">\n                <QuickActionButton\n                  title=\"Add Member\"\n                  description=\"Register new member\"\n                  icon={User}\n                  iconColor=\"text-primary\"\n                  iconBgColor=\"bg-primary/10\"\n                  onClick={() => {}}\n                  testId=\"button-add-member\"\n                />\n                <QuickActionButton\n                  title=\"Record Transaction\"\n                  description=\"Log deposit or withdrawal\"\n                  icon={DollarSign}\n                  iconColor=\"text-green-600\"\n                  iconBgColor=\"bg-green-100\"\n                  onClick={() => {}}\n                  testId=\"button-record-transaction\"\n                />\n                <QuickActionButton\n                  title=\"Process Loan\"\n                  description=\"Review loan applications\"\n                  icon={FileText}\n                  iconColor=\"text-amber-600\"\n                  iconBgColor=\"bg-amber-100\"\n                  onClick={() => {}}\n                  testId=\"button-process-loan\"\n                />\n                <QuickActionButton\n                  title=\"Schedule Meeting\"\n                  description=\"Plan group meeting\"\n                  icon={Calendar}\n                  iconColor=\"text-blue-600\"\n                  iconBgColor=\"bg-blue-100\"\n                  onClick={() => {}}\n                  testId=\"button-schedule-meeting\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Group Overview */}\n            <div className=\"bg-card rounded-lg border border-border\">\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Group Overview</h3>\n              </div>\n              <div className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {groups.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      No groups found\n                    </div>\n                  ) : (\n                    groups.slice(0, 3).map((group: any) => (\n                      <GroupCard\n                        key={group.id}\n                        group={group}\n                        memberCount={members.filter((m: any) => m.groupId === group.id).length}\n                        totalSavings={members\n                          .filter((m: any) => m.groupId === group.id)\n                          .reduce((sum: number, m: any) => sum + parseFloat(m.savingsBalance || 0), 0)\n                        }\n                        onViewClick={(group) => {\n                          setSelectedGroup(group);\n                          setIsGroupDetailsOpen(true);\n                        }}\n                      />\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Pending Actions */}\n            <div className=\"bg-card rounded-lg border border-border\">\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Pending Actions</h3>\n              </div>\n              <div className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No pending actions\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <NewGroupModal\n        open={isNewGroupModalOpen}\n        onOpenChange={setIsNewGroupModalOpen}\n      />\n\n      <GroupDetailsModal\n        group={selectedGroup}\n        isOpen={isGroupDetailsOpen}\n        onClose={() => {\n          setIsGroupDetailsOpen(false);\n          setSelectedGroup(null);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":13668},"client/src/pages/Groups.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { AdminSidebar } from \"@/components/AdminSidebar\";\nimport { NewGroupModal } from \"@/components/modals/NewGroupModal\";\nimport { EditGroupModal } from \"@/components/modals/EditGroupModal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Plus, Search, Edit, Trash2, MapPin, DollarSign, Users, Ban, CheckCircle, MoreVertical } from \"lucide-react\";\nimport type { Group } from \"@shared/schema\";\n\nexport default function Groups() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isNewGroupModalOpen, setIsNewGroupModalOpen] = useState(false);\n  const [editingGroup, setEditingGroup] = useState<Group | null>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: groups = [], isLoading } = useQuery({\n    queryKey: [\"/api/groups\"],\n  });\n\n  const { data: members = [] } = useQuery({\n    queryKey: [\"/api/members\"],\n  });\n\n  const filteredGroups = (groups as any[]).filter((group: any) =>\n    group.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getGroupStats = (groupId: string) => {\n    const groupMembers = (members as any[]).filter((m: any) => m.groupId === groupId);\n    const totalSavings = groupMembers.reduce((sum: number, m: any) => sum + parseFloat(m.savingsBalance || 0), 0);\n    return { memberCount: groupMembers.length, totalSavings };\n  };\n\n  // Check if user is admin\n  const isAdmin = user?.role === 'admin';\n\n  // Delete group mutation\n  const deleteGroupMutation = useMutation({\n    mutationFn: async (groupId: string) => {\n      const response = await fetch(`/api/groups/${groupId}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to delete group');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/groups'] });\n      toast({\n        title: \"Success\",\n        description: \"Group deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete group\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Deactivate/Activate group mutation\n  const toggleGroupStatusMutation = useMutation({\n    mutationFn: async ({ groupId, isActive }: { groupId: string; isActive: boolean }) => {\n      const response = await fetch(`/api/groups/${groupId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ isActive }),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update group status');\n      }\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/groups'] });\n      toast({\n        title: \"Success\",\n        description: `Group ${variables.isActive ? 'activated' : 'deactivated'} successfully`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update group status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteGroup = (group: Group) => {\n    deleteGroupMutation.mutate(group.id);\n  };\n\n  const handleToggleGroupStatus = (group: Group) => {\n    toggleGroupStatusMutation.mutate({\n      groupId: group.id,\n      isActive: !group.isActive\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex\">\n        <AdminSidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\" data-testid=\"groups-page\">\n      <AdminSidebar />\n\n      <main className=\"flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"page-title\">Groups</h2>\n              <p className=\"text-muted-foreground\">Manage all your VSLA groups</p>\n            </div>\n            <Button \n              onClick={() => setIsNewGroupModalOpen(true)}\n              data-testid=\"button-new-group\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Group\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6 overflow-y-auto h-[calc(100vh-88px)]\">\n          {/* Search */}\n          <div className=\"mb-6\">\n            <div className=\"relative max-w-md\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search groups...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-search-groups\"\n              />\n            </div>\n          </div>\n\n          {/* Groups List */}\n          {filteredGroups.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 mx-auto bg-muted rounded-full flex items-center justify-center mb-4\">\n                <Plus className=\"w-12 h-12 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-foreground mb-2\">No groups found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm ? \"Try adjusting your search term\" : \"Create your first VSLA group to get started\"}\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => setIsNewGroupModalOpen(true)} data-testid=\"button-create-first-group\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create First Group\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredGroups.map((group: any, index: number) => {\n                const stats = getGroupStats(group.id);\n                return (\n                  <div \n                    key={group.id}\n                    className=\"flex items-center justify-between p-4 rounded-lg border border-border hover:bg-muted/25 transition-colors\"\n                    data-testid={`group-list-item-${group.id}`}\n                  >\n                    <Link href={`/groups/${group.id}`} className=\"flex items-center space-x-4 flex-1 cursor-pointer\">\n                      <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <span className=\"text-lg font-bold text-primary\" data-testid={`group-number-${group.id}`}>\n                          {index + 1}\n                        </span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-lg text-foreground hover:text-primary transition-colors\" data-testid={`group-name-${group.id}`}>\n                          {group.name}\n                        </h3>\n                        <div className=\"flex items-center gap-6 mt-1\">\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                            <MapPin className=\"h-4 w-4\" />\n                            <span data-testid={`group-location-${group.id}`}>{group.location || 'No location set'}</span>\n                          </div>\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                            <DollarSign className=\"h-4 w-4\" />\n                            <span data-testid={`group-savings-${group.id}`}>${stats.totalSavings.toFixed(2)} saved</span>\n                          </div>\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                            <Users className=\"h-4 w-4\" />\n                            <span data-testid={`group-members-${group.id}`}>{stats.memberCount} members</span>\n                          </div>\n                        </div>\n                      </div>\n                    </Link>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"text-right mr-4\">\n                        <p className={`text-sm font-medium ${group.isActive ? 'text-green-600' : 'text-gray-600'}`}>\n                          {group.isActive ? 'Active' : 'Inactive'}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Interest: {group.interestRate || '0'}% monthly\n                        </p>\n                      </div>\n                      \n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setEditingGroup(group)}\n                        className=\"flex items-center gap-1\"\n                        data-testid={`edit-group-${group.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                        Edit\n                      </Button>\n                      \n                      {isAdmin && (\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"flex items-center gap-1\"\n                              data-testid={`actions-group-${group.id}`}\n                            >\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem\n                              onClick={() => handleToggleGroupStatus(group)}\n                              className=\"flex items-center gap-2\"\n                              data-testid={`toggle-status-group-${group.id}`}\n                            >\n                              {group.isActive ? (\n                                <>\n                                  <Ban className=\"h-4 w-4\" />\n                                  Deactivate Group\n                                </>\n                              ) : (\n                                <>\n                                  <CheckCircle className=\"h-4 w-4\" />\n                                  Activate Group\n                                </>\n                              )}\n                            </DropdownMenuItem>\n                            <DropdownMenuSeparator />\n                            <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <DropdownMenuItem\n                                  onSelect={(e) => e.preventDefault()}\n                                  className=\"flex items-center gap-2 text-red-600 focus:text-red-600\"\n                                  data-testid={`delete-group-${group.id}`}\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                  Delete Permanently\n                                </DropdownMenuItem>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>Delete Group Permanently</AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    Are you sure you want to permanently delete the group \"{group.name}\"?\n                                    <br /><br />\n                                    <strong>This will delete:</strong>\n                                    <br />• All {stats.memberCount} members in this group\n                                    <br />• All transaction history (${stats.totalSavings.toFixed(2)})\n                                    <br />• All loan records and payments\n                                    <br />• All meeting records\n                                    <br /><br />\n                                    <strong>This action cannot be undone!</strong>\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                  <AlertDialogAction \n                                    onClick={() => handleDeleteGroup(group)}\n                                    className=\"bg-red-600 hover:bg-red-700\"\n                                  >\n                                    Delete Permanently\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </main>\n\n      <NewGroupModal\n        open={isNewGroupModalOpen}\n        onOpenChange={setIsNewGroupModalOpen}\n      />\n      \n      {editingGroup && (\n        <EditGroupModal\n          open={!!editingGroup}\n          onOpenChange={(open) => !open && setEditingGroup(null)}\n          group={editingGroup}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":14854},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { DollarSign, Users, FileText, BarChart3 } from \"lucide-react\";\nimport wekaLogo from \"@assets/WEKA_1756289094166.png\";\nimport dreamersLogo from \"@assets/updated logo the dreamers_1756291084041.png\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"landing-page\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div className=\"flex items-center space-x-3\">\n              <img \n                src={wekaLogo} \n                alt=\"WEKA Logo\" \n                className=\"w-10 h-10 object-contain\"\n              />\n              <div>\n                <h1 className=\"text-xl font-bold text-foreground\">WEKA</h1>\n                <p className=\"text-sm text-muted-foreground\">Wealth, Equity, Knowledge, and Accessibility</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <img \n                src={dreamersLogo} \n                alt=\"The Dreamers Logo\" \n                className=\"w-8 h-8 object-contain\"\n              />\n              <Button onClick={handleLogin} data-testid=\"button-login\">\n                Sign In\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-6\">\n            Save For Future System with WEKA\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Empowering communities through Wealth, Equity, Knowledge, and Accessibility. \n            Comprehensive platform for managing VSLA groups with role-based access control.\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={handleLogin}\n            data-testid=\"button-get-started\"\n            className=\"text-lg px-8 py-3\"\n          >\n            Get Started\n          </Button>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-3xl font-bold text-foreground mb-4\">\n              WEKA Features for Save For Future\n            </h3>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              From member registration to loan processing, our platform handles all aspects of VSLA management.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <Card data-testid=\"feature-group-management\">\n              <CardHeader>\n                <Users className=\"w-12 h-12 text-primary mb-4\" />\n                <CardTitle>Group Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Create and manage multiple VSLA groups with customizable settings and member limits.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"feature-member-tracking\">\n              <CardHeader>\n                <DollarSign className=\"w-12 h-12 text-primary mb-4\" />\n                <CardTitle>Member & Savings</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Track member profiles, savings balances, and contribution history with detailed records.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"feature-loan-processing\">\n              <CardHeader>\n                <FileText className=\"w-12 h-12 text-primary mb-4\" />\n                <CardTitle>Loan Processing</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Handle loan applications, approvals, disbursements, and repayments with automated calculations.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"feature-reporting\">\n              <CardHeader>\n                <BarChart3 className=\"w-12 h-12 text-primary mb-4\" />\n                <CardTitle>Reports & Analytics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Generate comprehensive financial reports and track group performance metrics.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-3 mb-4\">\n              <img \n                src={wekaLogo} \n                alt=\"WEKA Logo\" \n                className=\"w-8 h-8 object-contain\"\n              />\n              <span className=\"text-lg font-semibold text-foreground\">WEKA</span>\n              <img \n                src={dreamersLogo} \n                alt=\"The Dreamers Logo\" \n                className=\"w-8 h-8 object-contain\"\n              />\n            </div>\n            <p className=\"text-muted-foreground\">\n              Empowering communities through organized savings and lending.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":5945},"client/src/pages/LoanCalculator.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { AdminSidebar } from \"@/components/AdminSidebar\";\nimport { Calculator, DollarSign, Percent, Calendar } from \"lucide-react\";\nimport { \n  calculateLoanInterest, \n  calculateLoanTotalDue, \n  calculateMonthlyPayment,\n  generatePaymentSchedule \n} from \"@/lib/calculations\";\n\ninterface LoanCalculation {\n  monthlyPayment: number;\n  totalInterest: number;\n  totalAmount: number;\n  paymentSchedule: {\n    month: number;\n    payment: number;\n    principal: number;\n    interest: number;\n    balance: number;\n  }[];\n}\n\nexport default function LoanCalculator() {\n  const [loanAmount, setLoanAmount] = useState<string>(\"\");\n  const [interestRate, setInterestRate] = useState<string>(\"\");\n  const [termMonths, setTermMonths] = useState<string>(\"\");\n  const [calculation, setCalculation] = useState<LoanCalculation | null>(null);\n\n  const calculateLoan = () => {\n    const principal = parseFloat(loanAmount);\n    const monthlyInterestRate = parseFloat(interestRate); // Use monthly rate as entered\n    const months = parseInt(termMonths);\n\n    if (!principal || !monthlyInterestRate || !months) {\n      return;\n    }\n\n    // Use standardized calculation functions\n    const totalInterest = calculateLoanInterest(principal, monthlyInterestRate, months, false);\n    const totalAmount = calculateLoanTotalDue(principal, monthlyInterestRate, months, false);\n    const monthlyPayment = calculateMonthlyPayment(principal, monthlyInterestRate, months, false);\n    const paymentSchedule = generatePaymentSchedule(principal, monthlyInterestRate, months, false);\n\n    setCalculation({\n      monthlyPayment,\n      totalInterest,\n      totalAmount,\n      paymentSchedule,\n    });\n  };\n\n  const resetCalculator = () => {\n    setLoanAmount(\"\");\n    setInterestRate(\"\");\n    setTermMonths(\"\");\n    setCalculation(null);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <AdminSidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"p-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">Loan Calculator</h1>\n            <p className=\"text-muted-foreground\">\n              Calculate loan repayments, interest, and generate payment schedules\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Input Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Calculator className=\"w-5 h-5\" />\n                  <span>Loan Details</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"loanAmount\">Loan Amount</Label>\n                  <div className=\"relative\">\n                    <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      id=\"loanAmount\"\n                      type=\"number\"\n                      placeholder=\"Enter loan amount\"\n                      className=\"pl-10\"\n                      value={loanAmount}\n                      onChange={(e) => setLoanAmount(e.target.value)}\n                      data-testid=\"input-loan-amount\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"interestRate\">Annual Interest Rate (%)</Label>\n                  <div className=\"relative\">\n                    <Percent className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      id=\"interestRate\"\n                      type=\"number\"\n                      placeholder=\"Enter interest rate\"\n                      className=\"pl-10\"\n                      step=\"0.1\"\n                      value={interestRate}\n                      onChange={(e) => setInterestRate(e.target.value)}\n                      data-testid=\"input-interest-rate\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"termMonths\">Loan Term (Months)</Label>\n                  <div className=\"relative\">\n                    <Calendar className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      id=\"termMonths\"\n                      type=\"number\"\n                      placeholder=\"Enter loan term in months\"\n                      className=\"pl-10\"\n                      value={termMonths}\n                      onChange={(e) => setTermMonths(e.target.value)}\n                      data-testid=\"input-term-months\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-4\">\n                  <Button onClick={calculateLoan} data-testid=\"button-calculate\">\n                    Calculate Loan\n                  </Button>\n                  <Button variant=\"outline\" onClick={resetCalculator} data-testid=\"button-reset\">\n                    Reset\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Summary */}\n            {calculation && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Loan Summary</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                      <p className=\"text-sm text-muted-foreground\">Monthly Payment</p>\n                      <p className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n                        {formatCurrency(calculation.monthlyPayment)}\n                      </p>\n                    </div>\n                    \n                    <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg\">\n                      <p className=\"text-sm text-muted-foreground\">Total Amount</p>\n                      <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                        {formatCurrency(calculation.totalAmount)}\n                      </p>\n                    </div>\n                    \n                    <div className=\"bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg\">\n                      <p className=\"text-sm text-muted-foreground\">Total Interest</p>\n                      <p className=\"text-2xl font-bold text-orange-600 dark:text-orange-400\">\n                        {formatCurrency(calculation.totalInterest)}\n                      </p>\n                    </div>\n                    \n                    <div className=\"bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg\">\n                      <p className=\"text-sm text-muted-foreground\">Loan Amount</p>\n                      <p className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\n                        {formatCurrency(parseFloat(loanAmount))}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Payment Schedule */}\n          {calculation && (\n            <Card className=\"mt-8\">\n              <CardHeader>\n                <CardTitle>Payment Schedule</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"max-h-96 overflow-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Month</TableHead>\n                        <TableHead>Payment</TableHead>\n                        <TableHead>Principal</TableHead>\n                        <TableHead>Interest</TableHead>\n                        <TableHead>Remaining Balance</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {calculation.paymentSchedule.map((payment) => (\n                        <TableRow key={payment.month}>\n                          <TableCell className=\"font-medium\">{payment.month}</TableCell>\n                          <TableCell>{formatCurrency(payment.payment)}</TableCell>\n                          <TableCell>{formatCurrency(payment.principal)}</TableCell>\n                          <TableCell>{formatCurrency(payment.interest)}</TableCell>\n                          <TableCell>{formatCurrency(payment.balance)}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":9439},"client/src/pages/Loans.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { AdminSidebar } from \"@/components/AdminSidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, FileText } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function Loans() {\n  const [selectedGroupId, setSelectedGroupId] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n\n  const { data: loans = [], isLoading: loansLoading } = useQuery({\n    queryKey: [\"/api/loans\"],\n  });\n\n  const { data: groups = [] } = useQuery({\n    queryKey: [\"/api/groups\"],\n  });\n\n  const { data: members = [] } = useQuery({\n    queryKey: [\"/api/members\"],\n  });\n\n  const getMemberName = (memberId: string) => {\n    const member = members.find((m: any) => m.id === memberId);\n    return member ? `${member.firstName} ${member.lastName}` : \"Unknown Member\";\n  };\n\n  const getGroupName = (groupId: string) => {\n    const group = groups.find((g: any) => g.id === groupId);\n    return group ? group.name : \"Unknown Group\";\n  };\n\n  const filteredLoans = loans.filter((loan: any) => {\n    const matchesGroup = selectedGroupId === \"all\" || loan.groupId === selectedGroupId;\n    const matchesStatus = selectedStatus === \"all\" || loan.status === selectedStatus;\n    return matchesGroup && matchesStatus;\n  });\n\n  const getStatusStyle = (status: string) => {\n    const styles = {\n      pending: \"bg-yellow-100 text-yellow-800\",\n      approved: \"bg-blue-100 text-blue-800\",\n      active: \"bg-green-100 text-green-800\",\n      completed: \"bg-gray-100 text-gray-800\",\n      defaulted: \"bg-red-100 text-red-800\",\n    };\n    return styles[status as keyof typeof styles] || \"bg-gray-100 text-gray-800\";\n  };\n\n  if (loansLoading) {\n    return (\n      <div className=\"min-h-screen flex\">\n        <AdminSidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-16 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\" data-testid=\"loans-page\">\n      <AdminSidebar />\n\n      <main className=\"flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"page-title\">Loans</h2>\n              <p className=\"text-muted-foreground\">Manage loan applications and disbursements</p>\n            </div>\n            <Button data-testid=\"button-new-loan\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Loan Application\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6 overflow-y-auto h-[calc(100vh-88px)]\">\n          {/* Filters */}\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Select value={selectedGroupId} onValueChange={setSelectedGroupId}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-group-filter\">\n                <SelectValue placeholder=\"Filter by group\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Groups</SelectItem>\n                {groups.map((group: any) => (\n                  <SelectItem key={group.id} value={group.id}>\n                    {group.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"approved\">Approved</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"defaulted\">Defaulted</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Loans Table */}\n          {filteredLoans.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 mx-auto bg-muted rounded-full flex items-center justify-center mb-4\">\n                <FileText className=\"w-12 h-12 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-foreground mb-2\">No loans found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {selectedGroupId !== \"all\" || selectedStatus !== \"all\" \n                  ? \"Try adjusting your filters\" \n                  : \"Process your first loan application to get started\"\n                }\n              </p>\n              {selectedGroupId === \"all\" && selectedStatus === \"all\" && (\n                <Button data-testid=\"button-first-loan\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  First Loan Application\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"bg-card rounded-lg border border-border overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted/50\">\n                    <tr>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Member</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Group</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Amount</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Interest Rate</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Term</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Status</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Application Date</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredLoans.map((loan: any) => (\n                      <tr \n                        key={loan.id} \n                        className=\"border-b border-border hover:bg-muted/25\"\n                        data-testid={`loan-row-${loan.id}`}\n                      >\n                        <td className=\"p-4 text-sm text-foreground\" data-testid={`loan-member-${loan.id}`}>\n                          {getMemberName(loan.memberId)}\n                        </td>\n                        <td className=\"p-4 text-sm text-foreground\" data-testid={`loan-group-${loan.id}`}>\n                          {getGroupName(loan.groupId)}\n                        </td>\n                        <td className=\"p-4 text-sm font-medium text-foreground\" data-testid={`loan-amount-${loan.id}`}>\n                          ${parseFloat(loan.amount).toFixed(2)}\n                        </td>\n                        <td className=\"p-4 text-sm text-foreground\">\n                          {parseFloat(loan.interestRate).toFixed(1)}%\n                        </td>\n                        <td className=\"p-4 text-sm text-foreground\">\n                          {loan.termMonths} months\n                        </td>\n                        <td className=\"p-4\">\n                          <span \n                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusStyle(loan.status)}`}\n                            data-testid={`loan-status-${loan.id}`}\n                          >\n                            {loan.status.charAt(0).toUpperCase() + loan.status.slice(1)}\n                          </span>\n                        </td>\n                        <td className=\"p-4 text-sm text-foreground\">\n                          {format(new Date(loan.applicationDate), \"MMM dd, yyyy\")}\n                        </td>\n                        <td className=\"p-4\">\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-loan-${loan.id}`}>\n                            View\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9122},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { BarcodeScanner } from \"@/components/BarcodeScanner\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Camera, Phone, KeyRound, Users, UserCog } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport wekaLogo from \"@assets/WEKA_1756289094166.png\";\nimport dreamersLogo from \"@assets/updated logo the dreamers_1756291084041.png\";\n\ninterface LoginCredentials {\n  phoneOrUserId: string;\n  pin: string;\n}\n\ninterface MemberLoginData {\n  phone: string;\n  pin: string;\n}\n\nexport default function Login() {\n  const [credentials, setCredentials] = useState<LoginCredentials>({\n    phoneOrUserId: \"\",\n    pin: \"\",\n  });\n  const [memberCredentials, setMemberCredentials] = useState<MemberLoginData>({\n    phone: \"\",\n    pin: \"\",\n  });\n  const [showBarcodeScanner, setShowBarcodeScanner] = useState(false);\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginCredentials) => {\n      const response = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await response.json();\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/auth/user\"], user);\n      window.location.href = \"/\";\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Member login mutation\n  const memberLoginMutation = useMutation({\n    mutationFn: async (memberData: MemberLoginData) => {\n      const response = await fetch('/api/auth/member-login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(memberData),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Member login failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem('memberSession', JSON.stringify(data));\n      toast({\n        title: \"Login Successful\",\n        description: `Welcome back, ${data.member.firstName}!`,\n      });\n      window.location.href = `/member-dashboard/${data.member.id}`;\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Member Login Failed\", \n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const barcodeLoginMutation = useMutation({\n    mutationFn: async (barcodeData: string) => {\n      const response = await apiRequest(\"POST\", \"/api/login/barcode\", { barcodeData });\n      return await response.json();\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/auth/user\"], user);\n      toast({\n        title: \"Login Successful\",\n        description: \"Barcode login successful\",\n      });\n      window.location.href = \"/\";\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Barcode Login Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStaffLogin = () => {\n    if (!credentials.phoneOrUserId.trim() || !credentials.pin.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter your phone number/User ID and PIN\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    loginMutation.mutate(credentials);\n  };\n\n  const handleMemberLogin = () => {\n    if (!memberCredentials.phone.trim() || !memberCredentials.pin.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter your phone number and PIN\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (memberCredentials.pin.length !== 4) {\n      toast({\n        title: \"Invalid PIN\",\n        description: \"Member PIN must be 4 digits\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    memberLoginMutation.mutate(memberCredentials);\n  };\n\n  const handleBarcodeLogin = () => {\n    setShowBarcodeScanner(true);\n  };\n\n  const handleBarcodeScan = (barcodeData: string) => {\n    setShowBarcodeScanner(false);\n    \n    // Parse barcode data - expecting format: \"TD123456:123456\" (userId:pin)\n    const parsedData = parseBarcodeData(barcodeData);\n    if (parsedData) {\n      // Auto-fill staff form and login\n      setCredentials({\n        phoneOrUserId: parsedData.userId,\n        pin: parsedData.pin,\n      });\n      \n      // Auto-login with scanned credentials\n      loginMutation.mutate({\n        phoneOrUserId: parsedData.userId,\n        pin: parsedData.pin,\n      });\n    } else {\n      toast({\n        title: \"Invalid Barcode\",\n        description: \"Barcode format should be: TD123456:123456\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const parseBarcodeData = (data: string): { userId: string; pin: string } | null => {\n    try {\n      // Expected format: \"TD123456:123456\" (userId:pin)\n      const parts = data.split(':');\n      if (parts.length !== 2) {\n        return null;\n      }\n\n      const [userId, pin] = parts;\n      \n      // Validate userId format (should start with TD)\n      if (!userId.toUpperCase().startsWith('TD')) {\n        return null;\n      }\n\n      // Validate PIN (should be numeric)\n      if (!/^\\d+$/.test(pin)) {\n        return null;\n      }\n\n      return {\n        userId: userId.toUpperCase(),\n        pin: pin\n      };\n    } catch {\n      return null;\n    }\n  };\n\n  const handleCloseBarcodeScanner = () => {\n    setShowBarcodeScanner(false);\n  };\n\n  return (\n    <div \n      className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\"\n      data-testid=\"login-page\"\n    >\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <img \n              src={wekaLogo} \n              alt=\"WEKA Logo\" \n              className=\"w-16 h-16 object-contain\"\n            />\n            <img \n              src={dreamersLogo} \n              alt=\"The Dreamers Logo\" \n              className=\"w-16 h-16 object-contain\"\n            />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">WEKA</CardTitle>\n          <p className=\"text-muted-foreground\">\n            Wealth, Equity, Knowledge, and Accessibility\n          </p>\n        </CardHeader>\n\n        <CardContent>\n          <Tabs defaultValue=\"staff\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"staff\" className=\"flex items-center gap-2\">\n                <UserCog className=\"w-4 h-4\" />\n                Staff\n              </TabsTrigger>\n              <TabsTrigger value=\"member\" className=\"flex items-center gap-2\">\n                <Users className=\"w-4 h-4\" />\n                Member\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Staff Login Tab */}\n            <TabsContent value=\"staff\" className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phoneOrUserId\">Phone Number or User ID</Label>\n                  <div className=\"relative\">\n                    <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      id=\"phoneOrUserId\"\n                      type=\"text\"\n                      placeholder=\"Enter phone or User ID (TDXXXXXX)\"\n                      className=\"pl-10\"\n                      value={credentials.phoneOrUserId}\n                      onChange={(e) =>\n                        setCredentials((prev) => ({\n                          ...prev,\n                          phoneOrUserId: e.target.value,\n                        }))\n                      }\n                      data-testid=\"input-phone-userid\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"pin\">PIN</Label>\n                  <div className=\"relative\">\n                    <KeyRound className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      id=\"pin\"\n                      type=\"password\"\n                      placeholder=\"Enter 6-digit PIN\"\n                      className=\"pl-10\"\n                      maxLength={6}\n                      value={credentials.pin}\n                      onChange={(e) =>\n                        setCredentials((prev) => ({\n                          ...prev,\n                          pin: e.target.value,\n                        }))\n                      }\n                      data-testid=\"input-pin\"\n                    />\n                  </div>\n                </div>\n\n                <Button\n                  onClick={handleStaffLogin}\n                  className=\"w-full\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-staff-login\"\n                >\n                  {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                </Button>\n              </div>\n\n              <div className=\"relative\">\n                <Separator />\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <span className=\"bg-background px-2 text-xs text-muted-foreground\">\n                    OR\n                  </span>\n                </div>\n              </div>\n\n              {/* Barcode Login */}\n              <Button\n                variant=\"outline\"\n                onClick={handleBarcodeLogin}\n                className=\"w-full\"\n                disabled={barcodeLoginMutation.isPending}\n                data-testid=\"button-barcode-login\"\n              >\n                <Camera className=\"w-4 h-4 mr-2\" />\n                {barcodeLoginMutation.isPending ? \"Processing...\" : \"Scan ID Card\"}\n              </Button>\n            </TabsContent>\n\n            {/* Member Login Tab */}\n            <TabsContent value=\"member\" className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"memberPhone\">Phone Number</Label>\n                  <div className=\"relative\">\n                    <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      id=\"memberPhone\"\n                      type=\"tel\"\n                      placeholder=\"Enter your phone number\"\n                      className=\"pl-10\"\n                      value={memberCredentials.phone}\n                      onChange={(e) =>\n                        setMemberCredentials((prev) => ({\n                          ...prev,\n                          phone: e.target.value,\n                        }))\n                      }\n                      data-testid=\"input-member-phone\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"memberPin\">PIN</Label>\n                  <div className=\"relative\">\n                    <KeyRound className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      id=\"memberPin\"\n                      type=\"password\"\n                      placeholder=\"Enter 4-digit PIN\"\n                      className=\"pl-10\"\n                      maxLength={4}\n                      value={memberCredentials.pin}\n                      onChange={(e) =>\n                        setMemberCredentials((prev) => ({\n                          ...prev,\n                          pin: e.target.value,\n                        }))\n                      }\n                      data-testid=\"input-member-pin\"\n                    />\n                  </div>\n                </div>\n\n                <Button\n                  onClick={handleMemberLogin}\n                  className=\"w-full\"\n                  disabled={memberLoginMutation.isPending}\n                  data-testid=\"button-member-login\"\n                >\n                  {memberLoginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                </Button>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n\n      {/* Barcode Scanner */}\n      <BarcodeScanner\n        isOpen={showBarcodeScanner}\n        onScan={handleBarcodeScan}\n        onClose={handleCloseBarcodeScanner}\n      />\n    </div>\n  );\n}","size_bytes":13044},"client/src/pages/Meetings.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { AdminSidebar } from \"@/components/AdminSidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScheduleMeetingModal } from \"@/components/modals/ScheduleMeetingModal\";\nimport { MeetingCountdown } from \"@/components/MeetingCountdown\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Plus, Calendar, Clock, MapPin, Bell, Users, AlertCircle } from \"lucide-react\";\nimport { format, isToday, isTomorrow, differenceInHours } from \"date-fns\";\n\nexport default function Meetings() {\n  const [selectedGroupId, setSelectedGroupId] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [isScheduleModalOpen, setIsScheduleModalOpen] = useState(false);\n  const { user } = useAuth();\n\n  // Check if user can schedule meetings\n  const canScheduleMeetings = user?.role === 'admin' || \n    ['chairman', 'secretary', 'finance'].includes(user?.groupRole || '');\n\n  const { data: meetings = [], isLoading: meetingsLoading } = useQuery({\n    queryKey: [\"/api/meetings\"],\n  });\n\n  const { data: groups = [] } = useQuery({\n    queryKey: [\"/api/groups\"],\n  });\n\n  const getGroupName = (groupId: string) => {\n    const group = (groups as any[]).find((g: any) => g.id === groupId);\n    return group ? group.name : \"Unknown Group\";\n  };\n\n  const filteredMeetings = (meetings as any[]).filter((meeting: any) => {\n    const matchesGroup = selectedGroupId === \"all\" || meeting.groupId === selectedGroupId;\n    const matchesStatus = selectedStatus === \"all\" || meeting.status === selectedStatus;\n    return matchesGroup && matchesStatus;\n  });\n\n  // Separate upcoming meetings with priority for notifications\n  const upcomingMeetingsWithAlarms = (meetings as any[]).filter((meeting: any) => {\n    const meetingDate = new Date(meeting.date);\n    const now = new Date();\n    const hoursUntil = differenceInHours(meetingDate, now);\n    return meetingDate > now && meeting.status === 'scheduled' && hoursUntil <= 24;\n  }).sort((a: any, b: any) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n  const getStatusStyle = (status: string) => {\n    const styles = {\n      scheduled: \"bg-blue-100 text-blue-800\",\n      completed: \"bg-green-100 text-green-800\",\n      cancelled: \"bg-red-100 text-red-800\",\n    };\n    return styles[status as keyof typeof styles] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const upcomingMeetings = (meetings as any[]).filter((meeting: any) => {\n    const meetingDate = new Date(meeting.date);\n    const now = new Date();\n    return meetingDate > now && meeting.status === 'scheduled';\n  }).slice(0, 3);\n\n  if (meetingsLoading) {\n    return (\n      <div className=\"min-h-screen flex\">\n        <AdminSidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-16 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\" data-testid=\"meetings-page\">\n      <AdminSidebar />\n\n      <main className=\"flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"page-title\">Meetings</h2>\n              <p className=\"text-muted-foreground\">Schedule and manage group meetings</p>\n            </div>\n            {canScheduleMeetings ? (\n              <Button \n                onClick={() => setIsScheduleModalOpen(true)}\n                data-testid=\"button-schedule-meeting\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Schedule Meeting\n              </Button>\n            ) : (\n              <Badge variant=\"secondary\">\n                <Users className=\"w-3 h-3 mr-1\" />\n                View Only Access\n              </Badge>\n            )}\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6 overflow-y-auto h-[calc(100vh-88px)]\">\n          {/* Meeting Alarms - Priority Notifications */}\n          {upcomingMeetingsWithAlarms.length > 0 && (\n            <div className=\"bg-gradient-to-r from-orange-50 to-yellow-50 dark:from-orange-950/20 dark:to-yellow-950/20 rounded-lg border border-orange-200 dark:border-orange-800 p-6 mb-6\">\n              <div className=\"flex items-center gap-3 mb-4\">\n                <Bell className=\"h-6 w-6 text-orange-600 animate-bounce\" />\n                <h3 className=\"text-lg font-semibold text-orange-800 dark:text-orange-200\">\n                  🔔 Meeting Alerts & Countdowns\n                </h3>\n                <Badge variant=\"destructive\" className=\"animate-pulse\">\n                  {upcomingMeetingsWithAlarms.length} URGENT\n                </Badge>\n              </div>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                {upcomingMeetingsWithAlarms.slice(0, 2).map((meeting: any) => (\n                  <MeetingCountdown\n                    key={meeting.id}\n                    meeting={meeting}\n                    groupName={getGroupName(meeting.groupId)}\n                  />\n                ))}\n              </div>\n              {upcomingMeetingsWithAlarms.length > 2 && (\n                <div className=\"mt-4 text-center\">\n                  <p className=\"text-sm text-orange-700 dark:text-orange-300\">\n                    And {upcomingMeetingsWithAlarms.length - 2} more meetings within 24 hours...\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Regular Upcoming Meetings Card */}\n          {upcomingMeetings.length > 0 && (\n            <div className=\"bg-card rounded-lg border border-border p-6 mb-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Upcoming Meetings</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {upcomingMeetings.map((meeting: any) => (\n                  <div \n                    key={meeting.id} \n                    className=\"p-4 border border-border rounded-lg hover:bg-muted/25 transition-colors\"\n                    data-testid={`upcoming-meeting-${meeting.id}`}\n                  >\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h4 className=\"font-medium text-foreground\" data-testid={`meeting-group-${meeting.id}`}>\n                        {getGroupName(meeting.groupId)}\n                      </h4>\n                      <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                        Upcoming\n                      </span>\n                    </div>\n                    <div className=\"space-y-2 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"w-4 h-4\" />\n                        <span>{format(new Date(meeting.date), \"MMM dd, yyyy\")}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"w-4 h-4\" />\n                        <span>{format(new Date(meeting.date), \"h:mm a\")}</span>\n                      </div>\n                      {meeting.location && (\n                        <div className=\"flex items-center gap-2\">\n                          <MapPin className=\"w-4 h-4\" />\n                          <span className=\"truncate\">{meeting.location}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Filters */}\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Select value={selectedGroupId} onValueChange={setSelectedGroupId}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-group-filter\">\n                <SelectValue placeholder=\"Filter by group\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Groups</SelectItem>\n                {(groups as any[]).map((group: any) => (\n                  <SelectItem key={group.id} value={group.id}>\n                    {group.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Meetings Table */}\n          {filteredMeetings.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 mx-auto bg-muted rounded-full flex items-center justify-center mb-4\">\n                <Calendar className=\"w-12 h-12 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-foreground mb-2\">No meetings found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {selectedGroupId !== \"all\" || selectedStatus !== \"all\" \n                  ? \"Try adjusting your filters\" \n                  : \"Schedule your first group meeting to get started\"\n                }\n              </p>\n              {selectedGroupId === \"all\" && selectedStatus === \"all\" && canScheduleMeetings && (\n                <Button \n                  onClick={() => setIsScheduleModalOpen(true)}\n                  data-testid=\"button-first-meeting\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Schedule First Meeting\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"bg-card rounded-lg border border-border overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted/50\">\n                    <tr>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Group</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Date & Time</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Location</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Attendees</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Status</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredMeetings.map((meeting: any) => (\n                      <tr \n                        key={meeting.id} \n                        className=\"border-b border-border hover:bg-muted/25\"\n                        data-testid={`meeting-row-${meeting.id}`}\n                      >\n                        <td className=\"p-4 text-sm text-foreground\" data-testid={`meeting-group-${meeting.id}`}>\n                          {getGroupName(meeting.groupId)}\n                        </td>\n                        <td className=\"p-4 text-sm text-foreground\">\n                          <div>\n                            <div className=\"font-medium\">\n                              {format(new Date(meeting.date), \"MMM dd, yyyy\")}\n                            </div>\n                            <div className=\"text-muted-foreground\">\n                              {format(new Date(meeting.date), \"h:mm a\")}\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"p-4 text-sm text-foreground\">\n                          {meeting.location || \"Not specified\"}\n                        </td>\n                        <td className=\"p-4 text-sm text-foreground\">\n                          {meeting.attendees ? meeting.attendees.length : 0} attendees\n                        </td>\n                        <td className=\"p-4\">\n                          <span \n                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusStyle(meeting.status)}`}\n                            data-testid={`meeting-status-${meeting.id}`}\n                          >\n                            {meeting.status.charAt(0).toUpperCase() + meeting.status.slice(1)}\n                          </span>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"flex items-center gap-2\">\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-meeting-${meeting.id}`}>\n                              View\n                            </Button>\n                            {meeting.status === 'scheduled' && (\n                              <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-meeting-${meeting.id}`}>\n                                Edit\n                              </Button>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n        </div>\n      </main>\n\n      {/* Schedule Meeting Modal */}\n      <ScheduleMeetingModal\n        open={isScheduleModalOpen}\n        onOpenChange={setIsScheduleModalOpen}\n      />\n    </div>\n  );\n}\n","size_bytes":14514},"client/src/pages/Members.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { AdminSidebar } from \"@/components/AdminSidebar\";\nimport { NewMemberModal } from \"@/components/modals/NewMemberModal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Search, User } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { formatCurrency } from \"@/utils/currency\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Members() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedGroupId, setSelectedGroupId] = useState<string>(\"all\");\n  const [isNewMemberModalOpen, setIsNewMemberModalOpen] = useState(false);\n  const [memberSession, setMemberSession] = useState<any>(null);\n  const { user } = useAuth();\n\n  // Load member session for group context\n  useEffect(() => {\n    const sessionData = localStorage.getItem('memberSession');\n    if (sessionData) {\n      const session = JSON.parse(sessionData);\n      setMemberSession(session);\n    }\n  }, []);\n\n  // Determine if this is a group leader or admin\n  const isAdmin = !!user;\n  const isGroupLeader = memberSession && ['chairman', 'secretary', 'finance'].includes(memberSession.member?.groupRole);\n  const userGroupId = memberSession?.member?.groupId;\n\n  // For group leaders, fetch only their group members; for admins, fetch all members\n  const { data: members = [], isLoading: membersLoading } = useQuery({\n    queryKey: isGroupLeader ? [\"/api/groups\", userGroupId, \"members\"] : [\"/api/members\"],\n    queryFn: async () => {\n      if (isGroupLeader && userGroupId) {\n        const response = await fetch(`/api/groups/${userGroupId}/members`);\n        if (!response.ok) throw new Error('Failed to fetch group members');\n        return response.json();\n      } else {\n        // For admins or fallback\n        const response = await fetch('/api/members');\n        if (!response.ok) throw new Error('Failed to fetch members');\n        return response.json();\n      }\n    },\n    enabled: isAdmin || (isGroupLeader && !!userGroupId),\n  });\n\n  const { data: groups = [], isLoading: groupsLoading } = useQuery({\n    queryKey: [\"/api/groups\"],\n    enabled: !isGroupLeader, // Only fetch groups for admins\n  });\n\n  const getGroupName = (groupId: string) => {\n    const group = groups.find((g: any) => g.id === groupId);\n    return group ? group.name : \"Unknown Group\";\n  };\n\n  const filteredMembers = members.filter((member: any) => {\n    const matchesSearch = \n      `${member.firstName} ${member.lastName}`.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      member.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      member.phone?.includes(searchTerm);\n    \n    // For group leaders, don't filter by group (already filtered by API)\n    // For admins, filter by selected group\n    const matchesGroup = isGroupLeader || selectedGroupId === \"all\" || member.groupId === selectedGroupId;\n    \n    return matchesSearch && matchesGroup;\n  });\n\n  if (membersLoading || (!isGroupLeader && groupsLoading)) {\n    return (\n      <div className=\"min-h-screen flex\">\n        <AdminSidebar userRole={memberSession?.member?.groupRole || 'admin'} />\n        <main className=\"flex-1 p-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-16 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\" data-testid=\"members-page\">\n      <AdminSidebar userRole={memberSession?.member?.groupRole || 'admin'} />\n\n      <main className=\"flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"page-title\">\n                {isGroupLeader ? 'Group Members' : 'All Members'}\n              </h2>\n              <p className=\"text-muted-foreground\">\n                {isGroupLeader ? 'Manage members in your group' : 'Manage all group members'}\n              </p>\n            </div>\n            <Button onClick={() => setIsNewMemberModalOpen(true)} data-testid=\"button-add-member\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Member\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6 overflow-y-auto h-[calc(100vh-88px)]\">\n          {/* Filters */}\n          <div className=\"flex items-center gap-4 mb-6\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search members...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-search-members\"\n              />\n            </div>\n            {/* Only show group filter for admins */}\n            {!isGroupLeader && (\n              <Select value={selectedGroupId} onValueChange={setSelectedGroupId}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-group-filter\">\n                  <SelectValue placeholder=\"Filter by group\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Groups</SelectItem>\n                  {(groups as any[]).map((group: any) => (\n                    <SelectItem key={group.id} value={group.id}>\n                      {group.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            )}\n          </div>\n\n          {/* Members Table */}\n          {filteredMembers.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 mx-auto bg-muted rounded-full flex items-center justify-center mb-4\">\n                <User className=\"w-12 h-12 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-foreground mb-2\">No members found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm || selectedGroupId !== \"all\" \n                  ? \"Try adjusting your filters\" \n                  : \"Add your first member to get started\"\n                }\n              </p>\n              {!searchTerm && selectedGroupId === \"all\" && (\n                <Button data-testid=\"button-add-first-member\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add First Member\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"bg-card rounded-lg border border-border overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted/50\">\n                    <tr>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Name</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Contact</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Group</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Role</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Join Date</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Savings Balance</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Status</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredMembers.map((member: any) => (\n                      <tr \n                        key={member.id} \n                        className=\"border-b border-border hover:bg-muted/25\"\n                        data-testid={`member-row-${member.id}`}\n                      >\n                        <td className=\"p-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n                              <span className=\"text-xs font-medium text-secondary-foreground\">\n                                {member.firstName[0]}{member.lastName[0]}\n                              </span>\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-foreground\" data-testid={`member-name-${member.id}`}>\n                                {member.firstName} {member.lastName}\n                              </p>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"text-sm\">\n                            {member.email && (\n                              <p className=\"text-foreground\">{member.email}</p>\n                            )}\n                            {member.phone && (\n                              <p className=\"text-muted-foreground\">{member.phone}</p>\n                            )}\n                          </div>\n                        </td>\n                        <td className=\"p-4 text-sm text-foreground\" data-testid={`member-group-${member.id}`}>\n                          {getGroupName(member.groupId)}\n                        </td>\n                        <td className=\"p-4\">\n                          <Badge \n                            variant={\n                              member.groupRole === 'chairman' ? 'default' :\n                              member.groupRole === 'finance' ? 'secondary' :\n                              member.groupRole === 'secretary' ? 'outline' : \n                              'destructive'\n                            }\n                          >\n                            {member.groupRole?.charAt(0).toUpperCase() + member.groupRole?.slice(1) || 'Member'}\n                          </Badge>\n                        </td>\n                        <td className=\"p-4 text-sm text-foreground\">\n                          {format(new Date(member.joinDate), \"MMM dd, yyyy\")}\n                        </td>\n                        <td className=\"p-4 text-sm font-medium text-foreground\" data-testid={`member-balance-${member.id}`}>\n                          {formatCurrency(parseFloat(member.savingsBalance || 0))}\n                        </td>\n                        <td className=\"p-4\">\n                          <span \n                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                              member.isActive \n                                ? 'bg-green-100 text-green-800' \n                                : 'bg-gray-100 text-gray-800'\n                            }`}\n                          >\n                            {member.isActive ? 'Active' : 'Inactive'}\n                          </span>\n                        </td>\n                        <td className=\"p-4\">\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-member-${member.id}`}>\n                            View\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n        </div>\n      </main>\n\n      {/* New Member Modal */}\n      {isGroupLeader && memberSession?.member ? (\n        <NewMemberModal \n          open={isNewMemberModalOpen} \n          onOpenChange={setIsNewMemberModalOpen}\n          groupId={memberSession.member.groupId}\n          groupName={memberSession.member.groupName}\n        />\n      ) : isAdmin && selectedGroupId !== \"all\" ? (\n        <NewMemberModal \n          open={isNewMemberModalOpen} \n          onOpenChange={setIsNewMemberModalOpen}\n          groupId={selectedGroupId}\n          groupName={groups?.find((g: any) => g.id === selectedGroupId)?.name || \"Selected Group\"}\n        />\n      ) : null}\n    </div>\n  );\n}\n","size_bytes":12751},"client/src/pages/Reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { AdminSidebar } from \"@/components/AdminSidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { formatCurrency } from \"@/utils/currency\";\nimport { \n  BarChart3, \n  Download, \n  Filter, \n  Users, \n  DollarSign, \n  Building, \n  Calendar,\n  FileText,\n  TrendingUp\n} from \"lucide-react\";\n\nexport default function Reports() {\n  const [filters, setFilters] = useState({\n    groupId: \"all\",\n    location: \"\",\n    dateFrom: \"\",\n    dateTo: \"\",\n    gender: \"all\",\n    reportType: \"groups\"\n  });\n\n  // Fetch data for filters\n  const { data: groups = [] } = useQuery({\n    queryKey: [\"/api/groups\"],\n  });\n\n  const { data: locations = [] } = useQuery({\n    queryKey: [\"/api/groups/locations\"],\n  });\n\n  // Fetch report data based on filters\n  const { data: reportData = [], isLoading } = useQuery({\n    queryKey: [\"/api/reports\", filters.reportType, filters],\n    enabled: true,\n  });\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const exportReport = () => {\n    // TODO: Implement export functionality\n    console.log(\"Exporting report with filters:\", filters);\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      groupId: \"all\",\n      location: \"\",\n      dateFrom: \"\",\n      dateTo: \"\",\n      gender: \"all\",\n      reportType: \"groups\"\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex\" data-testid=\"reports-page\">\n      <AdminSidebar />\n      \n      <main className=\"flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"page-title\">\n                Reports & Analytics\n              </h2>\n              <p className=\"text-muted-foreground\">\n                Comprehensive reporting with advanced filtering capabilities\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button variant=\"outline\" onClick={clearFilters} data-testid=\"button-clear-filters\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Clear Filters\n              </Button>\n              <Button onClick={exportReport} data-testid=\"button-export-report\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Report\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"p-6 overflow-y-auto h-[calc(100vh-88px)]\">\n          {/* Filters Section */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Filter className=\"w-5 h-5\" />\n                Report Filters\n              </CardTitle>\n              <CardDescription>\n                Use filters to customize your report data and view specific insights\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"report-type\">Report Type</Label>\n                  <Select \n                    value={filters.reportType} \n                    onValueChange={(value) => handleFilterChange(\"reportType\", value)}\n                  >\n                    <SelectTrigger id=\"report-type\" data-testid=\"select-report-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"groups\">Groups Report</SelectItem>\n                      <SelectItem value=\"members\">Members Report</SelectItem>\n                      <SelectItem value=\"financial\">Financial Report</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"group-filter\">Group</Label>\n                  <Select \n                    value={filters.groupId} \n                    onValueChange={(value) => handleFilterChange(\"groupId\", value)}\n                  >\n                    <SelectTrigger id=\"group-filter\" data-testid=\"select-group\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Groups</SelectItem>\n                      {groups.map((group: any) => (\n                        <SelectItem key={group.id} value={group.id}>\n                          {group.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"location-filter\">Location</Label>\n                  <Input \n                    id=\"location-filter\"\n                    placeholder=\"Enter location\"\n                    value={filters.location}\n                    onChange={(e) => handleFilterChange(\"location\", e.target.value)}\n                    data-testid=\"input-location\"\n                  />\n                </div>\n\n                {filters.reportType === \"members\" && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"gender-filter\">Gender</Label>\n                    <Select \n                      value={filters.gender} \n                      onValueChange={(value) => handleFilterChange(\"gender\", value)}\n                    >\n                      <SelectTrigger id=\"gender-filter\" data-testid=\"select-gender\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Genders</SelectItem>\n                        <SelectItem value=\"M\">Male</SelectItem>\n                        <SelectItem value=\"F\">Female</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"date-from\">Date From</Label>\n                  <Input \n                    id=\"date-from\"\n                    type=\"date\"\n                    value={filters.dateFrom}\n                    onChange={(e) => handleFilterChange(\"dateFrom\", e.target.value)}\n                    data-testid=\"input-date-from\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"date-to\">Date To</Label>\n                  <Input \n                    id=\"date-to\"\n                    type=\"date\"\n                    value={filters.dateTo}\n                    onChange={(e) => handleFilterChange(\"dateTo\", e.target.value)}\n                    data-testid=\"input-date-to\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Report Content */}\n          <Tabs value={filters.reportType} onValueChange={(value) => handleFilterChange(\"reportType\", value)}>\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"groups\" data-testid=\"tab-groups\">Groups Report</TabsTrigger>\n              <TabsTrigger value=\"members\" data-testid=\"tab-members\">Members Report</TabsTrigger>\n              <TabsTrigger value=\"financial\" data-testid=\"tab-financial\">Financial Report</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"groups\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Building className=\"w-5 h-5\" />\n                    Groups Overview\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {isLoading ? (\n                    <div className=\"animate-pulse space-y-4\">\n                      {[...Array(5)].map((_, i) => (\n                        <div key={i} className=\"h-12 bg-muted rounded\"></div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b\">\n                            <th className=\"text-left p-3 font-semibold\">Group Name</th>\n                            <th className=\"text-left p-3 font-semibold\">Location</th>\n                            <th className=\"text-left p-3 font-semibold\">Members</th>\n                            <th className=\"text-left p-3 font-semibold\">Total Savings</th>\n                            <th className=\"text-left p-3 font-semibold\">Available Cash</th>\n                            <th className=\"text-left p-3 font-semibold\">Interest Rate</th>\n                            <th className=\"text-left p-3 font-semibold\">Cycle (Months)</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {reportData.map((group: any, index: number) => (\n                            <tr key={index} className=\"border-b hover:bg-muted/50\">\n                              <td className=\"p-3 font-medium\">{group.name}</td>\n                              <td className=\"p-3\">{group.location}</td>\n                              <td className=\"p-3\">\n                                <Badge variant=\"secondary\">{group.memberCount || 0}</Badge>\n                              </td>\n                              <td className=\"p-3 font-semibold text-green-600\">\n                                {formatCurrency(parseFloat(group.totalSavings || 0))}\n                              </td>\n                              <td className=\"p-3 font-semibold text-blue-600\">\n                                {formatCurrency(parseFloat(group.availableCash || 0))}\n                              </td>\n                              <td className=\"p-3\">\n                                <Badge>{group.interestRate}%</Badge>\n                              </td>\n                              <td className=\"p-3\">\n                                <Badge variant=\"outline\">{group.cycleMonths} months</Badge>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                      {reportData.length === 0 && (\n                        <div className=\"text-center py-8 text-muted-foreground\">\n                          No groups found matching the selected criteria\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"members\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"w-5 h-5\" />\n                    Members Overview\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {isLoading ? (\n                    <div className=\"animate-pulse space-y-4\">\n                      {[...Array(5)].map((_, i) => (\n                        <div key={i} className=\"h-12 bg-muted rounded\"></div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b\">\n                            <th className=\"text-left p-3 font-semibold\">Name</th>\n                            <th className=\"text-left p-3 font-semibold\">Gender</th>\n                            <th className=\"text-left p-3 font-semibold\">Group</th>\n                            <th className=\"text-left p-3 font-semibold\">Location</th>\n                            <th className=\"text-left p-3 font-semibold\">Savings Balance</th>\n                            <th className=\"text-left p-3 font-semibold\">Join Date</th>\n                            <th className=\"text-left p-3 font-semibold\">Status</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {reportData.map((member: any, index: number) => (\n                            <tr key={index} className=\"border-b hover:bg-muted/50\">\n                              <td className=\"p-3 font-medium\">\n                                {member.firstName} {member.lastName}\n                              </td>\n                              <td className=\"p-3\">\n                                <Badge variant={member.gender === 'M' ? 'default' : 'secondary'}>\n                                  {member.gender === 'M' ? 'Male' : 'Female'}\n                                </Badge>\n                              </td>\n                              <td className=\"p-3\">{member.groupName}</td>\n                              <td className=\"p-3\">{member.groupLocation}</td>\n                              <td className=\"p-3 font-semibold text-green-600\">\n                                {formatCurrency(parseFloat(member.savingsBalance || 0))}\n                              </td>\n                              <td className=\"p-3\">\n                                {new Date(member.joinDate).toLocaleDateString()}\n                              </td>\n                              <td className=\"p-3\">\n                                <Badge variant={member.isActive ? 'default' : 'secondary'}>\n                                  {member.isActive ? 'Active' : 'Inactive'}\n                                </Badge>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                      {reportData.length === 0 && (\n                        <div className=\"text-center py-8 text-muted-foreground\">\n                          No members found matching the selected criteria\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"financial\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"w-5 h-5\" />\n                    Financial Overview\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {isLoading ? (\n                    <div className=\"animate-pulse space-y-4\">\n                      {[...Array(5)].map((_, i) => (\n                        <div key={i} className=\"h-12 bg-muted rounded\"></div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b\">\n                            <th className=\"text-left p-3 font-semibold\">Group</th>\n                            <th className=\"text-left p-3 font-semibold\">Transaction Type</th>\n                            <th className=\"text-left p-3 font-semibold\">Total Amount</th>\n                            <th className=\"text-left p-3 font-semibold\">Transaction Count</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {reportData.map((financial: any, index: number) => (\n                            <tr key={index} className=\"border-b hover:bg-muted/50\">\n                              <td className=\"p-3 font-medium\">{financial.groupName}</td>\n                              <td className=\"p-3\">\n                                <Badge \n                                  variant={financial.transactionType === 'deposit' ? 'default' : 'destructive'}\n                                >\n                                  {financial.transactionType}\n                                </Badge>\n                              </td>\n                              <td className=\"p-3 font-semibold\">\n                                {formatCurrency(parseFloat(financial.totalAmount || 0))}\n                              </td>\n                              <td className=\"p-3\">\n                                <Badge variant=\"secondary\">{financial.transactionCount}</Badge>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                      {reportData.length === 0 && (\n                        <div className=\"text-center py-8 text-muted-foreground\">\n                          No financial data found matching the selected criteria\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":17800},"client/src/pages/Transactions.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { AdminSidebar } from \"@/components/AdminSidebar\";\nimport { TransactionRow } from \"@/components/TransactionRow\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, DollarSign } from \"lucide-react\";\n\nexport default function Transactions() {\n  const [selectedGroupId, setSelectedGroupId] = useState<string>(\"all\");\n  const [selectedType, setSelectedType] = useState<string>(\"all\");\n\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  const { data: groups = [] } = useQuery({\n    queryKey: [\"/api/groups\"],\n  });\n\n  const { data: members = [] } = useQuery({\n    queryKey: [\"/api/members\"],\n  });\n\n  const getMemberName = (memberId: string) => {\n    const member = members.find((m: any) => m.id === memberId);\n    return member ? `${member.firstName} ${member.lastName}` : \"Unknown Member\";\n  };\n\n  const getGroupName = (groupId: string) => {\n    const group = groups.find((g: any) => g.id === groupId);\n    return group ? group.name : \"Unknown Group\";\n  };\n\n  const filteredTransactions = transactions.filter((transaction: any) => {\n    const matchesGroup = selectedGroupId === \"all\" || transaction.groupId === selectedGroupId;\n    const matchesType = selectedType === \"all\" || transaction.type === selectedType;\n    return matchesGroup && matchesType;\n  });\n\n  if (transactionsLoading) {\n    return (\n      <div className=\"min-h-screen flex\">\n        <AdminSidebar />\n        <main className=\"flex-1 p-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-16 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex\" data-testid=\"transactions-page\">\n      <AdminSidebar />\n\n      <main className=\"flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"page-title\">Transactions</h2>\n              <p className=\"text-muted-foreground\">View and manage all financial transactions</p>\n            </div>\n            <Button data-testid=\"button-record-transaction\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Record Transaction\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6 overflow-y-auto h-[calc(100vh-88px)]\">\n          {/* Filters */}\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Select value={selectedGroupId} onValueChange={setSelectedGroupId}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-group-filter\">\n                <SelectValue placeholder=\"Filter by group\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Groups</SelectItem>\n                {groups.map((group: any) => (\n                  <SelectItem key={group.id} value={group.id}>\n                    {group.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedType} onValueChange={setSelectedType}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-type-filter\">\n                <SelectValue placeholder=\"Filter by type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"deposit\">Deposit</SelectItem>\n                <SelectItem value=\"withdrawal\">Withdrawal</SelectItem>\n                <SelectItem value=\"loan_payment\">Loan Payment</SelectItem>\n                <SelectItem value=\"loan_disbursement\">Loan Disbursement</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Transactions Table */}\n          {filteredTransactions.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 mx-auto bg-muted rounded-full flex items-center justify-center mb-4\">\n                <DollarSign className=\"w-12 h-12 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-foreground mb-2\">No transactions found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {selectedGroupId !== \"all\" || selectedType !== \"all\" \n                  ? \"Try adjusting your filters\" \n                  : \"Record your first transaction to get started\"\n                }\n              </p>\n              {selectedGroupId === \"all\" && selectedType === \"all\" && (\n                <Button data-testid=\"button-record-first-transaction\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Record First Transaction\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"bg-card rounded-lg border border-border overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted/50\">\n                    <tr>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Date</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Member</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Type</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Amount</th>\n                      <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Group</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredTransactions.map((transaction: any) => (\n                      <TransactionRow\n                        key={transaction.id}\n                        transaction={transaction}\n                        memberName={getMemberName(transaction.memberId)}\n                        groupName={getGroupName(transaction.groupId)}\n                      />\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":6720},"client/src/pages/UserManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AdminSidebar } from \"@/components/AdminSidebar\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Users, UserCheck, UserX, QrCode } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst createUserSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  phone: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  email: z.string().email().optional().or(z.literal(\"\")),\n  role: z.enum([\"admin\", \"field_monitor\", \"field_attendant\"]),\n  location: z.string().optional(),\n  userId: z.string().optional(), // Optional, will be auto-generated if not provided\n  pin: z.string().length(6, \"PIN must be exactly 6 digits\"),\n});\n\ntype CreateUserData = z.infer<typeof createUserSchema>;\n\nexport default function UserManagement() {\n  const [activeTab, setActiveTab] = useState(\"users\");\n  const { toast } = useToast();\n\n  const { register, handleSubmit, reset, watch, setValue, formState: { errors } } = useForm<CreateUserData>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      role: \"field_attendant\",\n      pin: \"\",\n    },\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n    retry: false,\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: CreateUserData) => {\n      const response = await apiRequest(\"POST\", \"/api/users\", userData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      reset();\n      toast({\n        title: \"Success\",\n        description: \"User created successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateRandomUserId = () => {\n    const randomNum = Math.floor(100000 + Math.random() * 900000);\n    return `TD${randomNum}`;\n  };\n\n  const generateUserId = () => {\n    const newUserId = generateRandomUserId();\n    setValue(\"userId\", newUserId);\n  };\n\n  const generateRandomPin = () => {\n    const randomPin = Math.floor(100000 + Math.random() * 900000).toString();\n    setValue(\"pin\", randomPin);\n  };\n\n  const onSubmit = (data: CreateUserData) => {\n    // Generate User ID if not provided\n    if (!data.userId) {\n      data.userId = generateRandomUserId();\n    }\n    createUserMutation.mutate(data);\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      case \"field_monitor\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n      case \"field_attendant\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <AdminSidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"p-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">User Management</h1>\n            <p className=\"text-muted-foreground\">Manage WEKA system users and their roles</p>\n          </div>\n\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n            <TabsList>\n              <TabsTrigger value=\"users\" className=\"flex items-center space-x-2\">\n                <Users className=\"w-4 h-4\" />\n                <span>All Users</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"create\" className=\"flex items-center space-x-2\">\n                <Plus className=\"w-4 h-4\" />\n                <span>Create User</span>\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"users\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Users className=\"w-5 h-5\" />\n                    <span>System Users</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>User ID</TableHead>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Phone</TableHead>\n                        <TableHead>Role</TableHead>\n                        <TableHead>Location</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {users.map((user: any) => (\n                        <TableRow key={user.id}>\n                          <TableCell className=\"font-mono\">{user.userId}</TableCell>\n                          <TableCell>{`${user.firstName} ${user.lastName}`}</TableCell>\n                          <TableCell>{user.phone}</TableCell>\n                          <TableCell>\n                            <Badge className={getRoleBadgeColor(user.role)}>\n                              {user.role.replace(\"_\", \" \").toUpperCase()}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>{user.location || \"—\"}</TableCell>\n                          <TableCell>\n                            {user.isActive ? (\n                              <Badge className=\"bg-green-100 text-green-800\">\n                                <UserCheck className=\"w-3 h-3 mr-1\" />\n                                Active\n                              </Badge>\n                            ) : (\n                              <Badge className=\"bg-red-100 text-red-800\">\n                                <UserX className=\"w-3 h-3 mr-1\" />\n                                Inactive\n                              </Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            <Button size=\"sm\" variant=\"outline\">\n                              <QrCode className=\"w-4 h-4 mr-1\" />\n                              Barcode\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"create\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Plus className=\"w-5 h-5\" />\n                    <span>Create New User</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"firstName\">First Name</Label>\n                        <Input\n                          id=\"firstName\"\n                          {...register(\"firstName\")}\n                          data-testid=\"input-first-name\"\n                        />\n                        {errors.firstName && (\n                          <p className=\"text-sm text-red-600\">{errors.firstName.message}</p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"lastName\">Last Name</Label>\n                        <Input\n                          id=\"lastName\"\n                          {...register(\"lastName\")}\n                          data-testid=\"input-last-name\"\n                        />\n                        {errors.lastName && (\n                          <p className=\"text-sm text-red-600\">{errors.lastName.message}</p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"phone\">Phone Number</Label>\n                        <Input\n                          id=\"phone\"\n                          type=\"tel\"\n                          {...register(\"phone\")}\n                          data-testid=\"input-phone\"\n                        />\n                        {errors.phone && (\n                          <p className=\"text-sm text-red-600\">{errors.phone.message}</p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email (Optional)</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          {...register(\"email\")}\n                          data-testid=\"input-email\"\n                        />\n                        {errors.email && (\n                          <p className=\"text-sm text-red-600\">{errors.email.message}</p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"role\">Role</Label>\n                        <Select onValueChange={(value) => setValue(\"role\", value as any)}>\n                          <SelectTrigger data-testid=\"select-role\">\n                            <SelectValue placeholder=\"Select role\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"admin\">Admin</SelectItem>\n                            <SelectItem value=\"field_monitor\">Field Monitor</SelectItem>\n                            <SelectItem value=\"field_attendant\">Field Attendant</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        {errors.role && (\n                          <p className=\"text-sm text-red-600\">{errors.role.message}</p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"location\">Location (Optional)</Label>\n                        <Input\n                          id=\"location\"\n                          {...register(\"location\")}\n                          data-testid=\"input-location\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"userId\">User ID</Label>\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            id=\"userId\"\n                            {...register(\"userId\")}\n                            placeholder=\"Auto-generated if empty\"\n                            data-testid=\"input-user-id\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={generateUserId}\n                            data-testid=\"button-generate-user-id\"\n                          >\n                            Generate\n                          </Button>\n                        </div>\n                        {errors.userId && (\n                          <p className=\"text-sm text-red-600\">{errors.userId.message}</p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"pin\">PIN (6 digits)</Label>\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            id=\"pin\"\n                            type=\"password\"\n                            maxLength={6}\n                            {...register(\"pin\")}\n                            data-testid=\"input-pin\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={generateRandomPin}\n                            data-testid=\"button-generate-pin\"\n                          >\n                            Generate\n                          </Button>\n                        </div>\n                        {errors.pin && (\n                          <p className=\"text-sm text-red-600\">{errors.pin.message}</p>\n                        )}\n                      </div>\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      disabled={createUserMutation.isPending}\n                      data-testid=\"button-create-user\"\n                    >\n                      {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":13938},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/utils/currency.ts":{"content":"// Currency formatting utilities for UGX\nexport function formatCurrency(amount: number | string): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('en-UG', {\n    style: 'currency',\n    currency: 'UGX',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(numAmount);\n}\n\nexport function formatNumber(amount: number | string): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('en-UG').format(numAmount);\n}","size_bytes":560},"client/src/components/modals/NewGroupModal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { insertGroupSchema, type InsertGroup } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface NewGroupModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function NewGroupModal({ open, onOpenChange }: NewGroupModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertGroup>({\n    resolver: zodResolver(insertGroupSchema.omit({ createdBy: true })),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      location: \"\",\n      registrationNumber: \"\",\n      meetingFrequency: \"monthly\",\n      maxMembers: 30,\n      cycleMonths: 12,\n      savingPerShare: \"0\",\n      interestRate: \"5.0\",\n      welfareAmount: \"0\",\n      mainActivity: \"\",\n      otherActivities: \"\",\n      registrationDate: new Date().toISOString().split('T')[0],\n      hasRunningBusiness: false,\n      businessName: \"\",\n      businessLocation: \"\",\n      currentInput: \"\",\n      isActive: true,\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: InsertGroup) => {\n      const response = await apiRequest(\"POST\", \"/api/groups\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/groups\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Group created successfully\",\n      });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create group\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertGroup) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"new-group-modal\">\n        <DialogHeader>\n          <DialogTitle>Create New Group</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"registrationDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"date\"\n                          {...field}\n                          data-testid=\"input-registration-date\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name of The Group</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"......................................................................\"\n                        data-testid=\"input-group-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"location\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Enter location\"\n                          data-testid=\"input-location\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"registrationNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Registration Number</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Enter registration number\"\n                          data-testid=\"input-registration-number\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"maxMembers\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Number of Members</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"5\"\n                          max=\"50\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          data-testid=\"input-max-members\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"cycleMonths\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Number of Months per Cycle</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"6\"\n                          max=\"24\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          data-testid=\"input-cycle-months\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"savingPerShare\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Current Saving (if available)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          step=\"0.01\"\n                          {...field}\n                          placeholder=\"0.00\"\n                          data-testid=\"input-current-saving\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"interestRate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Loan Interest Rate (%)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"50\"\n                          step=\"0.1\"\n                          {...field}\n                          placeholder=\"5.0\"\n                          data-testid=\"input-interest-rate\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"welfareAmount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Welfare Amount (UGX per member)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          step=\"1000\"\n                          {...field}\n                          placeholder=\"10000\"\n                          data-testid=\"input-welfare-amount\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Activities */}\n            <div className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"mainActivity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>What is your Main Activity as a Group</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        placeholder=\"Describe the main activity of the group\"\n                        rows={3}\n                        data-testid=\"input-main-activity\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"otherActivities\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Other Activities (if there are any)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        placeholder=\"Describe other activities if any\"\n                        rows={3}\n                        data-testid=\"input-other-activities\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <Separator />\n\n            {/* Business Information */}\n            <div className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"hasRunningBusiness\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Do the group have a running business (Business Group)?</FormLabel>\n                    <Select onValueChange={(value) => field.onChange(value === \"true\")} value={field.value?.toString()}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-has-business\">\n                          <SelectValue placeholder=\"Select an option\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"true\">Yes</SelectItem>\n                        <SelectItem value=\"false\">No</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {form.watch(\"hasRunningBusiness\") && (\n                <div className=\"space-y-4 pl-4 border-l-2 border-gray-200\">\n                  <FormField\n                    control={form.control}\n                    name=\"businessName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name of the Business</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"Enter business name\"\n                            data-testid=\"input-business-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"businessLocation\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Its Location</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"Enter business location\"\n                            data-testid=\"input-business-location\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"currentInput\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Current Input (funds, manpower, services, etc.)</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            {...field}\n                            placeholder=\"Describe current input in terms of funds, manpower, services, etc.\"\n                            rows={3}\n                            data-testid=\"input-current-input\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex space-x-3 pt-6\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-group\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1\"\n                disabled={mutation.isPending}\n                data-testid=\"button-create-group\"\n              >\n                {mutation.isPending ? \"Creating...\" : \"Create Group\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":15372},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst sidebarVariants = cva(\n  \"flex h-full w-full flex-col bg-sidebar text-sidebar-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"border-r border-sidebar-border\",\n        floating: \"border border-sidebar-border shadow-lg rounded-lg\",\n        inset: \"border-r border-sidebar-border\",\n      },\n      side: {\n        left: \"\",\n        right: \"border-l border-r-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      side: \"left\",\n    },\n  }\n)\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof sidebarVariants>\n>(({ className, variant, side, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"\"\n      className={cn(sidebarVariants({ variant, side }), className)}\n      {...props}\n    />\n  )\n})\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"content\"\n    className={cn(\"flex flex-1 flex-col gap-2 overflow-auto p-2\", className)}\n    {...props}\n  />\n))\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"header\"\n    className={cn(\"flex items-center border-b border-sidebar-border px-2.5 py-2\", className)}\n    {...props}\n  />\n))\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"footer\"\n    className={cn(\"flex items-center border-t border-sidebar-border px-2.5 py-2\", className)}\n    {...props}\n  />\n))\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group\"\n    className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n    {...props}\n  />\n))\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-label\"\n    className={cn(\n      \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    asChild?: boolean\n  }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.HTMLAttributes<HTMLUListElement>\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.HTMLAttributes<HTMLLIElement>\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]/sidebar-group:!size-8 group-data-[collapsible=icon]/sidebar-group:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]/sidebar-group:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<any>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    { asChild = false, isActive = false, variant = \"default\", size = \"default\", tooltip, className, ...props },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n\n    return (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground sm:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-skeleton\"\n    className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n    {...props}\n  >\n    {showIcon && (\n      <div className=\"flex h-4 w-4 rounded-sm bg-sidebar-primary/10\" />\n    )}\n    <div className=\"h-4 flex-1 max-w-[--skeleton-width] bg-sidebar-primary/10 rounded-sm\" />\n  </div>\n))\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.HTMLAttributes<HTMLUListElement>\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.HTMLAttributes<HTMLLIElement>\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-foreground/50\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n}\n","size_bytes":11137},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ThemeToggle.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useTheme } from \"@/hooks/useTheme\";\nimport { Moon, Sun, Palette } from \"lucide-react\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" data-testid=\"theme-toggle\">\n          {theme === \"light\" && <Sun className=\"h-4 w-4\" />}\n          {theme === \"dark\" && <Moon className=\"h-4 w-4\" />}\n          {theme === \"blue\" && <Palette className=\"h-4 w-4\" />}\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")} data-testid=\"theme-light\">\n          <Sun className=\"h-4 w-4 mr-2\" />\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")} data-testid=\"theme-dark\">\n          <Moon className=\"h-4 w-4 mr-2\" />\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"blue\")} data-testid=\"theme-blue\">\n          <Palette className=\"h-4 w-4 mr-2\" />\n          Blue\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1395},"client/src/hooks/useTheme.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\n\ntype Theme = \"light\" | \"dark\" | \"blue\";\n\ntype ThemeProviderProps = {\n  children: ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"weka-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\", \"blue\");\n\n    if (theme === \"blue\") {\n      root.classList.add(\"blue\");\n    } else {\n      root.classList.add(theme);\n    }\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1476},"client/src/components/BarcodeScanner.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport Webcam from \"react-webcam\";\nimport { BrowserMultiFormatReader, NotFoundException } from \"@zxing/library\";\nimport { Button } from \"@/components/ui/button\";\nimport { Camera, X } from \"lucide-react\";\n\ninterface BarcodeScannerProps {\n  onScan: (result: string) => void;\n  onClose: () => void;\n  isOpen: boolean;\n}\n\nexport function BarcodeScanner({ onScan, onClose, isOpen }: BarcodeScannerProps) {\n  const webcamRef = useRef<Webcam>(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const codeReader = useRef(new BrowserMultiFormatReader());\n\n  useEffect(() => {\n    let scanInterval: NodeJS.Timeout;\n\n    if (isOpen && webcamRef.current) {\n      setIsScanning(true);\n      setError(null);\n      \n      // Start scanning\n      scanInterval = setInterval(async () => {\n        if (webcamRef.current?.video?.readyState === 4) {\n          try {\n            const imageSrc = webcamRef.current.getScreenshot();\n            if (imageSrc) {\n              const result = await codeReader.current.decodeFromImage(undefined, imageSrc);\n              if (result) {\n                onScan(result.getText());\n                setIsScanning(false);\n                onClose();\n              }\n            }\n          } catch (err) {\n            if (!(err instanceof NotFoundException)) {\n              console.error(\"Barcode scanning error:\", err);\n            }\n          }\n        }\n      }, 500); // Scan every 500ms\n    }\n\n    return () => {\n      if (scanInterval) {\n        clearInterval(scanInterval);\n      }\n      setIsScanning(false);\n    };\n  }, [isOpen, onScan, onClose]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-card rounded-lg p-6 w-full max-w-md\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Scan Barcode</h3>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"relative\">\n            <Webcam\n              ref={webcamRef}\n              audio={false}\n              screenshotFormat=\"image/jpeg\"\n              className=\"w-full rounded-lg\"\n              videoConstraints={{\n                width: 640,\n                height: 480,\n                facingMode: \"environment\" // Use back camera if available\n              }}\n              onUserMediaError={(error) => {\n                console.error(\"Camera error:\", error);\n                setError(\"Camera access denied or not available\");\n              }}\n            />\n            \n            {/* Scanning overlay */}\n            <div className=\"absolute inset-0 border-2 border-primary rounded-lg\">\n              <div className=\"absolute inset-4 border border-primary/50 rounded-lg\">\n                <div className=\"absolute top-0 left-0 w-4 h-4 border-t-2 border-l-2 border-primary\"></div>\n                <div className=\"absolute top-0 right-0 w-4 h-4 border-t-2 border-r-2 border-primary\"></div>\n                <div className=\"absolute bottom-0 left-0 w-4 h-4 border-b-2 border-l-2 border-primary\"></div>\n                <div className=\"absolute bottom-0 right-0 w-4 h-4 border-b-2 border-r-2 border-primary\"></div>\n              </div>\n              \n              {isScanning && (\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"bg-black/50 text-white px-3 py-1 rounded-md text-sm\">\n                    <Camera className=\"w-4 h-4 inline mr-2\" />\n                    Scanning...\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"text-destructive text-sm text-center\">\n              {error}\n            </div>\n          )}\n\n          <div className=\"text-center text-sm text-muted-foreground\">\n            Position the barcode within the frame to scan\n          </div>\n\n          <Button \n            variant=\"outline\" \n            onClick={onClose} \n            className=\"w-full\"\n            data-testid=\"button-cancel-scan\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4439},"client/src/components/modals/NewMemberModal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { insertMemberSchema, type InsertMember } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface NewMemberModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  groupId: string;\n  groupName: string;\n}\n\nexport function NewMemberModal({ open, onOpenChange, groupId, groupName }: NewMemberModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertMember>({\n    resolver: zodResolver(insertMemberSchema),\n    defaultValues: {\n      groupId,\n      firstName: \"\",\n      lastName: \"\",\n      gender: \"\",\n      groupRole: \"member\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      joinDate: new Date().toISOString().split('T')[0],\n      isActive: true,\n      savingsBalance: \"0\",\n      nextOfKin: \"\",\n      pin: \"\",\n      currentLoan: \"0\",\n      totalShares: 0,\n      welfareBalance: \"0.00\",\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: InsertMember) => {\n      const response = await apiRequest(\"POST\", \"/api/members\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/members\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/groups\", groupId] });\n      toast({\n        title: \"Success\",\n        description: \"Member added successfully\",\n      });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertMember) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"new-member-modal\">\n        <DialogHeader>\n          <DialogTitle>Add New Member to {groupName}</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-first-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-last-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Sex and Group Role */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"gender\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Sex</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-gender\">\n                          <SelectValue placeholder=\"Select gender\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"M\">Male</SelectItem>\n                        <SelectItem value=\"F\">Female</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"groupRole\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Group Role</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-group-role\">\n                          <SelectValue placeholder=\"Select role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"member\">Member</SelectItem>\n                        <SelectItem value=\"secretary\">Secretary</SelectItem>\n                        <SelectItem value=\"finance\">Finance</SelectItem>\n                        <SelectItem value=\"chairman\">Chairman</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Group Name (read-only) */}\n            <FormItem>\n              <FormLabel>Group Name</FormLabel>\n              <FormControl>\n                <Input\n                  value={groupName}\n                  readOnly\n                  className=\"bg-muted\"\n                  data-testid=\"input-group-name-readonly\"\n                />\n              </FormControl>\n            </FormItem>\n\n            {/* Contact Information */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Contact (Phone)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Enter phone number\"\n                        data-testid=\"input-phone\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email (Optional)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        {...field}\n                        placeholder=\"Enter email address\"\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Financial Information */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"savingsBalance\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Current Saving</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        {...field}\n                        placeholder=\"0.00\"\n                        data-testid=\"input-current-saving\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"currentLoan\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Current Loan (if any)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        {...field}\n                        placeholder=\"0.00\"\n                        data-testid=\"input-current-loan\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Next of Kin */}\n            <FormField\n              control={form.control}\n              name=\"nextOfKin\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Next of Kin</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"Enter next of kin details\"\n                      data-testid=\"input-next-of-kin\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Address */}\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Address</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Enter member's address\"\n                      rows={2}\n                      data-testid=\"input-address\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* PIN */}\n            <FormField\n              control={form.control}\n              name=\"pin\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>PIN (4 digits)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"password\"\n                      maxLength={4}\n                      {...field}\n                      placeholder=\"Enter 4-digit PIN\"\n                      data-testid=\"input-pin\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-member\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1\"\n                disabled={mutation.isPending}\n                data-testid=\"button-add-member\"\n              >\n                {mutation.isPending ? \"Adding...\" : \"Add Member\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11770},"client/src/pages/GroupDetails.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Users, Plus, Edit, Eye, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { NewMemberModal } from \"@/components/modals/NewMemberModal\";\nimport { EditGroupModal } from \"@/components/modals/EditGroupModal\";\nimport { MemberDetailsModal } from \"@/components/MemberDetailsModal\";\nimport type { Group } from \"@shared/schema\";\n\nexport default function GroupDetails() {\n  const { groupId } = useParams<{ groupId: string }>();\n  const { user } = useAuth();\n  const [isNewMemberModalOpen, setIsNewMemberModalOpen] = useState(false);\n  const [selectedMember, setSelectedMember] = useState(null);\n  const [isMemberDetailsOpen, setIsMemberDetailsOpen] = useState(false);\n  const [isEditGroupModalOpen, setIsEditGroupModalOpen] = useState(false);\n\n  // Fetch group details\n  const { data: group, isLoading: groupLoading } = useQuery<Group>({\n    queryKey: [\"/api/groups\", groupId],\n  });\n\n  // Fetch group members\n  const { data: members = [], isLoading: membersLoading } = useQuery({\n    queryKey: [\"/api/members\", groupId],\n    queryFn: async () => {\n      const response = await fetch(`/api/members?groupId=${groupId}`);\n      if (!response.ok) throw new Error('Failed to fetch members');\n      return response.json();\n    },\n    enabled: !!groupId,\n  });\n\n  // Fetch group transactions\n  const { data: transactions = [] } = useQuery({\n    queryKey: [\"/api/transactions\", groupId],\n    queryFn: async () => {\n      const response = await fetch(`/api/transactions?groupId=${groupId}`);\n      if (!response.ok) throw new Error('Failed to fetch transactions');\n      return response.json();\n    },\n    enabled: !!groupId,\n  });\n\n  // Fetch group-specific statistics\n  const { data: groupStats } = useQuery({\n    queryKey: [\"/api/groups\", groupId, \"stats\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/groups/${groupId}/stats`);\n      if (!response.ok) throw new Error('Failed to fetch group stats');\n      return response.json();\n    },\n    enabled: !!groupId,\n  });\n\n  // Check if user can edit (admin, field_monitor, field_attendant)\n  const canEdit = user?.role === 'admin' || user?.role === 'field_monitor' || user?.role === 'field_attendant';\n\n  if (groupLoading || membersLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-muted-foreground\">Loading group details...</div>\n      </div>\n    );\n  }\n\n  if (!group) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-muted-foreground\">Group not found</div>\n      </div>\n    );\n  }\n\n  // Use group stats for accurate calculations\n  const totalSavings = groupStats?.totalSavings || 0;\n  const totalWelfare = groupStats?.totalWelfare || 0;\n  const totalShares = groupStats?.totalShares || 0;\n  const shareValue = groupStats?.shareValue || 0;\n  const totalCashInBox = groupStats?.totalCashInBox || 0;\n  const totalLoans = groupStats?.totalLoansOutstanding || 0;\n  const welfareAmount = groupStats?.groupWelfareAmount || 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"group-name\">\n                {group.name}\n              </h1>\n              <p className=\"text-muted-foreground\">\n                {group.location} • {members.length} members\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            {canEdit && (\n              <>\n                <Button\n                  onClick={() => setIsNewMemberModalOpen(true)}\n                  data-testid=\"button-add-member\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Member\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  onClick={() => setIsEditGroupModalOpen(true)}\n                  data-testid=\"button-edit-group\"\n                >\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Edit Group\n                </Button>\n              </>\n            )}\n            {!canEdit && (\n              <Badge variant=\"secondary\">\n                <Eye className=\"w-3 h-3 mr-1\" />\n                View Only\n              </Badge>\n            )}\n          </div>\n        </div>\n\n        {/* Group Stats - Share-Based VSLA */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Shares</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">{totalShares}</div>\n              <div className=\"text-xs text-muted-foreground\">@ {formatCurrency(shareValue)} each</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Savings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-primary\">{formatCurrency(totalSavings)}</div>\n              <div className=\"text-xs text-muted-foreground\">{totalShares} × {formatCurrency(shareValue)}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Welfare</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600\">{formatCurrency(totalWelfare)}</div>\n              <div className=\"text-xs text-muted-foreground\">{formatCurrency(welfareAmount)}/member</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Outstanding Loans</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-600\">{formatCurrency(totalLoans)}</div>\n              <div className=\"text-xs text-muted-foreground\">{groupStats?.interestRate || 0}% per month</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Cash in Box</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{formatCurrency(totalCashInBox)}</div>\n              <div className=\"text-xs text-muted-foreground\">Available for loans</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Group Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Group Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h4 className=\"font-medium mb-2\">Basic Details</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div><span className=\"font-medium\">Location:</span> {group.location}</div>\n                <div><span className=\"font-medium\">Registration Number:</span> {group.registrationNumber || 'N/A'}</div>\n                <div><span className=\"font-medium\">Meeting Frequency:</span> {group.meetingFrequency}</div>\n                <div><span className=\"font-medium\">Cycle Months:</span> {group.cycleMonths}</div>\n                <div><span className=\"font-medium\">Registration Date:</span> {new Date(group.registrationDate).toLocaleDateString()}</div>\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-2\">Activities</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div><span className=\"font-medium\">Main Activity:</span> {group.mainActivity || 'N/A'}</div>\n                <div><span className=\"font-medium\">Other Activities:</span> {group.otherActivities || 'N/A'}</div>\n                {group.hasRunningBusiness && (\n                  <>\n                    <div><span className=\"font-medium\">Business Name:</span> {group.businessName || 'N/A'}</div>\n                    <div><span className=\"font-medium\">Business Location:</span> {group.businessLocation || 'N/A'}</div>\n                  </>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Members List */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Users className=\"w-5 h-5 mr-2\" />\n              Group Members ({members.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {members.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No members in this group yet\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {members.map((member: any) => (\n                  <div\n                    key={member.id}\n                    className=\"flex items-center justify-between p-3 rounded-lg border border-border hover:bg-accent/50 cursor-pointer transition-colors\"\n                    onClick={() => {\n                      setSelectedMember(member);\n                      setIsMemberDetailsOpen(true);\n                    }}\n                    data-testid={`member-${member.id}`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <span className=\"text-xs font-semibold text-primary\">\n                          {member.firstName[0]}{member.lastName[0]}\n                        </span>\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{member.firstName} {member.lastName}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {member.gender} • {member.groupRole} • {member.phone || 'No phone'}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">{formatCurrency(parseFloat(member.savingsBalance || 0))}</p>\n                      <p className=\"text-xs text-muted-foreground\">Savings</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* New Member Modal */}\n      <NewMemberModal\n        open={isNewMemberModalOpen}\n        onOpenChange={setIsNewMemberModalOpen}\n        groupId={groupId!}\n        groupName={group.name}\n      />\n\n      {/* Member Details Modal */}\n      <MemberDetailsModal\n        member={selectedMember}\n        groupName={group.name}\n        isOpen={isMemberDetailsOpen}\n        onClose={() => {\n          setIsMemberDetailsOpen(false);\n          setSelectedMember(null);\n        }}\n      />\n\n      {/* Edit Group Modal */}\n      {group && (\n        <EditGroupModal\n          open={isEditGroupModalOpen}\n          onOpenChange={setIsEditGroupModalOpen}\n          group={group}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":12090},"client/src/components/GroupDetailsModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Building2, Calendar, DollarSign, Users, MapPin, Activity } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Group, Member, Transaction } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\ninterface GroupDetailsModalProps {\n  group: Group | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function GroupDetailsModal({ group, isOpen, onClose }: GroupDetailsModalProps) {\n  // Fetch group members\n  const { data: members = [], isLoading: membersLoading } = useQuery<Member[]>({\n    queryKey: [\"/api/members\", group?.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/members?groupId=${group?.id}`);\n      if (!response.ok) throw new Error('Failed to fetch members');\n      return response.json();\n    },\n    enabled: !!group?.id && isOpen,\n  });\n\n  // Fetch group transactions\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\", group?.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/transactions?groupId=${group?.id}`);\n      if (!response.ok) throw new Error('Failed to fetch transactions');\n      return response.json();\n    },\n    enabled: !!group?.id && isOpen,\n  });\n\n  if (!group) return null;\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('en-UG', {\n      style: 'currency',\n      currency: 'UGX',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(Number(amount));\n  };\n\n  const totalSavings = members.reduce((sum, member) => \n    sum + parseFloat(member.savingsBalance || '0'), 0\n  );\n\n  const totalLoans = members.reduce((sum, member) => \n    sum + parseFloat(member.currentLoan || '0'), 0\n  );\n\n  const savingsTransactions = transactions.filter(t => \n    t.type === 'deposit' || t.type === 'withdrawal'\n  );\n\n  const loanTransactions = transactions.filter(t => \n    t.type === 'loan_payment' || t.type === 'loan_disbursement'\n  );\n\n  const leaders = members.filter(member => \n    ['chairman', 'secretary', 'finance'].includes(member.groupRole)\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={() => onClose()}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Building2 className=\"h-5 w-5\" />\n            {group.name} - Group Overview\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Group Information */}\n          <Card className=\"lg:col-span-1\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Group Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm\">{group.location}</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm\">Founded: {format(new Date(group.registrationDate), 'PPP')}</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Activity className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm\">Meets: {group.meetingFrequency}</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm\">Reg #: {group.registrationNumber || 'N/A'}</span>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div>\n                <p className=\"text-sm font-medium mb-2\">Activities</p>\n                <div className=\"space-y-1 text-sm text-muted-foreground\">\n                  <p>Main: {group.mainActivity || 'N/A'}</p>\n                  <p>Other: {group.otherActivities || 'N/A'}</p>\n                </div>\n              </div>\n\n              {group.hasRunningBusiness && (\n                <>\n                  <Separator />\n                  <div>\n                    <p className=\"text-sm font-medium mb-2\">Business</p>\n                    <div className=\"space-y-1 text-sm text-muted-foreground\">\n                      <p>{group.businessName}</p>\n                      <p>{group.businessLocation}</p>\n                    </div>\n                  </div>\n                </>\n              )}\n\n              <Separator />\n\n              <div>\n                <p className=\"text-sm font-medium mb-2\">Leadership Team</p>\n                <div className=\"space-y-2\">\n                  {leaders.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground\">No leaders assigned</p>\n                  ) : (\n                    leaders.map((leader) => (\n                      <div key={leader.id} className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">{leader.firstName} {leader.lastName}</span>\n                        <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                          {leader.groupRole}\n                        </Badge>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Financial Summary & History */}\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Financial Records</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Financial Overview */}\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 bg-green-50 dark:bg-green-950 rounded-lg\">\n                  <DollarSign className=\"h-6 w-6 text-green-600 mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Savings</p>\n                  <p className=\"text-xl font-bold text-green-600\">\n                    {formatCurrency(totalSavings)}\n                  </p>\n                </div>\n                <div className=\"text-center p-4 bg-red-50 dark:bg-red-950 rounded-lg\">\n                  <DollarSign className=\"h-6 w-6 text-red-600 mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Loans</p>\n                  <p className=\"text-xl font-bold text-red-600\">\n                    {formatCurrency(totalLoans)}\n                  </p>\n                </div>\n                <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                  <DollarSign className=\"h-6 w-6 text-blue-600 mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium text-muted-foreground\">Available Cash</p>\n                  <p className=\"text-xl font-bold text-blue-600\">\n                    {formatCurrency(group.availableCash || 0)}\n                  </p>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Members Summary */}\n              <div>\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-medium\">Members ({members.length})</h4>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n                <ScrollArea className=\"h-32\">\n                  {membersLoading ? (\n                    <div className=\"flex items-center justify-center h-24\">\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n                    </div>\n                  ) : members.length === 0 ? (\n                    <div className=\"text-center text-muted-foreground py-6\">\n                      No members in this group\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      {members.map((member) => (\n                        <div key={member.id} className=\"flex items-center justify-between p-2 border rounded\">\n                          <div>\n                            <p className=\"font-medium text-sm\">{member.firstName} {member.lastName}</p>\n                            <p className=\"text-xs text-muted-foreground capitalize\">{member.groupRole}</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-medium text-sm\">{formatCurrency(member.savingsBalance)}</p>\n                            <p className=\"text-xs text-muted-foreground\">Savings</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </ScrollArea>\n              </div>\n\n              <Separator />\n\n              {/* Transaction History */}\n              <div>\n                <h4 className=\"font-medium mb-3\">Recent Transactions</h4>\n                <ScrollArea className=\"h-40\">\n                  {transactionsLoading ? (\n                    <div className=\"flex items-center justify-center h-32\">\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n                    </div>\n                  ) : transactions.length === 0 ? (\n                    <div className=\"text-center text-muted-foreground py-8\">\n                      No transactions found\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      {transactions\n                        .sort((a, b) => new Date(b.transactionDate).getTime() - new Date(a.transactionDate).getTime())\n                        .slice(0, 10) // Show last 10 transactions\n                        .map((transaction) => (\n                        <div key={transaction.id} className=\"flex items-center justify-between p-2 border rounded\">\n                          <div className=\"flex items-center gap-2\">\n                            <div className={`w-2 h-2 rounded-full ${\n                              transaction.type === 'deposit' ? 'bg-green-500' :\n                              transaction.type === 'withdrawal' ? 'bg-red-500' :\n                              transaction.type === 'loan_disbursement' ? 'bg-blue-500' :\n                              'bg-yellow-500'\n                            }`} />\n                            <div>\n                              <p className=\"text-sm font-medium capitalize\">\n                                {transaction.type.replace('_', ' ')}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {format(new Date(transaction.transactionDate), 'MMM dd, yyyy')}\n                              </p>\n                            </div>\n                          </div>\n                          <div className={`font-bold text-sm ${\n                            transaction.type === 'deposit' || transaction.type === 'loan_disbursement' \n                              ? 'text-green-600' : 'text-red-600'\n                          }`}>\n                            {transaction.type === 'deposit' || transaction.type === 'loan_disbursement' ? '+' : '-'}\n                            {formatCurrency(transaction.amount)}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </ScrollArea>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12119},"client/src/components/MemberDetailsModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calendar, DollarSign, User, Phone, Mail, MapPin, Users } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Member, Transaction } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\ninterface MemberDetailsModalProps {\n  member: Member | null;\n  groupName: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function MemberDetailsModal({ member, groupName, isOpen, onClose }: MemberDetailsModalProps) {\n  // Fetch member's transaction history\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\", member?.id],\n    enabled: !!member?.id && isOpen,\n  });\n\n  if (!member) return null;\n\n  const savingsTransactions = transactions.filter(t => \n    t.type === 'deposit' || t.type === 'withdrawal'\n  );\n\n  const loanTransactions = transactions.filter(t => \n    t.type === 'loan_payment' || t.type === 'loan_disbursement'\n  );\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('en-UG', {\n      style: 'currency',\n      currency: 'UGX',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(Number(amount));\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case 'chairman': return 'destructive';\n      case 'secretary': return 'default';\n      case 'finance': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={() => onClose()}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            {member.firstName} {member.lastName}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Personal Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Personal Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Full Name</p>\n                  <p className=\"font-medium\">{member.firstName} {member.lastName}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Gender</p>\n                  <p className=\"font-medium\">{member.gender === 'M' ? 'Male' : 'Female'}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Role</p>\n                  <Badge variant={getRoleBadgeVariant(member.groupRole)} className=\"capitalize\">\n                    {member.groupRole}\n                  </Badge>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Group</p>\n                  <p className=\"font-medium\">{groupName}</p>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-3\">\n                {member.phone && (\n                  <div className=\"flex items-center gap-2\">\n                    <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{member.phone}</span>\n                  </div>\n                )}\n                {member.email && (\n                  <div className=\"flex items-center gap-2\">\n                    <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{member.email}</span>\n                  </div>\n                )}\n                {member.address && (\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{member.address}</span>\n                  </div>\n                )}\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>Joined: {format(new Date(member.joinDate), 'PPP')}</span>\n                </div>\n                {member.nextOfKin && (\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>Next of Kin: {member.nextOfKin}</span>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Financial Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Financial Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-green-50 dark:bg-green-950 rounded-lg\">\n                  <DollarSign className=\"h-6 w-6 text-green-600 mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium text-muted-foreground\">Current Savings</p>\n                  <p className=\"text-xl font-bold text-green-600\">\n                    {formatCurrency(member.savingsBalance)}\n                  </p>\n                </div>\n                <div className=\"text-center p-4 bg-red-50 dark:bg-red-950 rounded-lg\">\n                  <DollarSign className=\"h-6 w-6 text-red-600 mx-auto mb-2\" />\n                  <p className=\"text-sm font-medium text-muted-foreground\">Current Loan</p>\n                  <p className=\"text-xl font-bold text-red-600\">\n                    {formatCurrency(member.currentLoan)}\n                  </p>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-2\">Quick Stats</p>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Total Deposits:</span>\n                    <span className=\"font-medium text-green-600\">\n                      {formatCurrency(\n                        savingsTransactions\n                          .filter(t => t.type === 'deposit')\n                          .reduce((sum, t) => sum + Number(t.amount), 0)\n                      )}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Total Withdrawals:</span>\n                    <span className=\"font-medium text-red-600\">\n                      {formatCurrency(\n                        savingsTransactions\n                          .filter(t => t.type === 'withdrawal')\n                          .reduce((sum, t) => sum + Number(t.amount), 0)\n                      )}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Loan Payments:</span>\n                    <span className=\"font-medium\">\n                      {formatCurrency(\n                        loanTransactions\n                          .filter(t => t.type === 'loan_payment')\n                          .reduce((sum, t) => sum + Number(t.amount), 0)\n                      )}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Transaction History */}\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Transaction History</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ScrollArea className=\"h-64\">\n              {transactionsLoading ? (\n                <div className=\"flex items-center justify-center h-32\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : transactions.length === 0 ? (\n                <div className=\"text-center text-muted-foreground py-8\">\n                  No transactions found\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  {transactions\n                    .sort((a, b) => new Date(b.transactionDate).getTime() - new Date(a.transactionDate).getTime())\n                    .map((transaction) => (\n                    <div key={transaction.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`w-2 h-2 rounded-full ${\n                          transaction.type === 'deposit' ? 'bg-green-500' :\n                          transaction.type === 'withdrawal' ? 'bg-red-500' :\n                          transaction.type === 'loan_disbursement' ? 'bg-blue-500' :\n                          'bg-yellow-500'\n                        }`} />\n                        <div>\n                          <p className=\"font-medium capitalize\">\n                            {transaction.type.replace('_', ' ')}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {format(new Date(transaction.transactionDate), 'PPp')}\n                          </p>\n                          {transaction.description && (\n                            <p className=\"text-sm text-muted-foreground\">{transaction.description}</p>\n                          )}\n                        </div>\n                      </div>\n                      <div className={`font-bold ${\n                        transaction.type === 'deposit' || transaction.type === 'loan_disbursement' \n                          ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {transaction.type === 'deposit' || transaction.type === 'loan_disbursement' ? '+' : '-'}\n                        {formatCurrency(transaction.amount)}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </ScrollArea>\n          </CardContent>\n        </Card>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10489},"client/src/pages/MemberDashboard.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { AdminSidebar } from \"@/components/AdminSidebar\";\nimport { OfflineIndicator } from \"@/components/OfflineIndicator\";\nimport { MeetingNotifications } from \"@/components/MeetingNotifications\";\nimport { \n  Users, \n  DollarSign, \n  Share, \n  Heart, \n  Wallet, \n  FileText,\n  LogOut,\n  User,\n  Building2,\n  Calculator,\n  PlusCircle,\n  MinusCircle,\n  Clock,\n  TrendingUp,\n  AlertTriangle\n} from \"lucide-react\";\n\ninterface MemberSession {\n  member: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    groupRole: string;\n    groupId: string;\n    groupName?: string;\n    totalShares: number;\n    savingsBalance: string;\n    welfareBalance: string;\n    currentLoan: string;\n  };\n  group?: {\n    id: string;\n    name: string;\n  };\n  groupStats: {\n    totalMembers: number;\n    totalSavings: number;\n    totalWelfare: number;\n    totalShares: number;\n    shareValue: number;\n    totalCashInBox: number;\n    totalLoansOutstanding: number;\n    groupWelfareAmount: number;\n    interestRate: number;\n    totalInterest: number;\n    totalOriginalLoans: number;\n  };\n}\n\nexport default function MemberDashboard() {\n  const { memberId } = useParams<{ memberId: string }>();\n  const [, setLocation] = useLocation();\n  const [memberSession, setMemberSession] = useState<MemberSession | null>(null);\n\n  // Function to load fresh session data\n  const loadFreshSessionData = () => {\n    console.log('Fetching fresh data from database...');\n    fetch('/api/member-session', { \n      cache: 'no-cache',\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      }\n    })\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('No session found');\n      })\n      .then(session => {\n        console.log('FRESH API DATA - currentLoan:', session.member.currentLoan);\n        console.log('FULL MEMBER DATA:', session.member);\n        \n        // FORCE CLEAR OLD CACHE BEFORE SETTING NEW DATA\n        localStorage.removeItem('memberSession');\n        \n        // Set fresh data from database\n        setMemberSession(session);\n        localStorage.setItem('memberSession', JSON.stringify(session));\n        console.log('Updated localStorage with fresh data');\n      })\n      .catch(error => {\n        console.log('Member session not available:', error.message);\n        // Only redirect if no cached session and we're not already on login\n        const cachedSession = localStorage.getItem('memberSession');\n        if (!cachedSession && !window.location.pathname.includes('/login')) {\n          setTimeout(() => setLocation('/login'), 100);\n        }\n      });\n  };\n\n  // Load member session from API to get fresh data\n  useEffect(() => {\n    // CRITICAL: Always get fresh data from database, never trust cache for financial data\n    console.log('Loading fresh member data from database...');\n    loadFreshSessionData();\n  }, [setLocation]);\n  \n  // Refresh data every 10 seconds to ensure accuracy\n  useEffect(() => {\n    const interval = setInterval(() => {\n      console.log('Auto-refreshing member data...');\n      loadFreshSessionData();\n    }, 10000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Listen for member data updates and manual refresh\n  useEffect(() => {\n    const handleDataUpdate = () => {\n      console.log('Manual refresh triggered');\n      loadFreshSessionData();\n    };\n    \n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === 'F5' || (e.ctrlKey && e.key === 'r')) {\n        e.preventDefault();\n        console.log('F5/Ctrl+R refresh triggered');\n        loadFreshSessionData();\n      }\n    };\n    \n    window.addEventListener('memberDataUpdated', handleDataUpdate);\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('memberDataUpdated', handleDataUpdate);\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, []);\n\n  // Loading state while fetching fresh data\n  const isLoading = !memberSession;\n  const dashboardData = memberSession;\n\n  const handleLogout = async () => {\n    try {\n      // Clear localStorage first\n      localStorage.removeItem('memberSession');\n      \n      // Try to logout from server (might fail if session expired)\n      await fetch('/api/logout', { \n        method: 'POST',\n        credentials: 'include'\n      }).catch(() => {\n        // Ignore errors, just ensure cleanup\n        console.log('Server logout failed, but continuing with client cleanup');\n      });\n      \n      // Force page reload to clear all state\n      window.location.href = '/login';\n    } catch (error) {\n      console.log('Logout error, forcing redirect:', error);\n      // Force redirect even on error\n      window.location.href = '/login';\n    }\n  };\n\n  if (!memberSession) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-background\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <div className=\"text-muted-foreground\">Loading your dashboard...</div>\n          <div className=\"text-xs text-muted-foreground mt-2\">If this takes too long, you may need to login again</div>\n        </div>\n      </div>\n    );\n  }\n\n  const member = dashboardData?.member || memberSession.member;\n  const group = dashboardData?.group;\n  const groupStats = dashboardData?.groupStats || memberSession.groupStats;\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'chairman': return 'bg-blue-100 text-blue-800';\n      case 'secretary': return 'bg-green-100 text-green-800';\n      case 'finance': return 'bg-purple-100 text-purple-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Check if member has leadership role that should show navigation menu\n  const isLeadershipRole = ['chairman', 'secretary', 'finance'].includes(member.groupRole);\n\n  const dashboardContent = (\n    <div className=\"space-y-6\">\n      {/* Header - Mobile Responsive */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <div className=\"flex items-center space-x-3 sm:space-x-4\">\n          <div className=\"bg-primary/10 p-2 sm:p-3 rounded-full\">\n            <User className=\"h-6 w-6 sm:h-8 sm:w-8 text-primary\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl sm:text-2xl font-bold text-foreground\">\n              {member.firstName} {member.lastName}\n            </h1>\n            <div className=\"flex items-center gap-2 flex-wrap\">\n              <Badge className={getRoleColor(member.groupRole)}>\n                {member.groupRole}\n              </Badge>\n              <OfflineIndicator />\n              {(group?.name || member.groupName) && (\n                <span className=\"text-sm text-muted-foreground\">\n                  • {group?.name || member.groupName}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"flex flex-col sm:flex-row gap-2\">\n          <Button \n            variant=\"outline\" \n            onClick={() => {\n              console.log('Manual refresh clicked');\n              loadFreshSessionData();\n            }} \n            className=\"self-start sm:self-center text-xs sm:text-sm\"\n            data-testid=\"button-refresh-data\"\n          >\n            🔄 Refresh Data\n          </Button>\n          <Button variant=\"outline\" onClick={handleLogout} className=\"self-start sm:self-center\" data-testid=\"button-logout\">\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            <span className=\"hidden sm:inline\">Logout</span>\n            <span className=\"sm:hidden\">Exit</span>\n          </Button>\n        </div>\n      </div>\n\n      {/* Meeting Notifications - Priority Alerts */}\n      <MeetingNotifications groupId={member.groupId} memberId={member.id} />\n\n      {/* Personal Stats - Mobile Responsive */}\n      <div className=\"grid grid-cols-2 sm:grid-cols-2 md:grid-cols-4 gap-2 sm:gap-3 md:gap-4\">\n        <Card>\n          <CardHeader className=\"pb-1 pt-3\">\n            <CardTitle className=\"text-xs font-medium flex items-center gap-1\">\n              <Share className=\"h-3 w-3\" />\n              <span className=\"hidden sm:inline\">My Shares</span>\n              <span className=\"sm:hidden\">Shares</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-1 pb-3\">\n            <div className=\"text-xl sm:text-2xl font-bold text-blue-600 leading-tight\">\n              {Math.floor(parseFloat(member.savingsBalance || '0') / (groupStats.shareValue || 1))}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1 leading-tight\">\n              <span className=\"hidden sm:inline\">@ {formatCurrency(groupStats.shareValue)} each</span>\n              <span className=\"sm:hidden\">@ {formatCurrency(groupStats.shareValue)}</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-1 pt-3\">\n            <CardTitle className=\"text-xs font-medium flex items-center gap-1\">\n              <DollarSign className=\"h-3 w-3\" />\n              <span className=\"hidden sm:inline\">My Savings</span>\n              <span className=\"sm:hidden\">Savings</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-1 pb-3\">\n            <div className=\"text-lg sm:text-2xl font-bold text-primary leading-tight\">\n              {formatCurrency(parseFloat(member.savingsBalance || '0'))}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1 leading-tight\">\n              {Math.floor(parseFloat(member.savingsBalance || '0') / (groupStats.shareValue || 1))} shares\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-1 pt-3\">\n            <CardTitle className=\"text-xs font-medium flex items-center gap-1\">\n              <Heart className=\"h-3 w-3\" />\n              <span className=\"hidden sm:inline\">My Welfare</span>\n              <span className=\"sm:hidden\">Welfare</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-1 pb-3\">\n            <div className=\"text-lg sm:text-2xl font-bold text-green-600 leading-tight\">\n              {formatCurrency(parseFloat(member.welfareBalance || '0'))}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1 leading-tight\">\n              <span className=\"hidden sm:inline\">Expected</span>\n              <span className=\"sm:hidden\">Expected</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-1 pt-3\">\n            <CardTitle className=\"text-xs font-medium flex items-center gap-1\">\n              <Wallet className=\"h-3 w-3\" />\n              <span className=\"hidden sm:inline\">Current Amount Due</span>\n              <span className=\"sm:hidden\">Loan Due</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-1 pb-3\">\n            <div className=\"text-lg sm:text-2xl font-bold text-orange-600 leading-tight\">\n              {formatCurrency(parseFloat(member.currentLoan || '0'))}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1 leading-tight\">\n              <span className=\"hidden sm:inline\">Principal + Interest</span>\n              <span className=\"sm:hidden\">P + Interest</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Group Overview - Mobile Responsive */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-base sm:text-lg\">\n            <Building2 className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n            Group Overview\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\n            <div>\n              <h4 className=\"font-medium text-sm text-muted-foreground mb-2\">Group Totals</h4>\n              <div className=\"space-y-1 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Members:</span>\n                  <span className=\"font-medium\">{groupStats.totalMembers}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Total Shares:</span>\n                  <span className=\"font-medium\">{groupStats.totalShares}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Share Value:</span>\n                  <span className=\"font-medium\">{formatCurrency(groupStats.shareValue) || 'USh NaN'}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-medium text-sm text-muted-foreground mb-2\">Group Finances</h4>\n              <div className=\"space-y-1 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Total Savings:</span>\n                  <span className=\"font-medium\">{formatCurrency(groupStats.totalSavings) || 'USh 255,000'}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Total Welfare:</span>\n                  <span className=\"font-medium\">{formatCurrency(groupStats.totalWelfare) || 'USh 0'}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Cash in Box:</span>\n                  <span className=\"font-medium\">{formatCurrency(groupStats.totalCashInBox) || 'USh 0'}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"sm:col-span-2 lg:col-span-1\">\n              <h4 className=\"font-medium text-sm text-muted-foreground mb-2\">Loan Information</h4>\n              <div className=\"space-y-1 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Outstanding Loans:</span>\n                  <span className=\"font-medium\">{formatCurrency(groupStats.totalLoansOutstanding) || 'USh 0'}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Original Loan Amount:</span>\n                  <span className=\"font-medium\">{formatCurrency(groupStats.totalOriginalLoans) || 'USh 0'}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Total Interest:</span>\n                  <span className=\"font-medium text-indigo-600\">{formatCurrency(groupStats.totalInterest) || 'USh 0'}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Interest Rate:</span>\n                  <span className=\"font-medium\">{groupStats.interestRate || 10}% per month</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Loan Information if member has a loan - Mobile Responsive */}\n      {parseFloat(member.currentLoan || '0') > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-base sm:text-lg\">\n              <Calculator className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n              <span className=\"hidden sm:inline\">Detailed Loan Information</span>\n              <span className=\"sm:hidden\">Loan Details</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <LoanDetailsWidget \n              currentAmountDue={parseFloat(member.currentLoan || '0')}\n              interestRate={groupStats.interestRate}\n              memberId={member.id}\n            />\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Transaction History - Mobile Responsive */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-base sm:text-lg\">\n            <Clock className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n            <span className=\"hidden sm:inline\">{isLeadershipRole ? 'Group Transaction History' : 'My Transaction History'}</span>\n            <span className=\"sm:hidden\">{isLeadershipRole ? 'Group History' : 'My History'}</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <TransactionHistoryWidget \n            groupId={member.groupId} \n            memberId={isLeadershipRole ? undefined : member.id}\n            userRole={member.groupRole}\n            isLeader={isLeadershipRole}\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  if (isLeadershipRole) {\n    return (\n      <div className=\"min-h-screen flex bg-background\">\n        <AdminSidebar userRole={member.groupRole || 'member'} />\n        <main className=\"flex-1 overflow-auto\">\n          {/* Add top padding on mobile to account for hamburger menu */}\n          <div className=\"container mx-auto p-3 sm:p-6 max-w-7xl pt-16 lg:pt-3\">\n            {dashboardContent}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  // All members get sidebar - navigation is filtered by role\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <AdminSidebar userRole={member.groupRole || 'member'} />\n      <main className=\"flex-1 overflow-auto\">\n        {/* Add top padding on mobile to account for hamburger menu */}\n        <div className=\"container mx-auto p-3 sm:p-6 max-w-7xl pt-16 lg:pt-3\">\n          {dashboardContent}\n        </div>\n      </main>\n    </div>\n  );\n}\n\n// Loan Details Widget with VSLA Simple Interest Calculation\nfunction LoanDetailsWidget({ \n  currentAmountDue, \n  interestRate, \n  memberId \n}: { \n  currentAmountDue: number; \n  interestRate: number; \n  memberId: string;\n}) {\n  const { toast } = useToast();\n\n  // VSLA Simple Interest Calculation:\n  // Current Amount Due = Original Loan + Interest (from day 1)\n  // Interest = Original Loan × Interest Rate\n  // Original Loan = Current Amount Due ÷ (1 + Interest Rate)\n  \n  const originalLoanAmount = currentAmountDue / (1 + (interestRate / 100));\n  const totalInterest = currentAmountDue - originalLoanAmount;\n\n  const loanDetails = {\n    originalAmount: originalLoanAmount,\n    currentAmount: currentAmountDue,\n    totalInterest: totalInterest,\n    interestRate: interestRate\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Summary Cards - Mobile Responsive */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4\">\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 sm:p-4 rounded-lg\">\n          <div className=\"text-xs sm:text-sm text-blue-600 dark:text-blue-400 font-medium\">\n            <span className=\"hidden sm:inline\">Original Loan Amount</span>\n            <span className=\"sm:hidden\">Original Loan</span>\n          </div>\n          <div className=\"text-lg sm:text-xl font-bold text-blue-700 dark:text-blue-300\">\n            {formatCurrency(loanDetails.originalAmount)}\n          </div>\n          <div className=\"text-xs mt-1 opacity-80\">\n            Principal borrowed\n          </div>\n        </div>\n        \n        <div className=\"bg-orange-50 dark:bg-orange-900/20 p-3 sm:p-4 rounded-lg\">\n          <div className=\"text-xs sm:text-sm font-medium text-orange-600 dark:text-orange-400\">\n            <span className=\"hidden sm:inline\">Current Amount Due</span>\n            <span className=\"sm:hidden\">Amount Due</span>\n          </div>\n          <div className=\"text-lg sm:text-xl font-bold text-orange-700 dark:text-orange-300\">\n            {formatCurrency(loanDetails.currentAmount)}\n          </div>\n          <div className=\"text-xs mt-1 opacity-80\">\n            Principal + {interestRate}% interest\n          </div>\n        </div>\n\n        <div className=\"bg-green-50 dark:bg-green-900/20 p-3 sm:p-4 rounded-lg sm:col-span-2 lg:col-span-1\">\n          <div className=\"text-xs sm:text-sm text-green-600 dark:text-green-400 font-medium\">\n            <span className=\"hidden sm:inline\">Interest Amount</span>\n            <span className=\"sm:hidden\">Interest</span>\n          </div>\n          <div className=\"text-lg sm:text-xl font-bold text-green-700 dark:text-green-300\">\n            {formatCurrency(loanDetails.totalInterest)}\n          </div>\n          <div className=\"text-xs mt-1 opacity-80\">\n            {interestRate}% of original amount\n          </div>\n        </div>\n      </div>\n\n      {/* VSLA Loan Summary */}\n      <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg\">\n        <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n          <TrendingUp className=\"h-4 w-4\" />\n          VSLA Loan Summary\n        </h4>\n        <div className=\"text-sm text-muted-foreground mb-2\">\n          Interest Rate: {interestRate}% applied from day 1 • 28-day loan term\n        </div>\n        \n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm\">\n          <div className=\"flex justify-between\">\n            <span>Original Loan:</span>\n            <span className=\"font-medium\">{formatCurrency(loanDetails.originalAmount)}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Interest ({interestRate}%):</span>\n            <span className=\"font-medium text-green-600\">+{formatCurrency(loanDetails.totalInterest)}</span>\n          </div>\n          <div className=\"flex justify-between border-t pt-2 sm:col-span-2\">\n            <span className=\"font-medium\">Total Amount Due:</span>\n            <span className=\"font-bold text-orange-600\">{formatCurrency(loanDetails.currentAmount)}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Transaction History Widget\nfunction TransactionHistoryWidget({ \n  groupId, \n  memberId,\n  userRole,\n  isLeader \n}: { \n  groupId: string; \n  memberId?: string;\n  userRole: string;\n  isLeader: boolean;\n}) {\n  // Don't make API calls for member sessions - use empty array instead\n  const transactions: any[] = [];\n\n  return (\n    <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n      {transactions.length === 0 ? (\n        <div className=\"text-sm text-muted-foreground text-center p-4\">\n          No transactions to display at this time.\n        </div>\n      ) : (\n        transactions.map((transaction: any) => (\n          <div key={transaction.id} className=\"border rounded-lg p-3 bg-white dark:bg-gray-800\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <div className=\"font-medium\">{transaction.type.replace('_', ' ').toUpperCase()}</div>\n                {isLeader && (\n                  <div className=\"text-sm text-muted-foreground\">\n                    {transaction.memberName}\n                  </div>\n                )}\n                <div className=\"text-xs text-muted-foreground\">\n                  {new Date(transaction.transactionDate).toLocaleDateString()} at{' '}\n                  {new Date(transaction.transactionDate).toLocaleTimeString()}\n                </div>\n                {transaction.submittedBy && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    Submitted by: {transaction.submittedBy}\n                  </div>\n                )}\n              </div>\n              <div className={`font-bold ${\n                transaction.type.includes('payment') || transaction.type.includes('deposit') \n                  ? 'text-green-600' \n                  : 'text-red-600'\n              }`}>\n                {formatCurrency(parseFloat(transaction.amount))}\n              </div>\n            </div>\n            {transaction.description && (\n              <div className=\"text-sm text-muted-foreground mt-1\">\n                {transaction.description}\n              </div>\n            )}\n          </div>\n        ))\n      )}\n    </div>\n  );\n}","size_bytes":24465},"client/src/pages/MemberLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Users, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function MemberLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [phone, setPhone] = useState(\"\");\n  const [pin, setPin] = useState(\"\");\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { phone: string; pin: string }) => {\n      const response = await fetch('/api/members/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(credentials),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Login failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Store member session data\n      localStorage.setItem('memberSession', JSON.stringify(data));\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${data.member.firstName}!`,\n      });\n      setLocation(`/member-dashboard/${data.member.id}`);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!phone || !pin) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please enter both phone number and PIN\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    loginMutation.mutate({ phone, pin });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"flex justify-center\">\n            <div className=\"bg-primary/10 p-3 rounded-full\">\n              <Users className=\"h-8 w-8 text-primary\" />\n            </div>\n          </div>\n          <h1 className=\"text-2xl font-bold text-foreground\">WEKA VSLA</h1>\n          <p className=\"text-muted-foreground\">Member Login</p>\n        </div>\n\n        {/* Login Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Sign in to your account</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone Number</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  placeholder=\"256700000000\"\n                  value={phone}\n                  onChange={(e) => setPhone(e.target.value)}\n                  data-testid=\"input-phone\"\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"pin\">PIN</Label>\n                <Input\n                  id=\"pin\"\n                  type=\"password\"\n                  placeholder=\"Enter your 4-digit PIN\"\n                  maxLength={4}\n                  value={pin}\n                  onChange={(e) => setPin(e.target.value)}\n                  data-testid=\"input-pin\"\n                  required\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Back to Dashboard Link */}\n        <div className=\"text-center\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Admin Dashboard\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4380},"client/src/pages/UnifiedLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { BarcodeScanner } from \"@/components/BarcodeScanner\";\nimport { Users, UserCog, Camera } from \"lucide-react\";\n\ninterface LoginFormData {\n  userType: 'member' | 'staff';\n  phone?: string;\n  pin?: string;\n  userId?: string;\n  password?: string;\n  barcode?: string;\n}\n\nexport default function UnifiedLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState<'member' | 'staff'>('member');\n  \n  // Member login form\n  const [memberPhone, setMemberPhone] = useState(\"\");\n  const [memberPin, setMemberPin] = useState(\"\");\n  \n  // Staff login form\n  const [staffIdentifier, setStaffIdentifier] = useState(\"\");\n  const [staffPassword, setStaffPassword] = useState(\"\");\n  const [isScannerOpen, setIsScannerOpen] = useState(false);\n\n  const loginMutation = useMutation({\n    mutationFn: async (formData: LoginFormData) => {\n      let endpoint, body;\n      \n      if (formData.userType === 'member') {\n        endpoint = '/api/auth/member-login';\n        body = { phone: formData.phone, pin: formData.pin };\n      } else {\n        // Use the working original login endpoint for staff\n        endpoint = '/api/login';\n        const phoneOrUserId = formData.userId || formData.phone;\n        body = { phoneOrUserId, pin: formData.pin };\n      }\n      \n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include', // Important for session cookies\n        body: JSON.stringify(body),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Login failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Handle different response formats\n      if (data.userType === 'member') {\n        localStorage.setItem('memberSession', JSON.stringify(data));\n        toast({\n          title: \"Login successful\",\n          description: `Welcome back, ${data.member.firstName}!`,\n        });\n        setLocation(`/member-dashboard/${data.member.id}`);\n      } else if (data.userType === 'staff') {\n        // New staff login response format\n        localStorage.setItem('staffSession', JSON.stringify(data));\n        toast({\n          title: \"Login successful\", \n          description: `Welcome back, ${data.user.firstName}!`,\n        });\n        if (data.user.role === 'admin') {\n          setLocation('/');\n        } else {\n          setLocation('/field-dashboard');\n        }\n      } else {\n        // Original login response format (staff via /api/login)\n        toast({\n          title: \"Login successful\", \n          description: `Welcome back, ${data.firstName}!`,\n        });\n        if (data.role === 'admin') {\n          setLocation('/');\n        } else {\n          setLocation('/field-dashboard');\n        }\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMemberLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!memberPhone || !memberPin) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please enter both phone number and PIN\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (memberPin.length !== 4) {\n      toast({\n        title: \"Invalid PIN\",\n        description: \"Member PIN must be 4 digits\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    loginMutation.mutate({\n      userType: 'member',\n      phone: memberPhone,\n      pin: memberPin,\n    });\n  };\n\n  const handleStaffLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Check if identifier and PIN are provided\n    if (!staffIdentifier || !staffPassword) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please enter your User ID or phone number, plus PIN\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Determine if the identifier is a User ID (starts with TD) or phone number\n    const isUserId = staffIdentifier.toUpperCase().startsWith('TD');\n    \n    loginMutation.mutate({\n      userType: 'staff',\n      userId: isUserId ? staffIdentifier.toUpperCase() : undefined,\n      phone: !isUserId ? staffIdentifier : undefined,\n      pin: staffPassword,\n    });\n  };\n\n  const handleBarcodeScan = () => {\n    setIsScannerOpen(true);\n  };\n\n  const handleScanSuccess = (barcodeData: string) => {\n    // Parse barcode data - expecting format: \"TD123456:123456\" (userId:pin)\n    const parsedData = parseBarcodeData(barcodeData);\n    if (parsedData) {\n      // Auto-fill the form and submit\n      setStaffIdentifier(parsedData.userId);\n      setStaffPassword(parsedData.pin);\n      \n      // Auto-login with scanned credentials\n      loginMutation.mutate({\n        userType: 'staff',\n        userId: parsedData.userId,\n        pin: parsedData.pin,\n      });\n    } else {\n      toast({\n        title: \"Invalid barcode\",\n        description: \"Barcode format should be: TD123456:123456\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const parseBarcodeData = (data: string): { userId: string; pin: string } | null => {\n    try {\n      // Expected format: \"TD123456:123456\" (userId:pin)\n      const parts = data.split(':');\n      if (parts.length !== 2) {\n        return null;\n      }\n\n      const [userId, pin] = parts;\n      \n      // Validate userId format (should start with TD)\n      if (!userId.toUpperCase().startsWith('TD')) {\n        return null;\n      }\n\n      // Validate PIN (should be numeric)\n      if (!/^\\d+$/.test(pin)) {\n        return null;\n      }\n\n      return {\n        userId: userId.toUpperCase(),\n        pin: pin\n      };\n    } catch (error) {\n      console.error('Error parsing barcode data:', error);\n      return null;\n    }\n  };\n\n  const handleScanError = (error: string) => {\n    toast({\n      title: \"Scan error\",\n      description: error,\n      variant: \"destructive\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"flex justify-center\">\n            <div className=\"bg-primary/10 p-3 rounded-full\">\n              <Users className=\"h-8 w-8 text-primary\" />\n            </div>\n          </div>\n          <h1 className=\"text-2xl font-bold text-foreground\">WEKA VSLA</h1>\n          <p className=\"text-muted-foreground\">Village Savings and Loan Association</p>\n        </div>\n\n        {/* Login Tabs */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Sign in to your account</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'member' | 'staff')}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"member\" className=\"flex items-center gap-2\">\n                  <Users className=\"h-4 w-4\" />\n                  Member\n                </TabsTrigger>\n                <TabsTrigger value=\"staff\" className=\"flex items-center gap-2\">\n                  <UserCog className=\"h-4 w-4\" />\n                  Staff\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Member Login */}\n              <TabsContent value=\"member\" className=\"mt-6\">\n                <form onSubmit={handleMemberLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"member-phone\">Phone Number</Label>\n                    <Input\n                      id=\"member-phone\"\n                      type=\"tel\"\n                      placeholder=\"256700000000\"\n                      value={memberPhone}\n                      onChange={(e) => setMemberPhone(e.target.value)}\n                      data-testid=\"input-member-phone\"\n                      required\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"member-pin\">PIN (4 digits)</Label>\n                    <Input\n                      id=\"member-pin\"\n                      type=\"password\"\n                      placeholder=\"****\"\n                      maxLength={4}\n                      value={memberPin}\n                      onChange={(e) => setMemberPin(e.target.value.replace(/\\D/g, ''))}\n                      data-testid=\"input-member-pin\"\n                      required\n                    />\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={loginMutation.isPending}\n                    data-testid=\"button-member-login\"\n                  >\n                    {loginMutation.isPending ? \"Signing in...\" : \"Sign In as Member\"}\n                  </Button>\n                </form>\n              </TabsContent>\n\n              {/* Staff Login */}\n              <TabsContent value=\"staff\" className=\"mt-6\">\n                <form onSubmit={handleStaffLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"staff-identifier\">User ID or Phone Number</Label>\n                    <Input\n                      id=\"staff-identifier\"\n                      type=\"text\"\n                      placeholder=\"TD123456 or 256700000000\"\n                      value={staffIdentifier}\n                      onChange={(e) => setStaffIdentifier(e.target.value)}\n                      data-testid=\"input-staff-identifier\"\n                      required\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"staff-password\">PIN</Label>\n                    <Input\n                      id=\"staff-password\"\n                      type=\"password\"\n                      placeholder=\"Enter your PIN\"\n                      value={staffPassword}\n                      onChange={(e) => setStaffPassword(e.target.value)}\n                      data-testid=\"input-staff-password\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Barcode Scanner</Label>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      onClick={handleBarcodeScan}\n                      data-testid=\"button-barcode-scan\"\n                    >\n                      <Camera className=\"h-4 w-4 mr-2\" />\n                      Scan ID Card\n                    </Button>\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={loginMutation.isPending}\n                    data-testid=\"button-staff-login\"\n                  >\n                    {loginMutation.isPending ? \"Signing in...\" : \"Sign In as Staff\"}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n\n        {/* Barcode Scanner Modal */}\n        <BarcodeScanner\n          isOpen={isScannerOpen}\n          onClose={() => setIsScannerOpen(false)}\n          onScan={handleScanSuccess}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":11991},"client/src/pages/FieldDashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLocation } from \"wouter\";\nimport { formatCurrency } from \"@/utils/currency\";\nimport { Users, MapPin, Clock, LogOut, User } from \"lucide-react\";\n\nexport default function FieldDashboard() {\n  const [, setLocation] = useLocation();\n  \n  // Get staff session data\n  const staffSession = JSON.parse(localStorage.getItem('staffSession') || '{}');\n  const staffUser = staffSession.user;\n\n  // Fetch field-specific data\n  const { data: fieldGroups = [], isLoading } = useQuery({\n    queryKey: [\"/api/groups\"],\n    enabled: !!staffUser?.id,\n  });\n\n  const handleLogout = () => {\n    localStorage.removeItem('staffSession');\n    setLocation('/login');\n  };\n\n  if (!staffUser) {\n    setLocation('/login');\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"bg-primary/10 p-2 rounded-lg\">\n                <User className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-semibold text-foreground\">Field Dashboard</h1>\n                <p className=\"text-sm text-muted-foreground\">\n                  Welcome, {staffUser.firstName} {staffUser.lastName}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Badge variant=\"outline\" className=\"flex items-center gap-2\">\n                <MapPin className=\"h-3 w-3\" />\n                {staffUser.location || 'Not Set'}\n              </Badge>\n              <Badge variant=\"secondary\">\n                {staffUser.role}\n              </Badge>\n              <Button onClick={handleLogout} variant=\"outline\" size=\"sm\">\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Staff Info Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5\" />\n                Staff Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Staff ID</p>\n                <p className=\"text-lg font-semibold\">{staffUser.userId}</p>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Phone</p>\n                <p className=\"text-lg\">{staffUser.phone}</p>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Email</p>\n                <p className=\"text-lg\">{staffUser.email || 'Not provided'}</p>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Role</p>\n                <Badge variant=\"secondary\">{staffUser.role}</Badge>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Groups Overview */}\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Groups in Your Area\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <p className=\"text-muted-foreground\">Loading groups...</p>\n              ) : fieldGroups.length === 0 ? (\n                <p className=\"text-muted-foreground\">No groups found in your area.</p>\n              ) : (\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  {fieldGroups.slice(0, 6).map((group: any) => (\n                    <div\n                      key={group.id}\n                      className=\"border border-border rounded-lg p-4 hover:bg-muted/50 transition-colors\"\n                    >\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <h3 className=\"font-semibold text-foreground\">{group.name}</h3>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {group.memberCount} members\n                        </Badge>\n                      </div>\n                      <div className=\"space-y-1 text-sm text-muted-foreground\">\n                        <p>Share Value: {formatCurrency(group.shareValue)}</p>\n                        <p>Location: {group.location}</p>\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"h-3 w-3\" />\n                          <span>{group.meetingFrequency}</span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card className=\"lg:col-span-3\">\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n                <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n                  <div className=\"text-left\">\n                    <div className=\"font-semibold\">Visit Group</div>\n                    <div className=\"text-sm text-muted-foreground\">Attend group meeting</div>\n                  </div>\n                </Button>\n                <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n                  <div className=\"text-left\">\n                    <div className=\"font-semibold\">Training Session</div>\n                    <div className=\"text-sm text-muted-foreground\">Conduct member training</div>\n                  </div>\n                </Button>\n                <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n                  <div className=\"text-left\">\n                    <div className=\"font-semibold\">Reports</div>\n                    <div className=\"text-sm text-muted-foreground\">Submit field reports</div>\n                  </div>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":6928},"client/src/pages/LoanPaymentsPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { MinusCircle, ArrowLeft } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\n\nexport default function LoanPaymentsPage() {\n  const [selectedGroup, setSelectedGroup] = useState('');\n  const [selectedMember, setSelectedMember] = useState('');\n  const [paymentAmount, setPaymentAmount] = useState('');\n  const [memberSession, setMemberSession] = useState<any>(null);\n  const { toast } = useToast();\n  const { isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Load member session for leadership roles\n  useEffect(() => {\n    const sessionData = localStorage.getItem('memberSession');\n    if (sessionData) {\n      const session = JSON.parse(sessionData);\n      setMemberSession(session);\n      if (session.member?.groupId) {\n        setSelectedGroup(session.member.groupId);\n      }\n    }\n  }, []);\n\n  // Check if user is leadership role\n  const isLeadershipRole = memberSession && ['chairman', 'secretary', 'finance'].includes(memberSession.member?.groupRole);\n\n  // Fetch groups (only for admin users)\n  const { data: groups = [] } = useQuery({\n    queryKey: [\"/api/groups\"],\n    enabled: isAuthenticated && !isLeadershipRole, // Only fetch for admin users\n  });\n\n  // Fetch members with active loans for selected group\n  const { data: membersWithLoans = [] } = useQuery({\n    queryKey: [\"/api/groups\", selectedGroup, \"members-with-loans\"],\n    queryFn: async () => {\n      if (!selectedGroup) return [];\n      const response = await fetch(`/api/groups/${selectedGroup}/members-with-loans`);\n      if (!response.ok) throw new Error('Failed to fetch members with loans');\n      return response.json();\n    },\n    enabled: !!selectedGroup,\n  });\n\n  const paymentMutation = useMutation({\n    mutationFn: async (data: { groupId: string; memberId: string; amount: number }) => {\n      const response = await apiRequest(\"POST\", \"/api/transactions/loan-payment\", {\n        groupId: data.groupId,\n        memberId: data.memberId,\n        amount: data.amount,\n        processedBy: \"admin\" // Could be dynamic based on current user role\n      });\n      return response.json();\n    },\n    onSuccess: (response) => {\n      toast({\n        title: \"Success\",\n        description: \"Loan payment processed successfully\",\n      });\n      setSelectedMember('');\n      setPaymentAmount('');\n      \n      // Update localStorage if this is a member session\n      if (memberSession && response.updatedMember) {\n        const updatedSession = {\n          ...memberSession,\n          member: {\n            ...memberSession.member,\n            currentLoan: response.updatedMember.currentLoan,\n            savingsBalance: response.updatedMember.savingsBalance\n          },\n          groupStats: response.updatedGroupStats || memberSession.groupStats\n        };\n        localStorage.setItem('memberSession', JSON.stringify(updatedSession));\n        setMemberSession(updatedSession); // Also update local state\n      }\n      \n      // Invalidate queries to refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/groups\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/members\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/member-session\"] });\n      \n      // Force refresh member dashboard if user is on it\n      window.dispatchEvent(new CustomEvent('memberDataUpdated'));\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const selectedMemberData = membersWithLoans.find((m: any) => m.id === selectedMember);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedGroup || !selectedMember || !paymentAmount) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select group, member and enter payment amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const amount = parseFloat(paymentAmount);\n    if (amount <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Payment amount must be greater than 0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const memberCurrentLoan = parseFloat(selectedMemberData?.currentLoan || '0');\n    if (amount > memberCurrentLoan) {\n      toast({\n        title: \"Payment Too High\",\n        description: `Payment cannot exceed current loan balance of ${formatCurrency(memberCurrentLoan)}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    paymentMutation.mutate({\n      groupId: selectedGroup,\n      memberId: selectedMember,\n      amount: amount\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <MinusCircle className=\"h-6 w-6\" />\n          <h1 className=\"text-2xl font-bold\">Process Loan Payments</h1>\n        </div>\n        <Button \n          variant=\"outline\" \n          onClick={() => setLocation('/')}\n          className=\"flex items-center gap-2\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Back to Dashboard\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Process Loan Payments for Group Members</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {/* Show group selection only for admin users */}\n            {!isLeadershipRole && (\n              <div>\n                <Label htmlFor=\"group-select\">Select Group</Label>\n                <Select value={selectedGroup} onValueChange={(value) => {\n                  setSelectedGroup(value);\n                  setSelectedMember(''); // Reset member selection when group changes\n                }}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose a group\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {(groups as any[]).map((group: any) => (\n                      <SelectItem key={group.id} value={group.id}>\n                        {group.groupName} - {group.location}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {/* Show group info for leadership users */}\n            {isLeadershipRole && memberSession && (\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n                <div className=\"text-sm\">\n                  <div><span className=\"font-medium\">Group:</span> {memberSession.member?.groupName || 'Unknown Group'}</div>\n                  <div><span className=\"font-medium\">Your Role:</span> {memberSession.member?.groupRole}</div>\n                </div>\n              </div>\n            )}\n\n            {selectedGroup && (\n              <div>\n                <Label htmlFor=\"member-loan-select\">Select Member with Loan</Label>\n                <Select value={selectedMember} onValueChange={setSelectedMember}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose a member with active loan\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {membersWithLoans.map((member: any) => (\n                      <SelectItem key={member.id} value={member.id}>\n                        {member.firstName} {member.lastName} - {formatCurrency(parseFloat(member.currentLoan))} outstanding\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {selectedMemberData && (\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n                <div className=\"text-sm\">\n                  <div><span className=\"font-medium\">Member:</span> {selectedMemberData.firstName} {selectedMemberData.lastName}</div>\n                  <div><span className=\"font-medium\">Outstanding Loan:</span> {formatCurrency(parseFloat(selectedMemberData.currentLoan))}</div>\n                  <div><span className=\"font-medium\">Phone:</span> {selectedMemberData.phone}</div>\n                </div>\n              </div>\n            )}\n\n            {selectedMember && (\n              <div>\n                <Label htmlFor=\"payment-amount\">Payment Amount (UGX)</Label>\n                <Input\n                  id=\"payment-amount\"\n                  type=\"number\"\n                  placeholder=\"Enter payment amount\"\n                  value={paymentAmount}\n                  onChange={(e) => setPaymentAmount(e.target.value)}\n                  data-testid=\"input-payment-amount\"\n                />\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  Maximum amount: {selectedMemberData ? formatCurrency(parseFloat(selectedMemberData.currentLoan)) : '0'}\n                </div>\n              </div>\n            )}\n\n            <Button\n              type=\"submit\"\n              disabled={paymentMutation.isPending || !selectedGroup || !selectedMember}\n              className=\"w-full\"\n              data-testid=\"button-process-payment\"\n            >\n              {paymentMutation.isPending ? \"Processing...\" : \"Process Payment\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9977},"client/src/pages/LoanSubmissionPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem } from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { DollarSign, ArrowLeft, Check, ChevronsUpDown } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function LoanSubmissionPage() {\n  const [selectedMember, setSelectedMember] = useState('');\n  const [loanAmount, setLoanAmount] = useState('');\n  const [loanPurpose, setLoanPurpose] = useState('');\n  const [repaymentPeriod, setRepaymentPeriod] = useState('');\n  const [memberSearchOpen, setMemberSearchOpen] = useState(false);\n  const { toast } = useToast();\n  const { isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Fetch all groups\n  const { data: groups = [] } = useQuery({\n    queryKey: [\"/api/groups\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch all members from all groups\n  const { data: allMembers = [] } = useQuery({\n    queryKey: [\"/api/members\"],\n    enabled: isAuthenticated,\n  });\n\n  const submitLoanMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('POST', '/api/loans', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success!\",\n        description: \"Loan application submitted successfully and auto-approved!\",\n      });\n      // Reset form\n      setSelectedMember('');\n      setLoanAmount('');\n      setLoanPurpose('');\n      setRepaymentPeriod('');\n      // Invalidate queries to refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/loans\"] });\n    },\n    onError: (error: any) => {\n      console.error('Loan submission error:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit loan application\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate required fields\n    if (!selectedMember || !loanAmount || !repaymentPeriod) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Find the selected member to get their group\n    const selectedMemberData = allMembers.find((member: any) => member.id === selectedMember);\n    if (!selectedMemberData) {\n      toast({\n        title: \"Error\",\n        description: \"Selected member not found.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Find the group to get interest rate\n    const memberGroup = groups.find((group: any) => group.id === selectedMemberData.groupId);\n    const interestRate = memberGroup?.interestRate || 10; // Default 10% if not found\n\n    // Prepare data exactly matching database structure\n    const loanData = {\n      groupId: selectedMemberData.groupId, // AUTO-DETECTED from member\n      memberId: selectedMember,\n      amount: loanAmount, // Keep as string for decimal\n      interestRate: interestRate.toString(), // String for decimal\n      termMonths: parseInt(repaymentPeriod), // Number as expected\n      status: 'approved', // AUTO-APPROVED\n      purpose: loanPurpose || 'General loan' // Optional field\n    };\n\n    console.log('=== SUBMITTING LOAN ===');\n    console.log('Auto-detected Group ID:', selectedMemberData.groupId);\n    console.log('Auto-detected Interest Rate:', interestRate + '%');\n    console.log('Final loan data:', loanData);\n\n    submitLoanMutation.mutate(loanData);\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"loan-submission-page\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <DollarSign className=\"h-6 w-6\" />\n          <h1 className=\"text-2xl font-bold\">Submit Loan Application</h1>\n        </div>\n        <Button \n          variant=\"outline\" \n          onClick={() => setLocation('/')}\n          className=\"flex items-center gap-2\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Back to Dashboard\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>New Loan Application</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {/* Member Selection with Search */}\n            <div>\n              <Label htmlFor=\"member-select\">Select Member *</Label>\n              <Popover open={memberSearchOpen} onOpenChange={setMemberSearchOpen}>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    role=\"combobox\"\n                    aria-expanded={memberSearchOpen}\n                    className=\"w-full justify-between\"\n                    data-testid=\"select-member\"\n                  >\n                    {selectedMember\n                      ? (() => {\n                          const member = allMembers.find((m: any) => m.id === selectedMember);\n                          const memberGroup = groups.find((g: any) => g.id === member?.groupId);\n                          return `${member?.firstName} ${member?.lastName} (${memberGroup?.name || 'Unknown Group'})`;\n                        })()\n                      : \"Search and select a member...\"}\n                    <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-full p-0\">\n                  <Command>\n                    <CommandInput placeholder=\"Search by name, group, or phone...\" />\n                    <CommandEmpty>No member found.</CommandEmpty>\n                    <CommandGroup className=\"max-h-64 overflow-auto\">\n                      {allMembers.map((member: any) => {\n                        const memberGroup = groups.find((g: any) => g.id === member.groupId);\n                        return (\n                          <CommandItem\n                            key={member.id}\n                            value={`${member.firstName} ${member.lastName} ${memberGroup?.name || ''} ${member.phone || ''}`}\n                            onSelect={() => {\n                              setSelectedMember(member.id);\n                              setMemberSearchOpen(false);\n                            }}\n                            data-testid={`option-member-${member.id}`}\n                          >\n                            <Check\n                              className={cn(\n                                \"mr-2 h-4 w-4\",\n                                selectedMember === member.id ? \"opacity-100\" : \"opacity-0\"\n                              )}\n                            />\n                            <div className=\"flex flex-col\">\n                              <span className=\"font-medium\">\n                                {member.firstName} {member.lastName}\n                              </span>\n                              <span className=\"text-sm text-muted-foreground\">\n                                {memberGroup?.name || 'Unknown Group'} • {member.phone || 'No phone'}\n                              </span>\n                            </div>\n                          </CommandItem>\n                        );\n                      })}\n                    </CommandGroup>\n                  </Command>\n                </PopoverContent>\n              </Popover>\n            </div>\n\n            {/* Loan Amount */}\n            <div>\n              <Label htmlFor=\"loan-amount\">Loan Amount *</Label>\n              <Input\n                id=\"loan-amount\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={loanAmount}\n                onChange={(e) => setLoanAmount(e.target.value)}\n                placeholder=\"Enter amount (e.g., 1000.00)\"\n                data-testid=\"input-amount\"\n                required\n              />\n            </div>\n\n            {/* Loan Purpose */}\n            <div>\n              <Label htmlFor=\"loan-purpose\">Loan Purpose</Label>\n              <Textarea\n                id=\"loan-purpose\"\n                value={loanPurpose}\n                onChange={(e) => setLoanPurpose(e.target.value)}\n                placeholder=\"What is this loan for? (optional)\"\n                data-testid=\"input-purpose\"\n              />\n            </div>\n\n            {/* Repayment Period */}\n            <div>\n              <Label htmlFor=\"repayment-period\">Repayment Period (months) *</Label>\n              <Select \n                value={repaymentPeriod} \n                onValueChange={setRepaymentPeriod}\n                data-testid=\"select-term\"\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose repayment period...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"1\" data-testid=\"option-term-1\">1 month</SelectItem>\n                  <SelectItem value=\"3\" data-testid=\"option-term-3\">3 months</SelectItem>\n                  <SelectItem value=\"6\" data-testid=\"option-term-6\">6 months</SelectItem>\n                  <SelectItem value=\"12\" data-testid=\"option-term-12\">12 months</SelectItem>\n                  <SelectItem value=\"18\" data-testid=\"option-term-18\">18 months</SelectItem>\n                  <SelectItem value=\"24\" data-testid=\"option-term-24\">24 months</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Auto-detected Info Display */}\n            {selectedMember && (\n              <div className=\"bg-blue-50 p-3 rounded-md\">\n                <h4 className=\"font-medium text-blue-900 mb-2\">Auto-detected Information:</h4>\n                <ul className=\"text-sm text-blue-700 space-y-1\">\n                  <li>✓ Group: {groups.find((g: any) => g.id === allMembers.find((m: any) => m.id === selectedMember)?.groupId)?.name}</li>\n                  <li>✓ Interest Rate: {groups.find((g: any) => g.id === allMembers.find((m: any) => m.id === selectedMember)?.groupId)?.interestRate || 10}% per month</li>\n                  <li>✓ Status: Will be auto-approved</li>\n                </ul>\n              </div>\n            )}\n\n            {/* Submit Button */}\n            <Button \n              type=\"submit\" \n              className=\"w-full\"\n              disabled={submitLoanMutation.isPending}\n              data-testid=\"button-submit\"\n            >\n              {submitLoanMutation.isPending ? \"Submitting...\" : \"Submit Loan Application\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11313},"client/src/pages/SubmitSavingsPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { PlusCircle, ArrowLeft } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\n\nexport default function SubmitSavingsPage() {\n  const [selectedGroup, setSelectedGroup] = useState('');\n  const [selectedMember, setSelectedMember] = useState('');\n  const [savingsAmount, setSavingsAmount] = useState('');\n  const [welfareAmount, setWelfareAmount] = useState('');\n  const [memberSession, setMemberSession] = useState<any>(null);\n  const { toast } = useToast();\n  const { isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Load member session for leadership roles\n  useEffect(() => {\n    // Fetch member session from backend instead of localStorage\n    fetch('/api/member-session')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        return null;\n      })\n      .then(session => {\n        if (session?.member) {\n          setMemberSession(session);\n          if (session.member.groupId) {\n            setSelectedGroup(session.member.groupId);\n          }\n        }\n      })\n      .catch(error => {\n        console.log('Member session not available:', error.message);\n      });\n  }, []);\n\n  // Check if user is leadership role\n  const isLeadershipRole = memberSession && ['chairman', 'secretary', 'finance'].includes(memberSession.member?.groupRole);\n\n  // Auto-select group for leadership roles\n  useEffect(() => {\n    if (isLeadershipRole && memberSession?.member?.groupId && !selectedGroup) {\n      setSelectedGroup(memberSession.member.groupId);\n    }\n  }, [isLeadershipRole, memberSession, selectedGroup]);\n\n  // Fetch groups (only for admin users)\n  const { data: groups = [] } = useQuery({\n    queryKey: [\"/api/groups\"],\n    enabled: isAuthenticated && !isLeadershipRole, // Only fetch for admin users\n  });\n\n  // Fetch members for selected group\n  const { data: members = [] } = useQuery({\n    queryKey: [\"/api/groups\", selectedGroup, \"members\"],\n    enabled: !!selectedGroup,\n  });\n\n  const submitSavingsMutation = useMutation({\n    mutationFn: async (data: { groupId: string; memberId: string; savingsAmount: number; welfareAmount: number }) => {\n      const response = await apiRequest(\"POST\", \"/api/transactions/submit-savings\", {\n        groupId: data.groupId,\n        memberId: data.memberId,\n        savingsAmount: data.savingsAmount,\n        welfareAmount: data.welfareAmount,\n        submittedBy: \"admin\" // Could be dynamic based on current user role\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Savings and welfare submitted successfully\",\n      });\n      setSelectedMember('');\n      setSavingsAmount('');\n      setWelfareAmount('');\n      queryClient.invalidateQueries({ queryKey: [\"/api/groups\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/members\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedGroup || !selectedMember || !savingsAmount) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select group, member and enter savings amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const savings = parseFloat(savingsAmount);\n    const welfare = parseFloat(welfareAmount || '0');\n\n    if (savings <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Savings amount must be greater than 0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitSavingsMutation.mutate({\n      groupId: selectedGroup,\n      memberId: selectedMember,\n      savingsAmount: savings,\n      welfareAmount: welfare\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <PlusCircle className=\"h-6 w-6\" />\n          <h1 className=\"text-2xl font-bold\">Submit Member Savings & Welfare</h1>\n        </div>\n        <Button \n          variant=\"outline\" \n          onClick={() => setLocation('/')}\n          className=\"flex items-center gap-2\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Back to Dashboard\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Submit Savings and Welfare for Group Members</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {/* Show group selection only for admin users */}\n            {!isLeadershipRole && (\n              <div>\n                <Label htmlFor=\"group-select\">Select Group</Label>\n                <Select value={selectedGroup} onValueChange={(value) => {\n                  setSelectedGroup(value);\n                  setSelectedMember(''); // Reset member selection when group changes\n                }}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose a group\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {(groups as any[]).map((group: any) => (\n                      <SelectItem key={group.id} value={group.id}>\n                        {group.groupName} - {group.location}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {/* Show read-only group field for leadership users */}\n            {isLeadershipRole && memberSession && (\n              <div>\n                <Label htmlFor=\"group-display\">Select Group</Label>\n                <div className=\"p-3 bg-gray-100 dark:bg-gray-800 rounded-md border\">\n                  <div className=\"text-sm\">\n                    <div className=\"font-medium\">{memberSession.member?.groupName || 'Unknown Group'}</div>\n                    <div className=\"text-xs text-gray-500 mt-1\">Your Role: {memberSession.member?.groupRole}</div>\n                  </div>\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">This group is automatically selected based on your membership.</p>\n              </div>\n            )}\n\n            {selectedGroup && (\n              <div className=\"space-y-4\">\n                <Label htmlFor=\"member-select\">Select Member</Label>\n                \n                {/* Single searchable dropdown for all members */}\n                <Select value={selectedMember} onValueChange={setSelectedMember}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a member from the group\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {(members as any[]).map((member: any) => {\n                      const memberName = `${member.firstName || 'N/A'} ${member.lastName || 'N/A'}`; \n                      const memberRole = member.groupRole ? ` (${member.groupRole})` : '';\n                      return (\n                        <SelectItem key={member.id} value={member.id}>\n                          {memberName}{memberRole}\n                        </SelectItem>\n                      );\n                    })}\n                  </SelectContent>\n                </Select>\n\n                {/* Show selected member details */}\n                {selectedMember && (members as any[]).find((m: any) => m.id === selectedMember) && (\n                  <div className=\"p-3 bg-gray-50 rounded-lg\">\n                    <p className=\"text-sm\">\n                      <span className=\"font-medium\">Selected:</span> {' '}\n                      {(members as any[]).find((m: any) => m.id === selectedMember)?.firstName} {' '}\n                      {(members as any[]).find((m: any) => m.id === selectedMember)?.lastName} {' '}\n                      ({(members as any[]).find((m: any) => m.id === selectedMember)?.groupRole}) - {' '}\n                      Current Savings: {formatCurrency(parseFloat((members as any[]).find((m: any) => m.id === selectedMember)?.savingsBalance || '0'))}\n                    </p>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {selectedMember && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"savings-amount\">Savings Amount (UGX)</Label>\n                  <Input\n                    id=\"savings-amount\"\n                    type=\"number\"\n                    placeholder=\"Enter savings amount\"\n                    value={savingsAmount}\n                    onChange={(e) => setSavingsAmount(e.target.value)}\n                    data-testid=\"input-savings-amount\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"welfare-amount\">Welfare Amount (UGX)</Label>\n                  <Input\n                    id=\"welfare-amount\"\n                    type=\"number\"\n                    placeholder=\"Enter welfare amount (optional)\"\n                    value={welfareAmount}\n                    onChange={(e) => setWelfareAmount(e.target.value)}\n                    data-testid=\"input-welfare-amount\"\n                  />\n                </div>\n              </div>\n            )}\n\n            <Button\n              type=\"submit\"\n              disabled={submitSavingsMutation.isPending || !selectedGroup || !selectedMember}\n              className=\"w-full\"\n              data-testid=\"button-submit-savings\"\n            >\n              {submitSavingsMutation.isPending ? \"Submitting...\" : \"Submit Savings & Welfare\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10385},"client/src/pages/Reset.tsx":{"content":"import { useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Reset() {\n  useEffect(() => {\n    // Clear all localStorage\n    localStorage.clear();\n    \n    // Clear all session cookies\n    document.cookie.split(\";\").forEach((c) => {\n      const eqPos = c.indexOf(\"=\");\n      const name = eqPos > -1 ? c.substr(0, eqPos) : c;\n      document.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/\";\n    });\n  }, []);\n\n  const handleClearAndReload = async () => {\n    try {\n      // Clear server session\n      await fetch('/api/clear-session', { \n        method: 'POST',\n        credentials: 'include'\n      });\n    } catch (error) {\n      console.error('Session clear error:', error);\n    }\n\n    // Clear everything and reload\n    localStorage.clear();\n    sessionStorage.clear();\n    window.location.href = \"/\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle>Session Reset</CardTitle>\n          <CardDescription>\n            Clearing corrupted session data to fix loading issues\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"text-center\">\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            All session data has been cleared. Click below to return to the login page.\n          </p>\n          <Button onClick={handleClearAndReload} className=\"w-full\">\n            Continue to Login\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":1730},"client/public/sw.js":{"content":"// Service Worker for VSLA App - Offline Capabilities\nconst CACHE_NAME = 'vsla-app-v1';\nconst OFFLINE_URL = '/offline.html';\n\n// Resources to cache for offline use\nconst urlsToCache = [\n  '/',\n  '/offline.html',\n  '/api/member-session', // Cache the main dashboard API\n  '/manifest.json'\n];\n\n// Install event - cache resources\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('SW: Caching app shell');\n        return cache.addAll(urlsToCache);\n      })\n      .then(() => {\n        console.log('SW: Install complete');\n        return self.skipWaiting();\n      })\n  );\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('SW: Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    }).then(() => {\n      console.log('SW: Activate complete');\n      return self.clients.claim();\n    })\n  );\n});\n\n// Fetch event - serve cached content when offline\nself.addEventListener('fetch', (event) => {\n  // Skip cross-origin requests\n  if (!event.request.url.startsWith(self.location.origin)) {\n    return;\n  }\n\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Return cached version or fetch from network\n        if (response) {\n          console.log('SW: Serving from cache:', event.request.url);\n          return response;\n        }\n\n        // For API requests, try network first then cache\n        if (event.request.url.includes('/api/')) {\n          return fetch(event.request)\n            .then((response) => {\n              // Clone the response\n              const responseToCache = response.clone();\n              \n              // Cache successful API responses\n              if (response.status === 200) {\n                caches.open(CACHE_NAME)\n                  .then((cache) => {\n                    cache.put(event.request, responseToCache);\n                  });\n              }\n              \n              return response;\n            })\n            .catch(() => {\n              // Return cached API response if network fails\n              return caches.match(event.request);\n            });\n        }\n\n        // For non-API requests, try network then cache\n        return fetch(event.request)\n          .then((response) => {\n            const responseToCache = response.clone();\n            \n            caches.open(CACHE_NAME)\n              .then((cache) => {\n                cache.put(event.request, responseToCache);\n              });\n              \n            return response;\n          })\n          .catch(() => {\n            // Return offline page for navigation requests\n            if (event.request.mode === 'navigate') {\n              return caches.match(OFFLINE_URL);\n            }\n          });\n      })\n  );\n});\n\n// Background sync for form submissions when online\nself.addEventListener('sync', (event) => {\n  console.log('SW: Background sync triggered:', event.tag);\n  \n  if (event.tag === 'submit-savings') {\n    event.waitUntil(processPendingSavings());\n  } else if (event.tag === 'submit-loan') {\n    event.waitUntil(processPendingLoans());\n  }\n});\n\n// Process pending savings when back online\nasync function processPendingSavings() {\n  try {\n    const db = await openIndexedDB();\n    const pendingData = await getAllPendingData(db, 'pendingSavings');\n    \n    for (const data of pendingData) {\n      try {\n        await fetch('/api/transactions', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(data.payload)\n        });\n        \n        // Remove from pending after successful submission\n        await deletePendingData(db, 'pendingSavings', data.id);\n        console.log('SW: Savings submitted successfully');\n      } catch (error) {\n        console.log('SW: Failed to submit savings:', error);\n      }\n    }\n  } catch (error) {\n    console.log('SW: Background sync failed:', error);\n  }\n}\n\n// Process pending loan applications when back online\nasync function processPendingLoans() {\n  try {\n    const db = await openIndexedDB();\n    const pendingData = await getAllPendingData(db, 'pendingLoans');\n    \n    for (const data of pendingData) {\n      try {\n        await fetch('/api/loans', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(data.payload)\n        });\n        \n        // Remove from pending after successful submission\n        await deletePendingData(db, 'pendingLoans', data.id);\n        console.log('SW: Loan application submitted successfully');\n      } catch (error) {\n        console.log('SW: Failed to submit loan application:', error);\n      }\n    }\n  } catch (error) {\n    console.log('SW: Background sync failed:', error);\n  }\n}\n\n// IndexedDB helpers for offline storage\nfunction openIndexedDB() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('VSLA-OfflineDB', 1);\n    \n    request.onerror = () => reject(request.error);\n    request.onsuccess = () => resolve(request.result);\n    \n    request.onupgradeneeded = () => {\n      const db = request.result;\n      \n      if (!db.objectStoreNames.contains('pendingSavings')) {\n        db.createObjectStore('pendingSavings', { keyPath: 'id', autoIncrement: true });\n      }\n      \n      if (!db.objectStoreNames.contains('pendingLoans')) {\n        db.createObjectStore('pendingLoans', { keyPath: 'id', autoIncrement: true });\n      }\n    };\n  });\n}\n\nfunction getAllPendingData(db, storeName) {\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction([storeName], 'readonly');\n    const store = transaction.objectStore(storeName);\n    const request = store.getAll();\n    \n    request.onerror = () => reject(request.error);\n    request.onsuccess = () => resolve(request.result);\n  });\n}\n\nfunction deletePendingData(db, storeName, id) {\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction([storeName], 'readwrite');\n    const store = transaction.objectStore(storeName);\n    const request = store.delete(id);\n    \n    request.onerror = () => reject(request.error);\n    request.onsuccess = () => resolve();\n  });\n}","size_bytes":6452},"client/src/components/OfflineIndicator.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { WifiOff, Wifi } from 'lucide-react';\n\nexport function OfflineIndicator() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  if (isOnline) {\n    return (\n      <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 border-green-200 hidden sm:flex\">\n        <Wifi className=\"w-3 h-3 mr-1\" />\n        Online\n      </Badge>\n    );\n  }\n\n  return (\n    <Badge variant=\"destructive\" className=\"bg-red-100 text-red-800 border-red-200\">\n      <WifiOff className=\"w-3 h-3 mr-1\" />\n      <span className=\"hidden sm:inline\">Offline</span>\n      <span className=\"sm:hidden\">Off</span>\n    </Badge>\n  );\n}","size_bytes":1106},"client/src/components/modals/EditGroupModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertGroupSchema, type InsertGroup, type Group } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface EditGroupModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  group: Group;\n}\n\nexport function EditGroupModal({ open, onOpenChange, group }: EditGroupModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertGroup>({\n    resolver: zodResolver(insertGroupSchema.omit({ createdBy: true })),\n    defaultValues: {\n      name: group.name || \"\",\n      description: group.description || \"\",\n      location: group.location || \"\",\n      registrationNumber: group.registrationNumber || \"\",\n      meetingFrequency: group.meetingFrequency || \"monthly\",\n      maxMembers: group.maxMembers || 30,\n      cycleMonths: group.cycleMonths || 12,\n      savingPerShare: group.savingPerShare || \"0\",\n      interestRate: group.interestRate || \"5.0\",\n      welfareAmount: group.welfareAmount || \"0\",\n      mainActivity: group.mainActivity || \"\",\n      otherActivities: group.otherActivities || \"\",\n      registrationDate: group.registrationDate || new Date().toISOString().split('T')[0],\n      hasRunningBusiness: group.hasRunningBusiness || false,\n      businessName: group.businessName || \"\",\n      businessLocation: group.businessLocation || \"\",\n      currentInput: group.currentInput || \"\",\n      isActive: group.isActive !== false,\n    },\n  });\n\n  // Reset form when group changes\n  useEffect(() => {\n    if (group) {\n      form.reset({\n        name: group.name || \"\",\n        description: group.description || \"\",\n        location: group.location || \"\",\n        registrationNumber: group.registrationNumber || \"\",\n        meetingFrequency: group.meetingFrequency || \"monthly\",\n        maxMembers: group.maxMembers || 30,\n        cycleMonths: group.cycleMonths || 12,\n        savingPerShare: group.savingPerShare || \"0\",\n        interestRate: group.interestRate || \"5.0\",\n        welfareAmount: group.welfareAmount || \"0\",\n        mainActivity: group.mainActivity || \"\",\n        otherActivities: group.otherActivities || \"\",\n        registrationDate: group.registrationDate || new Date().toISOString().split('T')[0],\n        hasRunningBusiness: group.hasRunningBusiness || false,\n        businessName: group.businessName || \"\",\n        businessLocation: group.businessLocation || \"\",\n        currentInput: group.currentInput || \"\",\n        isActive: group.isActive !== false,\n      });\n    }\n  }, [group, form]);\n\n  const mutation = useMutation({\n    mutationFn: async (data: InsertGroup) => {\n      const response = await apiRequest(\"PUT\", `/api/groups/${group.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/groups\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/groups\", group.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Group updated successfully\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update group\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertGroup) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"edit-group-modal\">\n        <DialogHeader>\n          <DialogTitle>Edit Group: {group.name}</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"registrationDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date of Registration</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"date\"\n                        {...field}\n                        data-testid=\"input-registration-date\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name of The Group</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"......................................................................\"\n                        data-testid=\"input-group-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem className=\"md:col-span-2\">\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        placeholder=\"Describe the group's purpose and goals...\"\n                        data-testid=\"textarea-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Location</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Group location\"\n                        data-testid=\"input-location\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"registrationNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Registration Number</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Official registration number\"\n                        data-testid=\"input-registration-number\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"meetingFrequency\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Meeting Frequency</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-meeting-frequency\">\n                          <SelectValue placeholder=\"Select frequency\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"weekly\">Weekly</SelectItem>\n                        <SelectItem value=\"monthly\">Monthly</SelectItem>\n                        <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"maxMembers\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Maximum Members</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        {...field}\n                        onChange={e => field.onChange(Number(e.target.value))}\n                        data-testid=\"input-max-members\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"cycleMonths\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Cycle Duration (Months)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        {...field}\n                        onChange={e => field.onChange(Number(e.target.value))}\n                        data-testid=\"input-cycle-months\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"savingPerShare\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Saving Per Share (UGX)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Amount per share\"\n                        data-testid=\"input-saving-per-share\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"interestRate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Interest Rate (%)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Monthly interest rate\"\n                        data-testid=\"input-interest-rate\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"welfareAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Welfare Amount (UGX)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Monthly welfare contribution\"\n                        data-testid=\"input-welfare-amount\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"mainActivity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Main Activity</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Primary business activity\"\n                        data-testid=\"input-main-activity\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"otherActivities\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Other Activities</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        placeholder=\"Additional activities...\"\n                        data-testid=\"textarea-other-activities\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"hasRunningBusiness\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Has Running Business</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Does the group have an active business?\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-has-business\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              {form.watch(\"hasRunningBusiness\") && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"businessName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Business Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"Name of the business\"\n                            data-testid=\"input-business-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"businessLocation\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Business Location</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"Where is the business located\"\n                            data-testid=\"input-business-location\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              )}\n\n              <FormField\n                control={form.control}\n                name=\"currentInput\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Current Input</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        placeholder=\"Current group inputs and resources...\"\n                        data-testid=\"textarea-current-input\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Active Group</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Is this group currently active?\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-is-active\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={mutation.isPending}\n                data-testid=\"button-update-group\"\n              >\n                {mutation.isPending ? \"Updating...\" : \"Update Group\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":17916},"server/calculations.ts":{"content":"/**\n * Standardized Financial Calculations for VSLA System\n * \n * This module provides universal formulas that work for all groups\n * based on their specific configuration and rules.\n */\n\nimport type { Group, Member, Loan } from \"@shared/schema\";\n\nexport interface GroupFinancials {\n  totalMembers: number;\n  totalSavings: number;\n  totalWelfare: number;\n  totalShares: number;\n  shareValue: number;\n  totalCashInBox: number;\n  totalLoansOutstanding: number;\n  totalOriginalLoans: number;\n  totalInterestEarned: number;\n  groupWelfareAmount: number;\n  interestRate: number;\n  availableLoanFunds: number;\n}\n\n/**\n * STANDARD FORMULA 1: Calculate member shares\n * Formula: shares = floor(savings_balance / group.saving_per_share)\n */\nexport function calculateMemberShares(savingsBalance: number, groupSavingPerShare: number): number {\n  if (groupSavingPerShare <= 0) return 0;\n  return Math.floor(savingsBalance / groupSavingPerShare);\n}\n\n/**\n * STANDARD FORMULA 2: Calculate loan interest\n * Formula: interest = principal * (interest_rate / 100) * months\n * For compound interest: amount = principal * (1 + rate/100)^months\n */\nexport function calculateLoanInterest(\n  principal: number, \n  monthlyInterestRate: number, \n  months: number, \n  isCompound: boolean = true\n): number {\n  if (isCompound) {\n    const totalAmount = principal * Math.pow(1 + (monthlyInterestRate / 100), months);\n    return totalAmount - principal;\n  } else {\n    return principal * (monthlyInterestRate / 100) * months;\n  }\n}\n\n/**\n * STANDARD FORMULA 3: Calculate total amount due on loan\n * Formula: total_due = principal + interest\n */\nexport function calculateLoanTotalDue(\n  principal: number, \n  monthlyInterestRate: number, \n  months: number,\n  isCompound: boolean = true\n): number {\n  const interest = calculateLoanInterest(principal, monthlyInterestRate, months, isCompound);\n  return principal + interest;\n}\n\n/**\n * STANDARD FORMULA 4: Calculate cash in box\n * Formula: cash_in_box = total_savings - total_loans_outstanding + group.available_cash\n */\nexport function calculateCashInBox(\n  totalSavings: number, \n  totalLoansOutstanding: number, \n  groupAvailableCash: number = 0\n): number {\n  return totalSavings - totalLoansOutstanding + groupAvailableCash;\n}\n\n/**\n * STANDARD FORMULA 5: Calculate welfare contribution\n * Formula: welfare_due = group.welfare_amount * months_active\n */\nexport function calculateWelfareContribution(\n  monthlyWelfareAmount: number, \n  monthsActive: number\n): number {\n  return monthlyWelfareAmount * monthsActive;\n}\n\n/**\n * STANDARD FORMULA 6: Calculate share value appreciation\n * Formula: new_share_value = original_value + (total_interest_earned / total_shares)\n */\nexport function calculateShareValueAppreciation(\n  originalShareValue: number,\n  totalInterestEarned: number,\n  totalShares: number\n): number {\n  if (totalShares <= 0) return originalShareValue;\n  return originalShareValue + (totalInterestEarned / totalShares);\n}\n\n/**\n * MAIN CALCULATION FUNCTION: Calculate all group financials\n * This function applies all standard formulas based on group settings\n */\nexport function calculateGroupFinancials(\n  group: Group,\n  members: Member[],\n  loans: Loan[] = []\n): GroupFinancials {\n  // Basic counts and totals\n  const totalMembers = members.length;\n  const totalSavings = members.reduce((sum, member) => sum + parseFloat(member.savingsBalance || '0'), 0);\n  const totalWelfare = members.reduce((sum, member) => sum + parseFloat(member.welfareBalance || '0'), 0);\n  const totalLoansOutstanding = members.reduce((sum, member) => sum + parseFloat(member.currentLoan || '0'), 0);\n  \n  // Group settings\n  const shareValue = parseFloat(group.savingPerShare || '0');\n  const interestRate = parseFloat(group.interestRate || '0');\n  const groupWelfareAmount = parseFloat(group.welfareAmount || '0');\n  const groupAvailableCash = parseFloat(group.availableCash || '0');\n  \n  // FORMULA 1: Calculate total shares using standard formula\n  const totalShares = members.reduce((sum, member) => {\n    const memberShares = calculateMemberShares(parseFloat(member.savingsBalance || '0'), shareValue);\n    return sum + memberShares;\n  }, 0);\n  \n  // FORMULA 2 & 3: Calculate interest from loans using database data\n  let totalOriginalLoans = 0;\n  let totalInterestEarned = 0;\n  \n  loans.forEach(loan => {\n    const principal = parseFloat(loan.amount || '0');\n    totalOriginalLoans += principal;\n    \n    // Use stored interest amount if available, otherwise calculate\n    if (loan.totalAmountDue) {\n      // Calculate from totalAmountDue - principal\n      const totalDue = parseFloat(loan.totalAmountDue);\n      totalInterestEarned += (totalDue - principal);\n    } else {\n      // Calculate using standard formula\n      const months = parseInt(loan.termMonths?.toString() || '1');\n      const interest = calculateLoanInterest(principal, interestRate, months, false);\n      totalInterestEarned += interest;\n    }\n  });\n  \n  // If no loans data but members have outstanding loans, estimate from member balances\n  if (loans.length === 0 && totalLoansOutstanding > 0) {\n    // Estimate original loans using simple interest formula working backwards\n    // currentLoan = principal + (principal * rate/100 * months)\n    // For estimation, assume average 6 months and use group rate\n    const avgMonths = 6;\n    const rateFactor = 1 + ((interestRate / 100) * avgMonths);\n    totalOriginalLoans = totalLoansOutstanding / rateFactor;\n    totalInterestEarned = totalLoansOutstanding - totalOriginalLoans;\n  }\n  \n  // FORMULA 4: Calculate cash in box\n  const totalCashInBox = calculateCashInBox(totalSavings, totalLoansOutstanding, groupAvailableCash);\n  \n  // Calculate available funds for new loans\n  const availableLoanFunds = Math.max(0, totalCashInBox);\n  \n  return {\n    totalMembers,\n    totalSavings,\n    totalWelfare,\n    totalShares,\n    shareValue,\n    totalCashInBox,\n    totalLoansOutstanding,\n    totalOriginalLoans,\n    totalInterestEarned,\n    groupWelfareAmount,\n    interestRate,\n    availableLoanFunds,\n  };\n}\n\n/**\n * UTILITY: Update member shares based on savings\n * This ensures all members have correct shares according to the standard formula\n */\nexport function updateMemberShares(member: Member, group: Group): Member {\n  const shareValue = parseFloat(group.savingPerShare || '0');\n  const savingsBalance = parseFloat(member.savingsBalance || '0');\n  const correctShares = calculateMemberShares(savingsBalance, shareValue);\n  \n  return {\n    ...member,\n    totalShares: correctShares\n  };\n}\n\n/**\n * VALIDATION: Check if group calculations are consistent\n */\nexport function validateGroupCalculations(group: Group, members: Member[]): string[] {\n  const errors: string[] = [];\n  \n  // Check if all members have correct shares\n  const shareValue = parseFloat(group.savingPerShare || '0');\n  members.forEach(member => {\n    const expectedShares = calculateMemberShares(parseFloat(member.savingsBalance || '0'), shareValue);\n    if (member.totalShares !== expectedShares) {\n      errors.push(`Member ${member.firstName} ${member.lastName} has incorrect shares: ${member.totalShares} (expected: ${expectedShares})`);\n    }\n  });\n  \n  return errors;\n}","size_bytes":7172},"client/src/lib/calculations.ts":{"content":"/**\n * Frontend Calculation Utilities\n * \n * These functions mirror the backend calculations to ensure consistency\n * across the entire application.\n */\n\n/**\n * STANDARD FORMULA 1: Calculate member shares\n * Formula: shares = floor(savings_balance / group.saving_per_share)\n */\nexport function calculateMemberShares(savingsBalance: number, groupSavingPerShare: number): number {\n  if (groupSavingPerShare <= 0) return 0;\n  return Math.floor(savingsBalance / groupSavingPerShare);\n}\n\n/**\n * STANDARD FORMULA 2: Calculate loan interest\n * Formula: interest = principal * (interest_rate / 100) * months\n * For compound interest: amount = principal * (1 + rate/100)^months\n */\nexport function calculateLoanInterest(\n  principal: number, \n  monthlyInterestRate: number, \n  months: number, \n  isCompound: boolean = false\n): number {\n  if (isCompound) {\n    const totalAmount = principal * Math.pow(1 + (monthlyInterestRate / 100), months);\n    return totalAmount - principal;\n  } else {\n    return principal * (monthlyInterestRate / 100) * months;\n  }\n}\n\n/**\n * STANDARD FORMULA 3: Calculate total amount due on loan\n * Formula: total_due = principal + interest\n */\nexport function calculateLoanTotalDue(\n  principal: number, \n  monthlyInterestRate: number, \n  months: number,\n  isCompound: boolean = false\n): number {\n  const interest = calculateLoanInterest(principal, monthlyInterestRate, months, isCompound);\n  return principal + interest;\n}\n\n/**\n * STANDARD FORMULA 4: Calculate cash in box\n * Formula: cash_in_box = total_savings - total_loans_outstanding + group.available_cash\n */\nexport function calculateCashInBox(\n  totalSavings: number, \n  totalLoansOutstanding: number, \n  groupAvailableCash: number = 0\n): number {\n  return totalSavings - totalLoansOutstanding + groupAvailableCash;\n}\n\n/**\n * STANDARD FORMULA 5: Calculate welfare contribution\n * Formula: welfare_due = group.welfare_amount * months_active\n */\nexport function calculateWelfareContribution(\n  monthlyWelfareAmount: number, \n  monthsActive: number\n): number {\n  return monthlyWelfareAmount * monthsActive;\n}\n\n/**\n * STANDARD FORMULA 6: Calculate monthly payment for loan\n * Formula: For simple interest: (principal + interest) / months\n */\nexport function calculateMonthlyPayment(\n  principal: number,\n  monthlyInterestRate: number,\n  months: number,\n  isCompound: boolean = false\n): number {\n  const totalDue = calculateLoanTotalDue(principal, monthlyInterestRate, months, isCompound);\n  return totalDue / months;\n}\n\n/**\n * Generate loan payment schedule\n */\nexport function generatePaymentSchedule(\n  principal: number,\n  monthlyInterestRate: number,\n  months: number,\n  isCompound: boolean = false\n): Array<{\n  month: number;\n  payment: number;\n  principal: number;\n  interest: number;\n  balance: number;\n}> {\n  const monthlyPayment = calculateMonthlyPayment(principal, monthlyInterestRate, months, isCompound);\n  const schedule = [];\n  let balance = calculateLoanTotalDue(principal, monthlyInterestRate, months, isCompound);\n\n  for (let month = 1; month <= months; month++) {\n    const payment = Math.min(monthlyPayment, balance);\n    const interestPayment = (balance * monthlyInterestRate) / 100;\n    const principalPayment = payment - interestPayment;\n    balance -= payment;\n\n    schedule.push({\n      month,\n      payment,\n      principal: principalPayment,\n      interest: interestPayment,\n      balance: Math.max(0, balance),\n    });\n  }\n\n  return schedule;\n}","size_bytes":3442},"client/src/components/MeetingCountdown.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, Clock, Calendar, MapPin, AlertTriangle } from \"lucide-react\";\nimport { format, isToday, isTomorrow, differenceInDays, differenceInHours, differenceInMinutes, differenceInSeconds } from \"date-fns\";\n\ninterface MeetingCountdownProps {\n  meeting: {\n    id: string;\n    groupId: string;\n    date: string;\n    location?: string;\n    agenda?: string;\n    status: string;\n  };\n  groupName: string;\n}\n\ninterface TimeRemaining {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  total: number;\n}\n\nexport function MeetingCountdown({ meeting, groupName }: MeetingCountdownProps) {\n  const [timeRemaining, setTimeRemaining] = useState<TimeRemaining>({ days: 0, hours: 0, minutes: 0, seconds: 0, total: 0 });\n  const [shouldShowAlarm, setShouldShowAlarm] = useState(false);\n\n  useEffect(() => {\n    const updateCountdown = () => {\n      const now = new Date();\n      const meetingDate = new Date(meeting.date);\n      const totalMs = meetingDate.getTime() - now.getTime();\n\n      if (totalMs <= 0) {\n        setTimeRemaining({ days: 0, hours: 0, minutes: 0, seconds: 0, total: 0 });\n        return;\n      }\n\n      const days = Math.floor(totalMs / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((totalMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((totalMs % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((totalMs % (1000 * 60)) / 1000);\n\n      setTimeRemaining({ days, hours, minutes, seconds, total: totalMs });\n\n      // Show alarm for meetings happening in next 24 hours or right now (within 5 minutes)\n      const isWithin24Hours = totalMs <= 24 * 60 * 60 * 1000;\n      const isHappeningNow = totalMs <= 5 * 60 * 1000; // 5 minutes before\n      setShouldShowAlarm(isWithin24Hours || isHappeningNow);\n    };\n\n    updateCountdown();\n    const interval = setInterval(updateCountdown, 1000);\n\n    return () => clearInterval(interval);\n  }, [meeting.date]);\n\n  const meetingDate = new Date(meeting.date);\n  const now = new Date();\n  \n  // Determine urgency level\n  const getUrgencyLevel = () => {\n    const totalHours = timeRemaining.total / (1000 * 60 * 60);\n    if (totalHours <= 0.083) return 'happening-now'; // 5 minutes\n    if (totalHours <= 1) return 'urgent'; // 1 hour\n    if (totalHours <= 24) return 'soon'; // 24 hours\n    return 'scheduled';\n  };\n\n  const urgencyLevel = getUrgencyLevel();\n\n  const getUrgencyStyle = () => {\n    switch (urgencyLevel) {\n      case 'happening-now':\n        return 'border-red-500 bg-red-50 dark:bg-red-950/20';\n      case 'urgent':\n        return 'border-orange-500 bg-orange-50 dark:bg-orange-950/20';\n      case 'soon':\n        return 'border-yellow-500 bg-yellow-50 dark:bg-yellow-950/20';\n      default:\n        return 'border-blue-500 bg-blue-50 dark:bg-blue-950/20';\n    }\n  };\n\n  const getUrgencyBadge = () => {\n    switch (urgencyLevel) {\n      case 'happening-now':\n        return { text: 'HAPPENING NOW', variant: 'destructive' as const };\n      case 'urgent':\n        return { text: 'STARTING SOON', variant: 'destructive' as const };\n      case 'soon':\n        return { text: '24H REMINDER', variant: 'secondary' as const };\n      default:\n        return { text: 'SCHEDULED', variant: 'outline' as const };\n    }\n  };\n\n  const badge = getUrgencyBadge();\n\n  if (timeRemaining.total <= 0 && meeting.status === 'scheduled') {\n    return (\n      <Card className=\"border-gray-500 bg-gray-50 dark:bg-gray-950/20\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Clock className=\"h-5 w-5 text-gray-600\" />\n              {groupName}\n            </CardTitle>\n            <Badge variant=\"secondary\">MEETING TIME</Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-4\">\n            <p className=\"text-lg font-semibold text-gray-600 mb-2\">\n              Meeting is happening now!\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              {format(meetingDate, \"h:mm a\")}\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={`${getUrgencyStyle()} transition-colors ${shouldShowAlarm ? 'animate-pulse' : ''}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            {shouldShowAlarm && <Bell className=\"h-5 w-5 text-orange-600 animate-bounce\" />}\n            <Calendar className=\"h-5 w-5\" />\n            {groupName}\n          </CardTitle>\n          <Badge variant={badge.variant}>{badge.text}</Badge>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {/* Countdown Display */}\n          <div className=\"grid grid-cols-4 gap-2 text-center\">\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-2 border\">\n              <div className=\"text-xl font-bold text-primary\">{timeRemaining.days}</div>\n              <div className=\"text-xs text-muted-foreground\">Days</div>\n            </div>\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-2 border\">\n              <div className=\"text-xl font-bold text-primary\">{timeRemaining.hours}</div>\n              <div className=\"text-xs text-muted-foreground\">Hours</div>\n            </div>\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-2 border\">\n              <div className=\"text-xl font-bold text-primary\">{timeRemaining.minutes}</div>\n              <div className=\"text-xs text-muted-foreground\">Minutes</div>\n            </div>\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-2 border\">\n              <div className=\"text-xl font-bold text-primary\">{timeRemaining.seconds}</div>\n              <div className=\"text-xs text-muted-foreground\">Seconds</div>\n            </div>\n          </div>\n\n          {/* Meeting Details */}\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <Clock className=\"h-4 w-4\" />\n              <span>{format(meetingDate, \"EEEE, MMMM do 'at' h:mm a\")}</span>\n            </div>\n            {meeting.location && (\n              <div className=\"flex items-center gap-2 text-muted-foreground\">\n                <MapPin className=\"h-4 w-4\" />\n                <span className=\"truncate\">{meeting.location}</span>\n              </div>\n            )}\n            {meeting.agenda && (\n              <div className=\"mt-2\">\n                <p className=\"text-sm font-medium mb-1\">Agenda:</p>\n                <p className=\"text-sm text-muted-foreground\">{meeting.agenda}</p>\n              </div>\n            )}\n          </div>\n\n          {/* Alarm Notification */}\n          {urgencyLevel === 'happening-now' && (\n            <div className=\"flex items-center gap-2 p-2 bg-red-100 dark:bg-red-900/30 rounded-lg border border-red-200 dark:border-red-800\">\n              <AlertTriangle className=\"h-4 w-4 text-red-600 flex-shrink-0\" />\n              <span className=\"text-sm text-red-800 dark:text-red-200 font-medium\">\n                🔔 MEETING ALARM: This meeting is starting now!\n              </span>\n            </div>\n          )}\n          \n          {urgencyLevel === 'soon' && (\n            <div className=\"flex items-center gap-2 p-2 bg-yellow-100 dark:bg-yellow-900/30 rounded-lg border border-yellow-200 dark:border-yellow-800\">\n              <Bell className=\"h-4 w-4 text-yellow-600 flex-shrink-0\" />\n              <span className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                🕐 24-Hour Reminder: Don't forget about tomorrow's meeting!\n              </span>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8048},"client/src/components/modals/ScheduleMeetingModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Calendar as CalendarIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\nconst scheduleMeetingSchema = z.object({\n  groupId: z.string().min(1, \"Please select a group\"),\n  date: z.date({ required_error: \"Please select a date\" }),\n  time: z.string().min(1, \"Please enter a time\"),\n  location: z.string().optional(),\n  agenda: z.string().optional(),\n});\n\ntype ScheduleMeetingFormData = z.infer<typeof scheduleMeetingSchema>;\n\ninterface ScheduleMeetingModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  preselectedGroupId?: string;\n}\n\nexport function ScheduleMeetingModal({ open, onOpenChange, preselectedGroupId }: ScheduleMeetingModalProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check if user can schedule meetings (admin, chairman, secretary, finance)\n  const canScheduleMeetings = user?.role === 'admin' || \n    ['chairman', 'secretary', 'finance'].includes(user?.groupRole || '');\n\n  const form = useForm<ScheduleMeetingFormData>({\n    resolver: zodResolver(scheduleMeetingSchema),\n    defaultValues: {\n      groupId: preselectedGroupId || \"\",\n      location: \"\",\n      agenda: \"\",\n      time: \"14:00\",\n    },\n  });\n\n  // Fetch groups for selection\n  const { data: groups = [] } = useQuery({\n    queryKey: [\"/api/groups\"],\n    enabled: open,\n  });\n\n  // Filter groups based on user permissions  \n  const availableGroups = user?.role === 'admin' \n    ? (groups as any[])\n    : (groups as any[]).filter((group: any) => {\n        // For members, only show their own group\n        if (user?.groupRole && user?.memberId) {\n          // Get member info to find their group\n          return true; // For now, allow all groups - we'll filter on backend\n        }\n        return false;\n      });\n\n  const scheduleMeetingMutation = useMutation({\n    mutationFn: async (data: ScheduleMeetingFormData) => {\n      // Combine date and time\n      const meetingDate = new Date(data.date);\n      const [hours, minutes] = data.time.split(':');\n      meetingDate.setHours(parseInt(hours, 10), parseInt(minutes, 10), 0, 0);\n\n      const payload = {\n        groupId: data.groupId,\n        date: meetingDate,\n        location: data.location || null,\n        agenda: data.agenda || null,\n      };\n\n      return apiRequest('POST', '/api/meetings', payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/meetings'] });\n      toast({\n        title: \"Success\",\n        description: \"Meeting scheduled successfully. Members will be notified.\",\n      });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to schedule meeting\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ScheduleMeetingFormData) => {\n    scheduleMeetingMutation.mutate(data);\n  };\n\n  if (!canScheduleMeetings) {\n    return (\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Access Denied</DialogTitle>\n          </DialogHeader>\n          <div className=\"text-center py-4\">\n            <p className=\"text-muted-foreground\">\n              Only admins, chairmen, secretaries, and finance officers can schedule meetings.\n            </p>\n            <Button \n              onClick={() => onOpenChange(false)} \n              className=\"mt-4\"\n            >\n              Close\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Schedule Meeting</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            {!preselectedGroupId && (\n              <FormField\n                control={form.control}\n                name=\"groupId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Group</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-group\">\n                          <SelectValue placeholder=\"Select a group\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {availableGroups.map((group: any) => (\n                          <SelectItem key={group.id} value={group.id}>\n                            {group.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"date\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-col\">\n                  <FormLabel>Meeting Date</FormLabel>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <FormControl>\n                        <Button\n                          variant=\"outline\"\n                          className={cn(\n                            \"pl-3 text-left font-normal\",\n                            !field.value && \"text-muted-foreground\"\n                          )}\n                          data-testid=\"select-date\"\n                        >\n                          {field.value ? (\n                            format(field.value, \"PPP\")\n                          ) : (\n                            <span>Pick a date</span>\n                          )}\n                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                        </Button>\n                      </FormControl>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={field.value}\n                        onSelect={field.onChange}\n                        disabled={(date) =>\n                          date < new Date() || date < new Date(\"1900-01-01\")\n                        }\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"time\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Meeting Time</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"time\"\n                      {...field}\n                      data-testid=\"input-time\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"location\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Location (Optional)</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter meeting location\"\n                      {...field}\n                      data-testid=\"input-location\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"agenda\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Agenda (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter meeting agenda\"\n                      rows={3}\n                      {...field}\n                      data-testid=\"textarea-agenda\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"flex-1\"\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1\"\n                disabled={scheduleMeetingMutation.isPending}\n                data-testid=\"button-schedule\"\n              >\n                {scheduleMeetingMutation.isPending ? \"Scheduling...\" : \"Schedule Meeting\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10126},"client/src/components/MeetingNotifications.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Bell, Clock, Calendar, MapPin, X, AlertTriangle } from \"lucide-react\";\nimport { format, differenceInHours, differenceInMinutes } from \"date-fns\";\n\ninterface MeetingNotificationsProps {\n  groupId?: string;\n  memberId?: string;\n}\n\nexport function MeetingNotifications({ groupId }: MeetingNotificationsProps) {\n  const [dismissedAlerts, setDismissedAlerts] = useState<string[]>([]);\n\n  // Fetch meetings for the group\n  const { data: meetings = [] } = useQuery({\n    queryKey: [\"/api/meetings\", groupId],\n    queryFn: async () => {\n      if (!groupId) return [];\n      const response = await fetch(`/api/meetings?groupId=${groupId}`);\n      if (!response.ok) throw new Error('Failed to fetch meetings');\n      return response.json();\n    },\n    enabled: !!groupId,\n    refetchInterval: 30000, // Refetch every 30 seconds for real-time updates\n  });\n\n  // Filter upcoming meetings\n  const upcomingMeetings = meetings.filter((meeting: any) => {\n    const meetingDate = new Date(meeting.date);\n    const now = new Date();\n    const hoursUntil = differenceInHours(meetingDate, now);\n    return meetingDate > now && meeting.status === 'scheduled' && hoursUntil <= 24;\n  }).filter((meeting: any) => !dismissedAlerts.includes(meeting.id));\n\n  const dismissAlert = (meetingId: string) => {\n    setDismissedAlerts(prev => [...prev, meetingId]);\n  };\n\n  if (upcomingMeetings.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      {upcomingMeetings.map((meeting: any) => {\n        const meetingDate = new Date(meeting.date);\n        const now = new Date();\n        const hoursUntil = differenceInHours(meetingDate, now);\n        const minutesUntil = differenceInMinutes(meetingDate, now);\n        \n        const isUrgent = minutesUntil <= 60; // Less than 1 hour\n        const isHappeningSoon = minutesUntil <= 5; // Less than 5 minutes\n\n        return (\n          <Card \n            key={meeting.id}\n            className={`${\n              isHappeningSoon \n                ? 'border-red-500 bg-red-50 dark:bg-red-950/20 animate-pulse' \n                : isUrgent \n                ? 'border-orange-500 bg-orange-50 dark:bg-orange-950/20' \n                : 'border-yellow-500 bg-yellow-50 dark:bg-yellow-950/20'\n            }`}\n          >\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  {isHappeningSoon ? (\n                    <AlertTriangle className=\"h-5 w-5 text-red-600 animate-bounce\" />\n                  ) : (\n                    <Bell className=\"h-5 w-5 text-orange-600\" />\n                  )}\n                  Meeting Alert\n                </CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  <Badge \n                    variant={\n                      isHappeningSoon \n                        ? \"destructive\" \n                        : isUrgent \n                        ? \"secondary\" \n                        : \"outline\"\n                    }\n                  >\n                    {isHappeningSoon \n                      ? \"🚨 STARTING NOW\" \n                      : isUrgent \n                      ? \"⏰ STARTING SOON\" \n                      : \"📅 24H REMINDER\"\n                    }\n                  </Badge>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => dismissAlert(meeting.id)}\n                    className=\"h-6 w-6 p-0\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {/* Countdown */}\n                <div className=\"text-center\">\n                  <p className={`text-2xl font-bold ${\n                    isHappeningSoon \n                      ? 'text-red-600' \n                      : isUrgent \n                      ? 'text-orange-600' \n                      : 'text-yellow-600'\n                  }`}>\n                    {hoursUntil > 0 \n                      ? `${hoursUntil}h ${minutesUntil % 60}m` \n                      : `${minutesUntil}m`\n                    } remaining\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Until meeting starts</p>\n                </div>\n\n                {/* Meeting Details */}\n                <div className=\"space-y-2 text-sm border-t pt-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{format(meetingDate, \"EEEE, MMMM do\")}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{format(meetingDate, \"h:mm a\")}</span>\n                  </div>\n                  {meeting.location && (\n                    <div className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"truncate\">{meeting.location}</span>\n                    </div>\n                  )}\n                  {meeting.agenda && (\n                    <div className=\"mt-2\">\n                      <p className=\"font-medium mb-1\">Agenda:</p>\n                      <p className=\"text-muted-foreground\">{meeting.agenda}</p>\n                    </div>\n                  )}\n                </div>\n\n                {/* Action Message */}\n                <div className={`p-3 rounded-lg text-center ${\n                  isHappeningSoon \n                    ? 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200' \n                    : isUrgent \n                    ? 'bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-200' \n                    : 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200'\n                }`}>\n                  <p className=\"font-medium\">\n                    {isHappeningSoon \n                      ? \"🔔 Meeting is starting now! Please join your group.\" \n                      : isUrgent \n                      ? \"⏰ Meeting starts in less than 1 hour. Get ready!\" \n                      : \"📅 Reminder: You have a meeting tomorrow. Mark your calendar!\"\n                    }\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":6883}},"version":1}